
ESD_Project_Demo1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098a4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009a2c  08009a2c  00019a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a48  08009a48  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009a48  08009a48  00019a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a50  08009a50  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a50  08009a50  00019a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a54  08009a54  00019a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009a58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000008a8  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000938  20000938  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001afb2  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c62  00000000  00000000  0003b072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001690  00000000  00000000  0003ecd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001500  00000000  00000000  00040368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000245fe  00000000  00000000  00041868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c91a  00000000  00000000  00065e66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3c50  00000000  00000000  00082780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001563d0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006204  00000000  00000000  00156420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009a14 	.word	0x08009a14

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08009a14 	.word	0x08009a14

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fe6e 	bl	80011b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f822 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 fa5a 	bl	8000990 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004dc:	f000 f888 	bl	80005f0 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e0:	f000 f8b4 	bl	800064c <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e4:	f000 f8e2 	bl	80006ac <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e8:	f008 fe4c 	bl	8009184 <MX_USB_HOST_Init>
  MX_TIM1_Init();
 80004ec:	f000 f914 	bl	8000718 <MX_TIM1_Init>
  MX_TIM2_Init();
 80004f0:	f000 f9b2 	bl	8000858 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80004f4:	2100      	movs	r1, #0
 80004f6:	4807      	ldr	r0, [pc, #28]	; (8000514 <main+0x48>)
 80004f8:	f004 fa9c 	bl	8004a34 <HAL_TIM_PWM_Start>
HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80004fc:	2100      	movs	r1, #0
 80004fe:	4806      	ldr	r0, [pc, #24]	; (8000518 <main+0x4c>)
 8000500:	f004 fbba 	bl	8004c78 <HAL_TIM_IC_Start_IT>
HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000504:	2104      	movs	r1, #4
 8000506:	4804      	ldr	r0, [pc, #16]	; (8000518 <main+0x4c>)
 8000508:	f004 fbb6 	bl	8004c78 <HAL_TIM_IC_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800050c:	f008 fe60 	bl	80091d0 <MX_USB_HOST_Process>
 8000510:	e7fc      	b.n	800050c <main+0x40>
 8000512:	bf00      	nop
 8000514:	200001a0 	.word	0x200001a0
 8000518:	200001e8 	.word	0x200001e8

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	; 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0320 	add.w	r3, r7, #32
 8000526:	2230      	movs	r2, #48	; 0x30
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f009 f96c 	bl	8009808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	4b28      	ldr	r3, [pc, #160]	; (80005e8 <SystemClock_Config+0xcc>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	4a27      	ldr	r2, [pc, #156]	; (80005e8 <SystemClock_Config+0xcc>)
 800054a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054e:	6413      	str	r3, [r2, #64]	; 0x40
 8000550:	4b25      	ldr	r3, [pc, #148]	; (80005e8 <SystemClock_Config+0xcc>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b22      	ldr	r3, [pc, #136]	; (80005ec <SystemClock_Config+0xd0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a21      	ldr	r2, [pc, #132]	; (80005ec <SystemClock_Config+0xd0>)
 8000566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056a:	6013      	str	r3, [r2, #0]
 800056c:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <SystemClock_Config+0xd0>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000578:	2301      	movs	r3, #1
 800057a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800057c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000580:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000586:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800058a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800058c:	2308      	movs	r3, #8
 800058e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000590:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000594:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000596:	2302      	movs	r3, #2
 8000598:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800059a:	2307      	movs	r3, #7
 800059c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	4618      	mov	r0, r3
 80005a4:	f003 fb50 	bl	8003c48 <HAL_RCC_OscConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ae:	f000 fb69 	bl	8000c84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	230f      	movs	r3, #15
 80005b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b6:	2302      	movs	r3, #2
 80005b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80005ba:	2380      	movs	r3, #128	; 0x80
 80005bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80005be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80005c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80005c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	2102      	movs	r1, #2
 80005d0:	4618      	mov	r0, r3
 80005d2:	f003 fdb1 	bl	8004138 <HAL_RCC_ClockConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005dc:	f000 fb52 	bl	8000c84 <Error_Handler>
  }
}
 80005e0:	bf00      	nop
 80005e2:	3750      	adds	r7, #80	; 0x50
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <MX_I2C1_Init+0x50>)
 80005f6:	4a13      	ldr	r2, [pc, #76]	; (8000644 <MX_I2C1_Init+0x54>)
 80005f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_I2C1_Init+0x50>)
 80005fc:	4a12      	ldr	r2, [pc, #72]	; (8000648 <MX_I2C1_Init+0x58>)
 80005fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_I2C1_Init+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <MX_I2C1_Init+0x50>)
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <MX_I2C1_Init+0x50>)
 800060e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000612:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000614:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <MX_I2C1_Init+0x50>)
 8000616:	2200      	movs	r2, #0
 8000618:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_I2C1_Init+0x50>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <MX_I2C1_Init+0x50>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <MX_I2C1_Init+0x50>)
 8000628:	2200      	movs	r2, #0
 800062a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800062c:	4804      	ldr	r0, [pc, #16]	; (8000640 <MX_I2C1_Init+0x50>)
 800062e:	f002 fd27 	bl	8003080 <HAL_I2C_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000638:	f000 fb24 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	200000ac 	.word	0x200000ac
 8000644:	40005400 	.word	0x40005400
 8000648:	000186a0 	.word	0x000186a0

0800064c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000650:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000652:	4a14      	ldr	r2, [pc, #80]	; (80006a4 <MX_I2S3_Init+0x58>)
 8000654:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000656:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800065c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000664:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800066a:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <MX_I2S3_Init+0x54>)
 800066c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000670:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000672:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000674:	4a0c      	ldr	r2, [pc, #48]	; (80006a8 <MX_I2S3_Init+0x5c>)
 8000676:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000678:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <MX_I2S3_Init+0x54>)
 800067a:	2200      	movs	r2, #0
 800067c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800067e:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000680:	2200      	movs	r2, #0
 8000682:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000686:	2200      	movs	r2, #0
 8000688:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800068a:	4805      	ldr	r0, [pc, #20]	; (80006a0 <MX_I2S3_Init+0x54>)
 800068c:	f002 fe3c 	bl	8003308 <HAL_I2S_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000696:	f000 faf5 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000100 	.word	0x20000100
 80006a4:	40003c00 	.word	0x40003c00
 80006a8:	00017700 	.word	0x00017700

080006ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006b0:	4b17      	ldr	r3, [pc, #92]	; (8000710 <MX_SPI1_Init+0x64>)
 80006b2:	4a18      	ldr	r2, [pc, #96]	; (8000714 <MX_SPI1_Init+0x68>)
 80006b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006b6:	4b16      	ldr	r3, [pc, #88]	; (8000710 <MX_SPI1_Init+0x64>)
 80006b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006be:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_SPI1_Init+0x64>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <MX_SPI1_Init+0x64>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_SPI1_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_SPI1_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_SPI1_Init+0x64>)
 80006d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_SPI1_Init+0x64>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e4:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <MX_SPI1_Init+0x64>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_SPI1_Init+0x64>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f0:	4b07      	ldr	r3, [pc, #28]	; (8000710 <MX_SPI1_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_SPI1_Init+0x64>)
 80006f8:	220a      	movs	r2, #10
 80006fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006fc:	4804      	ldr	r0, [pc, #16]	; (8000710 <MX_SPI1_Init+0x64>)
 80006fe:	f004 f867 	bl	80047d0 <HAL_SPI_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000708:	f000 fabc 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000148 	.word	0x20000148
 8000714:	40013000 	.word	0x40013000

08000718 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b096      	sub	sp, #88	; 0x58
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800071e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800072c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]
 8000746:	615a      	str	r2, [r3, #20]
 8000748:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	2220      	movs	r2, #32
 800074e:	2100      	movs	r1, #0
 8000750:	4618      	mov	r0, r3
 8000752:	f009 f859 	bl	8009808 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000756:	4b3e      	ldr	r3, [pc, #248]	; (8000850 <MX_TIM1_Init+0x138>)
 8000758:	4a3e      	ldr	r2, [pc, #248]	; (8000854 <MX_TIM1_Init+0x13c>)
 800075a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 420-1;
 800075c:	4b3c      	ldr	r3, [pc, #240]	; (8000850 <MX_TIM1_Init+0x138>)
 800075e:	f240 12a3 	movw	r2, #419	; 0x1a3
 8000762:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000764:	4b3a      	ldr	r3, [pc, #232]	; (8000850 <MX_TIM1_Init+0x138>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20;
 800076a:	4b39      	ldr	r3, [pc, #228]	; (8000850 <MX_TIM1_Init+0x138>)
 800076c:	2214      	movs	r2, #20
 800076e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000770:	4b37      	ldr	r3, [pc, #220]	; (8000850 <MX_TIM1_Init+0x138>)
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000776:	4b36      	ldr	r3, [pc, #216]	; (8000850 <MX_TIM1_Init+0x138>)
 8000778:	2200      	movs	r2, #0
 800077a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077c:	4b34      	ldr	r3, [pc, #208]	; (8000850 <MX_TIM1_Init+0x138>)
 800077e:	2200      	movs	r2, #0
 8000780:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000782:	4833      	ldr	r0, [pc, #204]	; (8000850 <MX_TIM1_Init+0x138>)
 8000784:	f004 f8ad 	bl	80048e2 <HAL_TIM_Base_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800078e:	f000 fa79 	bl	8000c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000796:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000798:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800079c:	4619      	mov	r1, r3
 800079e:	482c      	ldr	r0, [pc, #176]	; (8000850 <MX_TIM1_Init+0x138>)
 80007a0:	f004 fdf8 	bl	8005394 <HAL_TIM_ConfigClockSource>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80007aa:	f000 fa6b 	bl	8000c84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007ae:	4828      	ldr	r0, [pc, #160]	; (8000850 <MX_TIM1_Init+0x138>)
 80007b0:	f004 f8e6 	bl	8004980 <HAL_TIM_PWM_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80007ba:	f000 fa63 	bl	8000c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007be:	2300      	movs	r3, #0
 80007c0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c2:	2300      	movs	r3, #0
 80007c4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007ca:	4619      	mov	r1, r3
 80007cc:	4820      	ldr	r0, [pc, #128]	; (8000850 <MX_TIM1_Init+0x138>)
 80007ce:	f005 fc23 	bl	8006018 <HAL_TIMEx_MasterConfigSynchronization>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80007d8:	f000 fa54 	bl	8000c84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007dc:	2360      	movs	r3, #96	; 0x60
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 5;
 80007e0:	2305      	movs	r3, #5
 80007e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007e4:	2300      	movs	r3, #0
 80007e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007e8:	2300      	movs	r3, #0
 80007ea:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007f0:	2300      	movs	r3, #0
 80007f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007f4:	2300      	movs	r3, #0
 80007f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fc:	2200      	movs	r2, #0
 80007fe:	4619      	mov	r1, r3
 8000800:	4813      	ldr	r0, [pc, #76]	; (8000850 <MX_TIM1_Init+0x138>)
 8000802:	f004 fd05 	bl	8005210 <HAL_TIM_PWM_ConfigChannel>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800080c:	f000 fa3a 	bl	8000c84 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000810:	2300      	movs	r3, #0
 8000812:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000814:	2300      	movs	r3, #0
 8000816:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000818:	2300      	movs	r3, #0
 800081a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000824:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000828:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800082a:	2300      	movs	r3, #0
 800082c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	4619      	mov	r1, r3
 8000832:	4807      	ldr	r0, [pc, #28]	; (8000850 <MX_TIM1_Init+0x138>)
 8000834:	f005 fc6c 	bl	8006110 <HAL_TIMEx_ConfigBreakDeadTime>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800083e:	f000 fa21 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000842:	4803      	ldr	r0, [pc, #12]	; (8000850 <MX_TIM1_Init+0x138>)
 8000844:	f000 fbc0 	bl	8000fc8 <HAL_TIM_MspPostInit>

}
 8000848:	bf00      	nop
 800084a:	3758      	adds	r7, #88	; 0x58
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	200001a0 	.word	0x200001a0
 8000854:	40010000 	.word	0x40010000

08000858 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b090      	sub	sp, #64	; 0x40
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800085e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000892:	4b3e      	ldr	r3, [pc, #248]	; (800098c <MX_TIM2_Init+0x134>)
 8000894:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000898:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10-1;
 800089a:	4b3c      	ldr	r3, [pc, #240]	; (800098c <MX_TIM2_Init+0x134>)
 800089c:	2209      	movs	r2, #9
 800089e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a0:	4b3a      	ldr	r3, [pc, #232]	; (800098c <MX_TIM2_Init+0x134>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 80008a6:	4b39      	ldr	r3, [pc, #228]	; (800098c <MX_TIM2_Init+0x134>)
 80008a8:	f644 6220 	movw	r2, #20000	; 0x4e20
 80008ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ae:	4b37      	ldr	r3, [pc, #220]	; (800098c <MX_TIM2_Init+0x134>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b4:	4b35      	ldr	r3, [pc, #212]	; (800098c <MX_TIM2_Init+0x134>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008ba:	4834      	ldr	r0, [pc, #208]	; (800098c <MX_TIM2_Init+0x134>)
 80008bc:	f004 f811 	bl	80048e2 <HAL_TIM_Base_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80008c6:	f000 f9dd 	bl	8000c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ce:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008d4:	4619      	mov	r1, r3
 80008d6:	482d      	ldr	r0, [pc, #180]	; (800098c <MX_TIM2_Init+0x134>)
 80008d8:	f004 fd5c 	bl	8005394 <HAL_TIM_ConfigClockSource>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80008e2:	f000 f9cf 	bl	8000c84 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80008e6:	4829      	ldr	r0, [pc, #164]	; (800098c <MX_TIM2_Init+0x134>)
 80008e8:	f004 f96c 	bl	8004bc4 <HAL_TIM_IC_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80008f2:	f000 f9c7 	bl	8000c84 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80008f6:	2304      	movs	r3, #4
 80008f8:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80008fa:	2350      	movs	r3, #80	; 0x50
 80008fc:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	481e      	ldr	r0, [pc, #120]	; (800098c <MX_TIM2_Init+0x134>)
 8000912:	f004 fe06 	bl	8005522 <HAL_TIM_SlaveConfigSynchro>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 800091c:	f000 f9b2 	bl	8000c84 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000924:	2301      	movs	r3, #1
 8000926:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	2200      	movs	r2, #0
 8000936:	4619      	mov	r1, r3
 8000938:	4814      	ldr	r0, [pc, #80]	; (800098c <MX_TIM2_Init+0x134>)
 800093a:	f004 fbcd 	bl	80050d8 <HAL_TIM_IC_ConfigChannel>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000944:	f000 f99e 	bl	8000c84 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000948:	2302      	movs	r3, #2
 800094a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800094c:	2302      	movs	r3, #2
 800094e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000950:	f107 030c 	add.w	r3, r7, #12
 8000954:	2204      	movs	r2, #4
 8000956:	4619      	mov	r1, r3
 8000958:	480c      	ldr	r0, [pc, #48]	; (800098c <MX_TIM2_Init+0x134>)
 800095a:	f004 fbbd 	bl	80050d8 <HAL_TIM_IC_ConfigChannel>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 8000964:	f000 f98e 	bl	8000c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000968:	2300      	movs	r3, #0
 800096a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	4619      	mov	r1, r3
 8000974:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_TIM2_Init+0x134>)
 8000976:	f005 fb4f 	bl	8006018 <HAL_TIMEx_MasterConfigSynchronization>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 8000980:	f000 f980 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000984:	bf00      	nop
 8000986:	3740      	adds	r7, #64	; 0x40
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	200001e8 	.word	0x200001e8

08000990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08c      	sub	sp, #48	; 0x30
 8000994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	61bb      	str	r3, [r7, #24]
 80009aa:	4b72      	ldr	r3, [pc, #456]	; (8000b74 <MX_GPIO_Init+0x1e4>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a71      	ldr	r2, [pc, #452]	; (8000b74 <MX_GPIO_Init+0x1e4>)
 80009b0:	f043 0310 	orr.w	r3, r3, #16
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b6f      	ldr	r3, [pc, #444]	; (8000b74 <MX_GPIO_Init+0x1e4>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0310 	and.w	r3, r3, #16
 80009be:	61bb      	str	r3, [r7, #24]
 80009c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	617b      	str	r3, [r7, #20]
 80009c6:	4b6b      	ldr	r3, [pc, #428]	; (8000b74 <MX_GPIO_Init+0x1e4>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a6a      	ldr	r2, [pc, #424]	; (8000b74 <MX_GPIO_Init+0x1e4>)
 80009cc:	f043 0304 	orr.w	r3, r3, #4
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b68      	ldr	r3, [pc, #416]	; (8000b74 <MX_GPIO_Init+0x1e4>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0304 	and.w	r3, r3, #4
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	4b64      	ldr	r3, [pc, #400]	; (8000b74 <MX_GPIO_Init+0x1e4>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a63      	ldr	r2, [pc, #396]	; (8000b74 <MX_GPIO_Init+0x1e4>)
 80009e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b61      	ldr	r3, [pc, #388]	; (8000b74 <MX_GPIO_Init+0x1e4>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	4b5d      	ldr	r3, [pc, #372]	; (8000b74 <MX_GPIO_Init+0x1e4>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a5c      	ldr	r2, [pc, #368]	; (8000b74 <MX_GPIO_Init+0x1e4>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b5a      	ldr	r3, [pc, #360]	; (8000b74 <MX_GPIO_Init+0x1e4>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	4b56      	ldr	r3, [pc, #344]	; (8000b74 <MX_GPIO_Init+0x1e4>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a55      	ldr	r2, [pc, #340]	; (8000b74 <MX_GPIO_Init+0x1e4>)
 8000a20:	f043 0302 	orr.w	r3, r3, #2
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b53      	ldr	r3, [pc, #332]	; (8000b74 <MX_GPIO_Init+0x1e4>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	4b4f      	ldr	r3, [pc, #316]	; (8000b74 <MX_GPIO_Init+0x1e4>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a4e      	ldr	r2, [pc, #312]	; (8000b74 <MX_GPIO_Init+0x1e4>)
 8000a3c:	f043 0308 	orr.w	r3, r3, #8
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b4c      	ldr	r3, [pc, #304]	; (8000b74 <MX_GPIO_Init+0x1e4>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0308 	and.w	r3, r3, #8
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2108      	movs	r1, #8
 8000a52:	4849      	ldr	r0, [pc, #292]	; (8000b78 <MX_GPIO_Init+0x1e8>)
 8000a54:	f000 fef0 	bl	8001838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	4847      	ldr	r0, [pc, #284]	; (8000b7c <MX_GPIO_Init+0x1ec>)
 8000a5e:	f000 feeb 	bl	8001838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a62:	2200      	movs	r2, #0
 8000a64:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a68:	4845      	ldr	r0, [pc, #276]	; (8000b80 <MX_GPIO_Init+0x1f0>)
 8000a6a:	f000 fee5 	bl	8001838 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a6e:	2308      	movs	r3, #8
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4619      	mov	r1, r3
 8000a84:	483c      	ldr	r0, [pc, #240]	; (8000b78 <MX_GPIO_Init+0x1e8>)
 8000a86:	f000 fd3b 	bl	8001500 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4836      	ldr	r0, [pc, #216]	; (8000b7c <MX_GPIO_Init+0x1ec>)
 8000aa2:	f000 fd2d 	bl	8001500 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000aa6:	2308      	movs	r3, #8
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ab6:	2305      	movs	r3, #5
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	4619      	mov	r1, r3
 8000ac0:	482e      	ldr	r0, [pc, #184]	; (8000b7c <MX_GPIO_Init+0x1ec>)
 8000ac2:	f000 fd1d 	bl	8001500 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000aca:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	4619      	mov	r1, r3
 8000ada:	482a      	ldr	r0, [pc, #168]	; (8000b84 <MX_GPIO_Init+0x1f4>)
 8000adc:	f000 fd10 	bl	8001500 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000aec:	f107 031c 	add.w	r3, r7, #28
 8000af0:	4619      	mov	r1, r3
 8000af2:	4825      	ldr	r0, [pc, #148]	; (8000b88 <MX_GPIO_Init+0x1f8>)
 8000af4:	f000 fd04 	bl	8001500 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000af8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b0a:	2305      	movs	r3, #5
 8000b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4619      	mov	r1, r3
 8000b14:	481c      	ldr	r0, [pc, #112]	; (8000b88 <MX_GPIO_Init+0x1f8>)
 8000b16:	f000 fcf3 	bl	8001500 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b1a:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000b1e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b2c:	f107 031c 	add.w	r3, r7, #28
 8000b30:	4619      	mov	r1, r3
 8000b32:	4813      	ldr	r0, [pc, #76]	; (8000b80 <MX_GPIO_Init+0x1f0>)
 8000b34:	f000 fce4 	bl	8001500 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b38:	2320      	movs	r3, #32
 8000b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	4619      	mov	r1, r3
 8000b4a:	480d      	ldr	r0, [pc, #52]	; (8000b80 <MX_GPIO_Init+0x1f0>)
 8000b4c:	f000 fcd8 	bl	8001500 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b50:	2302      	movs	r3, #2
 8000b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b54:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	f107 031c 	add.w	r3, r7, #28
 8000b62:	4619      	mov	r1, r3
 8000b64:	4804      	ldr	r0, [pc, #16]	; (8000b78 <MX_GPIO_Init+0x1e8>)
 8000b66:	f000 fccb 	bl	8001500 <HAL_GPIO_Init>

}
 8000b6a:	bf00      	nop
 8000b6c:	3730      	adds	r7, #48	; 0x30
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	40020800 	.word	0x40020800
 8000b80:	40020c00 	.word	0x40020c00
 8000b84:	40020000 	.word	0x40020000
 8000b88:	40020400 	.word	0x40020400

08000b8c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback (TIM_HandleTypeDef * htim)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
static uint32_t buffer1, buffer2;
  if(htim == &htim2)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4a1c      	ldr	r2, [pc, #112]	; (8000c08 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d130      	bne.n	8000bfe <HAL_TIM_IC_CaptureCallback+0x72>
  {
	  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) buffer1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	7f1b      	ldrb	r3, [r3, #28]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d106      	bne.n	8000bb2 <HAL_TIM_IC_CaptureCallback+0x26>
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f004 fcfe 	bl	80055a8 <HAL_TIM_ReadCapturedValue>
 8000bac:	4603      	mov	r3, r0
 8000bae:	4a17      	ldr	r2, [pc, #92]	; (8000c0c <HAL_TIM_IC_CaptureCallback+0x80>)
 8000bb0:	6013      	str	r3, [r2, #0]
	  if(buffer1 != 0 )
 8000bb2:	4b16      	ldr	r3, [pc, #88]	; (8000c0c <HAL_TIM_IC_CaptureCallback+0x80>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d021      	beq.n	8000bfe <HAL_TIM_IC_CaptureCallback+0x72>
	  {
		  buffer2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000bba:	2104      	movs	r1, #4
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f004 fcf3 	bl	80055a8 <HAL_TIM_ReadCapturedValue>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	4a12      	ldr	r2, [pc, #72]	; (8000c10 <HAL_TIM_IC_CaptureCallback+0x84>)
 8000bc6:	6013      	str	r3, [r2, #0]
			  currentDutyCycle = GetDutyCycle(buffer2, buffer1);
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <HAL_TIM_IC_CaptureCallback+0x84>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a0f      	ldr	r2, [pc, #60]	; (8000c0c <HAL_TIM_IC_CaptureCallback+0x80>)
 8000bce:	6812      	ldr	r2, [r2, #0]
 8000bd0:	4611      	mov	r1, r2
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 f822 	bl	8000c1c <GetDutyCycle>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	461a      	mov	r2, r3
 8000bdc:	4b0d      	ldr	r3, [pc, #52]	; (8000c14 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000bde:	701a      	strb	r2, [r3, #0]
			  Frequency = GetFrequency(TIM2->CCR1, htim->Instance->PSC);
 8000be0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000be4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bec:	4619      	mov	r1, r3
 8000bee:	4610      	mov	r0, r2
 8000bf0:	f000 f828 	bl	8000c44 <GetFrequency>
 8000bf4:	eef0 7a40 	vmov.f32	s15, s0
 8000bf8:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000bfa:	edc3 7a00 	vstr	s15, [r3]
	  }


  }

}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200001e8 	.word	0x200001e8
 8000c0c:	20000238 	.word	0x20000238
 8000c10:	2000023c 	.word	0x2000023c
 8000c14:	20000230 	.word	0x20000230
 8000c18:	20000234 	.word	0x20000234

08000c1c <GetDutyCycle>:

uint8_t GetDutyCycle(uint32_t ONstate, uint32_t period) { return (100*ONstate)/period;}
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	6039      	str	r1, [r7, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2264      	movs	r2, #100	; 0x64
 8000c2a:	fb03 f202 	mul.w	r2, r3, r2
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	4618      	mov	r0, r3
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
	...

08000c44 <GetFrequency>:

  float GetFrequency(uint32_t TimerCounter, uint32_t TimerPrescaler){
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]

	 float freq = (TIM2_CLOCK/(TimerPrescaler + 1))/TimerCounter;
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	3301      	adds	r3, #1
 8000c52:	4a0b      	ldr	r2, [pc, #44]	; (8000c80 <GetFrequency+0x3c>)
 8000c54:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c5e:	ee07 3a90 	vmov	s15, r3
 8000c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c66:	edc7 7a03 	vstr	s15, [r7, #12]
	 return freq;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	ee07 3a90 	vmov	s15, r3
  }
 8000c70:	eeb0 0a67 	vmov.f32	s0, s15
 8000c74:	3714      	adds	r7, #20
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	01406f40 	.word	0x01406f40

08000c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c88:	b672      	cpsid	i
}
 8000c8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <Error_Handler+0x8>
	...

08000c90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <HAL_MspInit+0x4c>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9e:	4a0f      	ldr	r2, [pc, #60]	; (8000cdc <HAL_MspInit+0x4c>)
 8000ca0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca6:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <HAL_MspInit+0x4c>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	603b      	str	r3, [r7, #0]
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <HAL_MspInit+0x4c>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	4a08      	ldr	r2, [pc, #32]	; (8000cdc <HAL_MspInit+0x4c>)
 8000cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_MspInit+0x4c>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cca:	603b      	str	r3, [r7, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cce:	2007      	movs	r0, #7
 8000cd0:	f000 fbd4 	bl	800147c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40023800 	.word	0x40023800

08000ce0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a19      	ldr	r2, [pc, #100]	; (8000d64 <HAL_I2C_MspInit+0x84>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d12c      	bne.n	8000d5c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <HAL_I2C_MspInit+0x88>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a17      	ldr	r2, [pc, #92]	; (8000d68 <HAL_I2C_MspInit+0x88>)
 8000d0c:	f043 0302 	orr.w	r3, r3, #2
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <HAL_I2C_MspInit+0x88>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d1e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d24:	2312      	movs	r3, #18
 8000d26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d30:	2304      	movs	r3, #4
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	4619      	mov	r1, r3
 8000d3a:	480c      	ldr	r0, [pc, #48]	; (8000d6c <HAL_I2C_MspInit+0x8c>)
 8000d3c:	f000 fbe0 	bl	8001500 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d40:	2300      	movs	r3, #0
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <HAL_I2C_MspInit+0x88>)
 8000d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d48:	4a07      	ldr	r2, [pc, #28]	; (8000d68 <HAL_I2C_MspInit+0x88>)
 8000d4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <HAL_I2C_MspInit+0x88>)
 8000d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d5c:	bf00      	nop
 8000d5e:	3728      	adds	r7, #40	; 0x28
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40005400 	.word	0x40005400
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40020400 	.word	0x40020400

08000d70 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08e      	sub	sp, #56	; 0x38
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a31      	ldr	r2, [pc, #196]	; (8000e60 <HAL_I2S_MspInit+0xf0>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d15a      	bne.n	8000e56 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000da0:	2301      	movs	r3, #1
 8000da2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000da4:	23c0      	movs	r3, #192	; 0xc0
 8000da6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000da8:	2302      	movs	r3, #2
 8000daa:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4618      	mov	r0, r3
 8000db2:	f003 fbcd 	bl	8004550 <HAL_RCCEx_PeriphCLKConfig>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000dbc:	f7ff ff62 	bl	8000c84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	4b27      	ldr	r3, [pc, #156]	; (8000e64 <HAL_I2S_MspInit+0xf4>)
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc8:	4a26      	ldr	r2, [pc, #152]	; (8000e64 <HAL_I2S_MspInit+0xf4>)
 8000dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dce:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd0:	4b24      	ldr	r3, [pc, #144]	; (8000e64 <HAL_I2S_MspInit+0xf4>)
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	4b20      	ldr	r3, [pc, #128]	; (8000e64 <HAL_I2S_MspInit+0xf4>)
 8000de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de4:	4a1f      	ldr	r2, [pc, #124]	; (8000e64 <HAL_I2S_MspInit+0xf4>)
 8000de6:	f043 0301 	orr.w	r3, r3, #1
 8000dea:	6313      	str	r3, [r2, #48]	; 0x30
 8000dec:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <HAL_I2S_MspInit+0xf4>)
 8000dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df0:	f003 0301 	and.w	r3, r3, #1
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <HAL_I2S_MspInit+0xf4>)
 8000dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e00:	4a18      	ldr	r2, [pc, #96]	; (8000e64 <HAL_I2S_MspInit+0xf4>)
 8000e02:	f043 0304 	orr.w	r3, r3, #4
 8000e06:	6313      	str	r3, [r2, #48]	; 0x30
 8000e08:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <HAL_I2S_MspInit+0xf4>)
 8000e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0c:	f003 0304 	and.w	r3, r3, #4
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e14:	2310      	movs	r3, #16
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e24:	2306      	movs	r3, #6
 8000e26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	480e      	ldr	r0, [pc, #56]	; (8000e68 <HAL_I2S_MspInit+0xf8>)
 8000e30:	f000 fb66 	bl	8001500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e34:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e46:	2306      	movs	r3, #6
 8000e48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4806      	ldr	r0, [pc, #24]	; (8000e6c <HAL_I2S_MspInit+0xfc>)
 8000e52:	f000 fb55 	bl	8001500 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e56:	bf00      	nop
 8000e58:	3738      	adds	r7, #56	; 0x38
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40003c00 	.word	0x40003c00
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40020000 	.word	0x40020000
 8000e6c:	40020800 	.word	0x40020800

08000e70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	; 0x28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a19      	ldr	r2, [pc, #100]	; (8000ef4 <HAL_SPI_MspInit+0x84>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d12b      	bne.n	8000eea <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <HAL_SPI_MspInit+0x88>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	4a17      	ldr	r2, [pc, #92]	; (8000ef8 <HAL_SPI_MspInit+0x88>)
 8000e9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <HAL_SPI_MspInit+0x88>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <HAL_SPI_MspInit+0x88>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a10      	ldr	r2, [pc, #64]	; (8000ef8 <HAL_SPI_MspInit+0x88>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <HAL_SPI_MspInit+0x88>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000eca:	23e0      	movs	r3, #224	; 0xe0
 8000ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eda:	2305      	movs	r3, #5
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <HAL_SPI_MspInit+0x8c>)
 8000ee6:	f000 fb0b 	bl	8001500 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000eea:	bf00      	nop
 8000eec:	3728      	adds	r7, #40	; 0x28
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40013000 	.word	0x40013000
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020000 	.word	0x40020000

08000f00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	; 0x28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a27      	ldr	r2, [pc, #156]	; (8000fbc <HAL_TIM_Base_MspInit+0xbc>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d10e      	bne.n	8000f40 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	4b26      	ldr	r3, [pc, #152]	; (8000fc0 <HAL_TIM_Base_MspInit+0xc0>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	4a25      	ldr	r2, [pc, #148]	; (8000fc0 <HAL_TIM_Base_MspInit+0xc0>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6453      	str	r3, [r2, #68]	; 0x44
 8000f32:	4b23      	ldr	r3, [pc, #140]	; (8000fc0 <HAL_TIM_Base_MspInit+0xc0>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f3e:	e039      	b.n	8000fb4 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM2)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f48:	d134      	bne.n	8000fb4 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <HAL_TIM_Base_MspInit+0xc0>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	4a1b      	ldr	r2, [pc, #108]	; (8000fc0 <HAL_TIM_Base_MspInit+0xc0>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5a:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <HAL_TIM_Base_MspInit+0xc0>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <HAL_TIM_Base_MspInit+0xc0>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a14      	ldr	r2, [pc, #80]	; (8000fc0 <HAL_TIM_Base_MspInit+0xc0>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <HAL_TIM_Base_MspInit+0xc0>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f94:	2301      	movs	r3, #1
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4809      	ldr	r0, [pc, #36]	; (8000fc4 <HAL_TIM_Base_MspInit+0xc4>)
 8000fa0:	f000 faae 	bl	8001500 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	201c      	movs	r0, #28
 8000faa:	f000 fa72 	bl	8001492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fae:	201c      	movs	r0, #28
 8000fb0:	f000 fa8b 	bl	80014ca <HAL_NVIC_EnableIRQ>
}
 8000fb4:	bf00      	nop
 8000fb6:	3728      	adds	r7, #40	; 0x28
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40010000 	.word	0x40010000
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40020000 	.word	0x40020000

08000fc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 030c 	add.w	r3, r7, #12
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a12      	ldr	r2, [pc, #72]	; (8001030 <HAL_TIM_MspPostInit+0x68>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d11e      	bne.n	8001028 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <HAL_TIM_MspPostInit+0x6c>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a10      	ldr	r2, [pc, #64]	; (8001034 <HAL_TIM_MspPostInit+0x6c>)
 8000ff4:	f043 0310 	orr.w	r3, r3, #16
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <HAL_TIM_MspPostInit+0x6c>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0310 	and.w	r3, r3, #16
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001006:	f44f 7300 	mov.w	r3, #512	; 0x200
 800100a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	2302      	movs	r3, #2
 800100e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001018:	2301      	movs	r3, #1
 800101a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800101c:	f107 030c 	add.w	r3, r7, #12
 8001020:	4619      	mov	r1, r3
 8001022:	4805      	ldr	r0, [pc, #20]	; (8001038 <HAL_TIM_MspPostInit+0x70>)
 8001024:	f000 fa6c 	bl	8001500 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001028:	bf00      	nop
 800102a:	3720      	adds	r7, #32
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40010000 	.word	0x40010000
 8001034:	40023800 	.word	0x40023800
 8001038:	40021000 	.word	0x40021000

0800103c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001040:	e7fe      	b.n	8001040 <NMI_Handler+0x4>
	...

08001044 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8001048:	2201      	movs	r2, #1
 800104a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800104e:	4802      	ldr	r0, [pc, #8]	; (8001058 <HardFault_Handler+0x14>)
 8001050:	f000 fbf2 	bl	8001838 <HAL_GPIO_WritePin>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <HardFault_Handler+0x10>
 8001056:	bf00      	nop
 8001058:	40020c00 	.word	0x40020c00

0800105c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <MemManage_Handler+0x4>

08001062 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <BusFault_Handler+0x4>

08001068 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800106c:	e7fe      	b.n	800106c <UsageFault_Handler+0x4>

0800106e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109c:	f000 f8da 	bl	8001254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <TIM2_IRQHandler+0x10>)
 80010aa:	f003 ff0d 	bl	8004ec8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200001e8 	.word	0x200001e8

080010b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80010bc:	4802      	ldr	r0, [pc, #8]	; (80010c8 <OTG_FS_IRQHandler+0x10>)
 80010be:	f000 fe3f 	bl	8001d40 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000624 	.word	0x20000624

080010cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d4:	4a14      	ldr	r2, [pc, #80]	; (8001128 <_sbrk+0x5c>)
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <_sbrk+0x60>)
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e0:	4b13      	ldr	r3, [pc, #76]	; (8001130 <_sbrk+0x64>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d102      	bne.n	80010ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <_sbrk+0x64>)
 80010ea:	4a12      	ldr	r2, [pc, #72]	; (8001134 <_sbrk+0x68>)
 80010ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <_sbrk+0x64>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d207      	bcs.n	800110c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010fc:	f008 fb4a 	bl	8009794 <__errno>
 8001100:	4603      	mov	r3, r0
 8001102:	220c      	movs	r2, #12
 8001104:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001106:	f04f 33ff 	mov.w	r3, #4294967295
 800110a:	e009      	b.n	8001120 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800110c:	4b08      	ldr	r3, [pc, #32]	; (8001130 <_sbrk+0x64>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001112:	4b07      	ldr	r3, [pc, #28]	; (8001130 <_sbrk+0x64>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	4a05      	ldr	r2, [pc, #20]	; (8001130 <_sbrk+0x64>)
 800111c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800111e:	68fb      	ldr	r3, [r7, #12]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20020000 	.word	0x20020000
 800112c:	00000400 	.word	0x00000400
 8001130:	20000240 	.word	0x20000240
 8001134:	20000938 	.word	0x20000938

08001138 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <SystemInit+0x20>)
 800113e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001142:	4a05      	ldr	r2, [pc, #20]	; (8001158 <SystemInit+0x20>)
 8001144:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001148:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800115c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001194 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001160:	480d      	ldr	r0, [pc, #52]	; (8001198 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001162:	490e      	ldr	r1, [pc, #56]	; (800119c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001164:	4a0e      	ldr	r2, [pc, #56]	; (80011a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001168:	e002      	b.n	8001170 <LoopCopyDataInit>

0800116a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800116a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800116c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116e:	3304      	adds	r3, #4

08001170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001174:	d3f9      	bcc.n	800116a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001176:	4a0b      	ldr	r2, [pc, #44]	; (80011a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001178:	4c0b      	ldr	r4, [pc, #44]	; (80011a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800117c:	e001      	b.n	8001182 <LoopFillZerobss>

0800117e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001180:	3204      	adds	r2, #4

08001182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001184:	d3fb      	bcc.n	800117e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001186:	f7ff ffd7 	bl	8001138 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800118a:	f008 fb09 	bl	80097a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800118e:	f7ff f99d 	bl	80004cc <main>
  bx  lr    
 8001192:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001194:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800119c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80011a0:	08009a58 	.word	0x08009a58
  ldr r2, =_sbss
 80011a4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80011a8:	20000938 	.word	0x20000938

080011ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011ac:	e7fe      	b.n	80011ac <ADC_IRQHandler>
	...

080011b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011b4:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <HAL_Init+0x40>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a0d      	ldr	r2, [pc, #52]	; (80011f0 <HAL_Init+0x40>)
 80011ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <HAL_Init+0x40>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <HAL_Init+0x40>)
 80011c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <HAL_Init+0x40>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a07      	ldr	r2, [pc, #28]	; (80011f0 <HAL_Init+0x40>)
 80011d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d8:	2003      	movs	r0, #3
 80011da:	f000 f94f 	bl	800147c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011de:	2000      	movs	r0, #0
 80011e0:	f000 f808 	bl	80011f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e4:	f7ff fd54 	bl	8000c90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40023c00 	.word	0x40023c00

080011f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <HAL_InitTick+0x54>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4b12      	ldr	r3, [pc, #72]	; (800124c <HAL_InitTick+0x58>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	4619      	mov	r1, r3
 8001206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120a:	fbb3 f3f1 	udiv	r3, r3, r1
 800120e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001212:	4618      	mov	r0, r3
 8001214:	f000 f967 	bl	80014e6 <HAL_SYSTICK_Config>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e00e      	b.n	8001240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2b0f      	cmp	r3, #15
 8001226:	d80a      	bhi.n	800123e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001228:	2200      	movs	r2, #0
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	f04f 30ff 	mov.w	r0, #4294967295
 8001230:	f000 f92f 	bl	8001492 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001234:	4a06      	ldr	r2, [pc, #24]	; (8001250 <HAL_InitTick+0x5c>)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800123a:	2300      	movs	r3, #0
 800123c:	e000      	b.n	8001240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
}
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000000 	.word	0x20000000
 800124c:	20000008 	.word	0x20000008
 8001250:	20000004 	.word	0x20000004

08001254 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_IncTick+0x20>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <HAL_IncTick+0x24>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4413      	add	r3, r2
 8001264:	4a04      	ldr	r2, [pc, #16]	; (8001278 <HAL_IncTick+0x24>)
 8001266:	6013      	str	r3, [r2, #0]
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20000008 	.word	0x20000008
 8001278:	20000244 	.word	0x20000244

0800127c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return uwTick;
 8001280:	4b03      	ldr	r3, [pc, #12]	; (8001290 <HAL_GetTick+0x14>)
 8001282:	681b      	ldr	r3, [r3, #0]
}
 8001284:	4618      	mov	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000244 	.word	0x20000244

08001294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800129c:	f7ff ffee 	bl	800127c <HAL_GetTick>
 80012a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ac:	d005      	beq.n	80012ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ae:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <HAL_Delay+0x44>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	461a      	mov	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4413      	add	r3, r2
 80012b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012ba:	bf00      	nop
 80012bc:	f7ff ffde 	bl	800127c <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d8f7      	bhi.n	80012bc <HAL_Delay+0x28>
  {
  }
}
 80012cc:	bf00      	nop
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000008 	.word	0x20000008

080012dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <__NVIC_SetPriorityGrouping+0x44>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f2:	68ba      	ldr	r2, [r7, #8]
 80012f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f8:	4013      	ands	r3, r2
 80012fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001304:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800130c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130e:	4a04      	ldr	r2, [pc, #16]	; (8001320 <__NVIC_SetPriorityGrouping+0x44>)
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	60d3      	str	r3, [r2, #12]
}
 8001314:	bf00      	nop
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <__NVIC_GetPriorityGrouping+0x18>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	f003 0307 	and.w	r3, r3, #7
}
 8001332:	4618      	mov	r0, r3
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	2b00      	cmp	r3, #0
 8001350:	db0b      	blt.n	800136a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	f003 021f 	and.w	r2, r3, #31
 8001358:	4907      	ldr	r1, [pc, #28]	; (8001378 <__NVIC_EnableIRQ+0x38>)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	095b      	lsrs	r3, r3, #5
 8001360:	2001      	movs	r0, #1
 8001362:	fa00 f202 	lsl.w	r2, r0, r2
 8001366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	e000e100 	.word	0xe000e100

0800137c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	6039      	str	r1, [r7, #0]
 8001386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138c:	2b00      	cmp	r3, #0
 800138e:	db0a      	blt.n	80013a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	b2da      	uxtb	r2, r3
 8001394:	490c      	ldr	r1, [pc, #48]	; (80013c8 <__NVIC_SetPriority+0x4c>)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	0112      	lsls	r2, r2, #4
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	440b      	add	r3, r1
 80013a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a4:	e00a      	b.n	80013bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4908      	ldr	r1, [pc, #32]	; (80013cc <__NVIC_SetPriority+0x50>)
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	f003 030f 	and.w	r3, r3, #15
 80013b2:	3b04      	subs	r3, #4
 80013b4:	0112      	lsls	r2, r2, #4
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	440b      	add	r3, r1
 80013ba:	761a      	strb	r2, [r3, #24]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000e100 	.word	0xe000e100
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b089      	sub	sp, #36	; 0x24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f1c3 0307 	rsb	r3, r3, #7
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	bf28      	it	cs
 80013ee:	2304      	movcs	r3, #4
 80013f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3304      	adds	r3, #4
 80013f6:	2b06      	cmp	r3, #6
 80013f8:	d902      	bls.n	8001400 <NVIC_EncodePriority+0x30>
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3b03      	subs	r3, #3
 80013fe:	e000      	b.n	8001402 <NVIC_EncodePriority+0x32>
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001404:	f04f 32ff 	mov.w	r2, #4294967295
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43da      	mvns	r2, r3
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	401a      	ands	r2, r3
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001418:	f04f 31ff 	mov.w	r1, #4294967295
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	fa01 f303 	lsl.w	r3, r1, r3
 8001422:	43d9      	mvns	r1, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	4313      	orrs	r3, r2
         );
}
 800142a:	4618      	mov	r0, r3
 800142c:	3724      	adds	r7, #36	; 0x24
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3b01      	subs	r3, #1
 8001444:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001448:	d301      	bcc.n	800144e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800144a:	2301      	movs	r3, #1
 800144c:	e00f      	b.n	800146e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800144e:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <SysTick_Config+0x40>)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3b01      	subs	r3, #1
 8001454:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001456:	210f      	movs	r1, #15
 8001458:	f04f 30ff 	mov.w	r0, #4294967295
 800145c:	f7ff ff8e 	bl	800137c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001460:	4b05      	ldr	r3, [pc, #20]	; (8001478 <SysTick_Config+0x40>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001466:	4b04      	ldr	r3, [pc, #16]	; (8001478 <SysTick_Config+0x40>)
 8001468:	2207      	movs	r2, #7
 800146a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	e000e010 	.word	0xe000e010

0800147c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff ff29 	bl	80012dc <__NVIC_SetPriorityGrouping>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001492:	b580      	push	{r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af00      	add	r7, sp, #0
 8001498:	4603      	mov	r3, r0
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
 800149e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014a4:	f7ff ff3e 	bl	8001324 <__NVIC_GetPriorityGrouping>
 80014a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	68b9      	ldr	r1, [r7, #8]
 80014ae:	6978      	ldr	r0, [r7, #20]
 80014b0:	f7ff ff8e 	bl	80013d0 <NVIC_EncodePriority>
 80014b4:	4602      	mov	r2, r0
 80014b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ba:	4611      	mov	r1, r2
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff5d 	bl	800137c <__NVIC_SetPriority>
}
 80014c2:	bf00      	nop
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	4603      	mov	r3, r0
 80014d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ff31 	bl	8001340 <__NVIC_EnableIRQ>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff ffa2 	bl	8001438 <SysTick_Config>
 80014f4:	4603      	mov	r3, r0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001500:	b480      	push	{r7}
 8001502:	b089      	sub	sp, #36	; 0x24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001512:	2300      	movs	r3, #0
 8001514:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
 800151a:	e16b      	b.n	80017f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800151c:	2201      	movs	r2, #1
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	4013      	ands	r3, r2
 800152e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	429a      	cmp	r2, r3
 8001536:	f040 815a 	bne.w	80017ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	2b01      	cmp	r3, #1
 8001544:	d005      	beq.n	8001552 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800154e:	2b02      	cmp	r3, #2
 8001550:	d130      	bne.n	80015b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	2203      	movs	r2, #3
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43db      	mvns	r3, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4013      	ands	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	68da      	ldr	r2, [r3, #12]
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001588:	2201      	movs	r2, #1
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4013      	ands	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	091b      	lsrs	r3, r3, #4
 800159e:	f003 0201 	and.w	r2, r3, #1
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	2b03      	cmp	r3, #3
 80015be:	d017      	beq.n	80015f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	2203      	movs	r2, #3
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4013      	ands	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 0303 	and.w	r3, r3, #3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d123      	bne.n	8001644 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	08da      	lsrs	r2, r3, #3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3208      	adds	r2, #8
 8001604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001608:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	f003 0307 	and.w	r3, r3, #7
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	220f      	movs	r2, #15
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	691a      	ldr	r2, [r3, #16]
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4313      	orrs	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	08da      	lsrs	r2, r3, #3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	3208      	adds	r2, #8
 800163e:	69b9      	ldr	r1, [r7, #24]
 8001640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	2203      	movs	r2, #3
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4013      	ands	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0203 	and.w	r2, r3, #3
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 80b4 	beq.w	80017ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	4b60      	ldr	r3, [pc, #384]	; (800180c <HAL_GPIO_Init+0x30c>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	4a5f      	ldr	r2, [pc, #380]	; (800180c <HAL_GPIO_Init+0x30c>)
 8001690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001694:	6453      	str	r3, [r2, #68]	; 0x44
 8001696:	4b5d      	ldr	r3, [pc, #372]	; (800180c <HAL_GPIO_Init+0x30c>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016a2:	4a5b      	ldr	r2, [pc, #364]	; (8001810 <HAL_GPIO_Init+0x310>)
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	089b      	lsrs	r3, r3, #2
 80016a8:	3302      	adds	r3, #2
 80016aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	220f      	movs	r2, #15
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43db      	mvns	r3, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4013      	ands	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a52      	ldr	r2, [pc, #328]	; (8001814 <HAL_GPIO_Init+0x314>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d02b      	beq.n	8001726 <HAL_GPIO_Init+0x226>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a51      	ldr	r2, [pc, #324]	; (8001818 <HAL_GPIO_Init+0x318>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d025      	beq.n	8001722 <HAL_GPIO_Init+0x222>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a50      	ldr	r2, [pc, #320]	; (800181c <HAL_GPIO_Init+0x31c>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d01f      	beq.n	800171e <HAL_GPIO_Init+0x21e>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a4f      	ldr	r2, [pc, #316]	; (8001820 <HAL_GPIO_Init+0x320>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d019      	beq.n	800171a <HAL_GPIO_Init+0x21a>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a4e      	ldr	r2, [pc, #312]	; (8001824 <HAL_GPIO_Init+0x324>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d013      	beq.n	8001716 <HAL_GPIO_Init+0x216>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a4d      	ldr	r2, [pc, #308]	; (8001828 <HAL_GPIO_Init+0x328>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d00d      	beq.n	8001712 <HAL_GPIO_Init+0x212>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a4c      	ldr	r2, [pc, #304]	; (800182c <HAL_GPIO_Init+0x32c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d007      	beq.n	800170e <HAL_GPIO_Init+0x20e>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a4b      	ldr	r2, [pc, #300]	; (8001830 <HAL_GPIO_Init+0x330>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d101      	bne.n	800170a <HAL_GPIO_Init+0x20a>
 8001706:	2307      	movs	r3, #7
 8001708:	e00e      	b.n	8001728 <HAL_GPIO_Init+0x228>
 800170a:	2308      	movs	r3, #8
 800170c:	e00c      	b.n	8001728 <HAL_GPIO_Init+0x228>
 800170e:	2306      	movs	r3, #6
 8001710:	e00a      	b.n	8001728 <HAL_GPIO_Init+0x228>
 8001712:	2305      	movs	r3, #5
 8001714:	e008      	b.n	8001728 <HAL_GPIO_Init+0x228>
 8001716:	2304      	movs	r3, #4
 8001718:	e006      	b.n	8001728 <HAL_GPIO_Init+0x228>
 800171a:	2303      	movs	r3, #3
 800171c:	e004      	b.n	8001728 <HAL_GPIO_Init+0x228>
 800171e:	2302      	movs	r3, #2
 8001720:	e002      	b.n	8001728 <HAL_GPIO_Init+0x228>
 8001722:	2301      	movs	r3, #1
 8001724:	e000      	b.n	8001728 <HAL_GPIO_Init+0x228>
 8001726:	2300      	movs	r3, #0
 8001728:	69fa      	ldr	r2, [r7, #28]
 800172a:	f002 0203 	and.w	r2, r2, #3
 800172e:	0092      	lsls	r2, r2, #2
 8001730:	4093      	lsls	r3, r2
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	4313      	orrs	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001738:	4935      	ldr	r1, [pc, #212]	; (8001810 <HAL_GPIO_Init+0x310>)
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	089b      	lsrs	r3, r3, #2
 800173e:	3302      	adds	r3, #2
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001746:	4b3b      	ldr	r3, [pc, #236]	; (8001834 <HAL_GPIO_Init+0x334>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	43db      	mvns	r3, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4013      	ands	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	4313      	orrs	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800176a:	4a32      	ldr	r2, [pc, #200]	; (8001834 <HAL_GPIO_Init+0x334>)
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001770:	4b30      	ldr	r3, [pc, #192]	; (8001834 <HAL_GPIO_Init+0x334>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d003      	beq.n	8001794 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	4313      	orrs	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001794:	4a27      	ldr	r2, [pc, #156]	; (8001834 <HAL_GPIO_Init+0x334>)
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800179a:	4b26      	ldr	r3, [pc, #152]	; (8001834 <HAL_GPIO_Init+0x334>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	43db      	mvns	r3, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4013      	ands	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017be:	4a1d      	ldr	r2, [pc, #116]	; (8001834 <HAL_GPIO_Init+0x334>)
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017c4:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <HAL_GPIO_Init+0x334>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	43db      	mvns	r3, r3
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4013      	ands	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d003      	beq.n	80017e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017e8:	4a12      	ldr	r2, [pc, #72]	; (8001834 <HAL_GPIO_Init+0x334>)
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3301      	adds	r3, #1
 80017f2:	61fb      	str	r3, [r7, #28]
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	2b0f      	cmp	r3, #15
 80017f8:	f67f ae90 	bls.w	800151c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017fc:	bf00      	nop
 80017fe:	bf00      	nop
 8001800:	3724      	adds	r7, #36	; 0x24
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	40023800 	.word	0x40023800
 8001810:	40013800 	.word	0x40013800
 8001814:	40020000 	.word	0x40020000
 8001818:	40020400 	.word	0x40020400
 800181c:	40020800 	.word	0x40020800
 8001820:	40020c00 	.word	0x40020c00
 8001824:	40021000 	.word	0x40021000
 8001828:	40021400 	.word	0x40021400
 800182c:	40021800 	.word	0x40021800
 8001830:	40021c00 	.word	0x40021c00
 8001834:	40013c00 	.word	0x40013c00

08001838 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	807b      	strh	r3, [r7, #2]
 8001844:	4613      	mov	r3, r2
 8001846:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001848:	787b      	ldrb	r3, [r7, #1]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800184e:	887a      	ldrh	r2, [r7, #2]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001854:	e003      	b.n	800185e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001856:	887b      	ldrh	r3, [r7, #2]
 8001858:	041a      	lsls	r2, r3, #16
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	619a      	str	r2, [r3, #24]
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800186a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800186c:	b08f      	sub	sp, #60	; 0x3c
 800186e:	af0a      	add	r7, sp, #40	; 0x28
 8001870:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e054      	b.n	8001926 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d106      	bne.n	800189c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f007 fcd2 	bl	8009240 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2203      	movs	r2, #3
 80018a0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d102      	bne.n	80018b6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f004 fd00 	bl	80062c0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	603b      	str	r3, [r7, #0]
 80018c6:	687e      	ldr	r6, [r7, #4]
 80018c8:	466d      	mov	r5, sp
 80018ca:	f106 0410 	add.w	r4, r6, #16
 80018ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018da:	e885 0003 	stmia.w	r5, {r0, r1}
 80018de:	1d33      	adds	r3, r6, #4
 80018e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018e2:	6838      	ldr	r0, [r7, #0]
 80018e4:	f004 fc7a 	bl	80061dc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2101      	movs	r1, #1
 80018ee:	4618      	mov	r0, r3
 80018f0:	f004 fcf7 	bl	80062e2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	603b      	str	r3, [r7, #0]
 80018fa:	687e      	ldr	r6, [r7, #4]
 80018fc:	466d      	mov	r5, sp
 80018fe:	f106 0410 	add.w	r4, r6, #16
 8001902:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001904:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001906:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001908:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800190a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800190e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001912:	1d33      	adds	r3, r6, #4
 8001914:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001916:	6838      	ldr	r0, [r7, #0]
 8001918:	f004 fe80 	bl	800661c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800192e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800192e:	b590      	push	{r4, r7, lr}
 8001930:	b089      	sub	sp, #36	; 0x24
 8001932:	af04      	add	r7, sp, #16
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	4608      	mov	r0, r1
 8001938:	4611      	mov	r1, r2
 800193a:	461a      	mov	r2, r3
 800193c:	4603      	mov	r3, r0
 800193e:	70fb      	strb	r3, [r7, #3]
 8001940:	460b      	mov	r3, r1
 8001942:	70bb      	strb	r3, [r7, #2]
 8001944:	4613      	mov	r3, r2
 8001946:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800194e:	2b01      	cmp	r3, #1
 8001950:	d101      	bne.n	8001956 <HAL_HCD_HC_Init+0x28>
 8001952:	2302      	movs	r3, #2
 8001954:	e076      	b.n	8001a44 <HAL_HCD_HC_Init+0x116>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800195e:	78fb      	ldrb	r3, [r7, #3]
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	212c      	movs	r1, #44	; 0x2c
 8001964:	fb01 f303 	mul.w	r3, r1, r3
 8001968:	4413      	add	r3, r2
 800196a:	333d      	adds	r3, #61	; 0x3d
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001970:	78fb      	ldrb	r3, [r7, #3]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	212c      	movs	r1, #44	; 0x2c
 8001976:	fb01 f303 	mul.w	r3, r1, r3
 800197a:	4413      	add	r3, r2
 800197c:	3338      	adds	r3, #56	; 0x38
 800197e:	787a      	ldrb	r2, [r7, #1]
 8001980:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001982:	78fb      	ldrb	r3, [r7, #3]
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	212c      	movs	r1, #44	; 0x2c
 8001988:	fb01 f303 	mul.w	r3, r1, r3
 800198c:	4413      	add	r3, r2
 800198e:	3340      	adds	r3, #64	; 0x40
 8001990:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001992:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001994:	78fb      	ldrb	r3, [r7, #3]
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	212c      	movs	r1, #44	; 0x2c
 800199a:	fb01 f303 	mul.w	r3, r1, r3
 800199e:	4413      	add	r3, r2
 80019a0:	3339      	adds	r3, #57	; 0x39
 80019a2:	78fa      	ldrb	r2, [r7, #3]
 80019a4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80019a6:	78fb      	ldrb	r3, [r7, #3]
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	212c      	movs	r1, #44	; 0x2c
 80019ac:	fb01 f303 	mul.w	r3, r1, r3
 80019b0:	4413      	add	r3, r2
 80019b2:	333f      	adds	r3, #63	; 0x3f
 80019b4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80019b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80019ba:	78fb      	ldrb	r3, [r7, #3]
 80019bc:	78ba      	ldrb	r2, [r7, #2]
 80019be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019c2:	b2d0      	uxtb	r0, r2
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	212c      	movs	r1, #44	; 0x2c
 80019c8:	fb01 f303 	mul.w	r3, r1, r3
 80019cc:	4413      	add	r3, r2
 80019ce:	333a      	adds	r3, #58	; 0x3a
 80019d0:	4602      	mov	r2, r0
 80019d2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80019d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	da09      	bge.n	80019f0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80019dc:	78fb      	ldrb	r3, [r7, #3]
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	212c      	movs	r1, #44	; 0x2c
 80019e2:	fb01 f303 	mul.w	r3, r1, r3
 80019e6:	4413      	add	r3, r2
 80019e8:	333b      	adds	r3, #59	; 0x3b
 80019ea:	2201      	movs	r2, #1
 80019ec:	701a      	strb	r2, [r3, #0]
 80019ee:	e008      	b.n	8001a02 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80019f0:	78fb      	ldrb	r3, [r7, #3]
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	212c      	movs	r1, #44	; 0x2c
 80019f6:	fb01 f303 	mul.w	r3, r1, r3
 80019fa:	4413      	add	r3, r2
 80019fc:	333b      	adds	r3, #59	; 0x3b
 80019fe:	2200      	movs	r2, #0
 8001a00:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001a02:	78fb      	ldrb	r3, [r7, #3]
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	212c      	movs	r1, #44	; 0x2c
 8001a08:	fb01 f303 	mul.w	r3, r1, r3
 8001a0c:	4413      	add	r3, r2
 8001a0e:	333c      	adds	r3, #60	; 0x3c
 8001a10:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a14:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	787c      	ldrb	r4, [r7, #1]
 8001a1c:	78ba      	ldrb	r2, [r7, #2]
 8001a1e:	78f9      	ldrb	r1, [r7, #3]
 8001a20:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a22:	9302      	str	r3, [sp, #8]
 8001a24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a28:	9301      	str	r3, [sp, #4]
 8001a2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	4623      	mov	r3, r4
 8001a32:	f004 ff79 	bl	8006928 <USB_HC_Init>
 8001a36:	4603      	mov	r3, r0
 8001a38:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd90      	pop	{r4, r7, pc}

08001a4c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d101      	bne.n	8001a6a <HAL_HCD_HC_Halt+0x1e>
 8001a66:	2302      	movs	r3, #2
 8001a68:	e00f      	b.n	8001a8a <HAL_HCD_HC_Halt+0x3e>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	78fa      	ldrb	r2, [r7, #3]
 8001a78:	4611      	mov	r1, r2
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f005 f9c9 	bl	8006e12 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
	...

08001a94 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	4608      	mov	r0, r1
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	70fb      	strb	r3, [r7, #3]
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	70bb      	strb	r3, [r7, #2]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001aae:	78fb      	ldrb	r3, [r7, #3]
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	212c      	movs	r1, #44	; 0x2c
 8001ab4:	fb01 f303 	mul.w	r3, r1, r3
 8001ab8:	4413      	add	r3, r2
 8001aba:	333b      	adds	r3, #59	; 0x3b
 8001abc:	78ba      	ldrb	r2, [r7, #2]
 8001abe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001ac0:	78fb      	ldrb	r3, [r7, #3]
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	212c      	movs	r1, #44	; 0x2c
 8001ac6:	fb01 f303 	mul.w	r3, r1, r3
 8001aca:	4413      	add	r3, r2
 8001acc:	333f      	adds	r3, #63	; 0x3f
 8001ace:	787a      	ldrb	r2, [r7, #1]
 8001ad0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001ad2:	7c3b      	ldrb	r3, [r7, #16]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d112      	bne.n	8001afe <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001ad8:	78fb      	ldrb	r3, [r7, #3]
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	212c      	movs	r1, #44	; 0x2c
 8001ade:	fb01 f303 	mul.w	r3, r1, r3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	3342      	adds	r3, #66	; 0x42
 8001ae6:	2203      	movs	r2, #3
 8001ae8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001aea:	78fb      	ldrb	r3, [r7, #3]
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	212c      	movs	r1, #44	; 0x2c
 8001af0:	fb01 f303 	mul.w	r3, r1, r3
 8001af4:	4413      	add	r3, r2
 8001af6:	333d      	adds	r3, #61	; 0x3d
 8001af8:	7f3a      	ldrb	r2, [r7, #28]
 8001afa:	701a      	strb	r2, [r3, #0]
 8001afc:	e008      	b.n	8001b10 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001afe:	78fb      	ldrb	r3, [r7, #3]
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	212c      	movs	r1, #44	; 0x2c
 8001b04:	fb01 f303 	mul.w	r3, r1, r3
 8001b08:	4413      	add	r3, r2
 8001b0a:	3342      	adds	r3, #66	; 0x42
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001b10:	787b      	ldrb	r3, [r7, #1]
 8001b12:	2b03      	cmp	r3, #3
 8001b14:	f200 80c6 	bhi.w	8001ca4 <HAL_HCD_HC_SubmitRequest+0x210>
 8001b18:	a201      	add	r2, pc, #4	; (adr r2, 8001b20 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b1e:	bf00      	nop
 8001b20:	08001b31 	.word	0x08001b31
 8001b24:	08001c91 	.word	0x08001c91
 8001b28:	08001b95 	.word	0x08001b95
 8001b2c:	08001c13 	.word	0x08001c13
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001b30:	7c3b      	ldrb	r3, [r7, #16]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	f040 80b8 	bne.w	8001ca8 <HAL_HCD_HC_SubmitRequest+0x214>
 8001b38:	78bb      	ldrb	r3, [r7, #2]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f040 80b4 	bne.w	8001ca8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001b40:	8b3b      	ldrh	r3, [r7, #24]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d108      	bne.n	8001b58 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001b46:	78fb      	ldrb	r3, [r7, #3]
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	212c      	movs	r1, #44	; 0x2c
 8001b4c:	fb01 f303 	mul.w	r3, r1, r3
 8001b50:	4413      	add	r3, r2
 8001b52:	3355      	adds	r3, #85	; 0x55
 8001b54:	2201      	movs	r2, #1
 8001b56:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b58:	78fb      	ldrb	r3, [r7, #3]
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	212c      	movs	r1, #44	; 0x2c
 8001b5e:	fb01 f303 	mul.w	r3, r1, r3
 8001b62:	4413      	add	r3, r2
 8001b64:	3355      	adds	r3, #85	; 0x55
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d109      	bne.n	8001b80 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b6c:	78fb      	ldrb	r3, [r7, #3]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	212c      	movs	r1, #44	; 0x2c
 8001b72:	fb01 f303 	mul.w	r3, r1, r3
 8001b76:	4413      	add	r3, r2
 8001b78:	3342      	adds	r3, #66	; 0x42
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b7e:	e093      	b.n	8001ca8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b80:	78fb      	ldrb	r3, [r7, #3]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	212c      	movs	r1, #44	; 0x2c
 8001b86:	fb01 f303 	mul.w	r3, r1, r3
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3342      	adds	r3, #66	; 0x42
 8001b8e:	2202      	movs	r2, #2
 8001b90:	701a      	strb	r2, [r3, #0]
      break;
 8001b92:	e089      	b.n	8001ca8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001b94:	78bb      	ldrb	r3, [r7, #2]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d11d      	bne.n	8001bd6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b9a:	78fb      	ldrb	r3, [r7, #3]
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	212c      	movs	r1, #44	; 0x2c
 8001ba0:	fb01 f303 	mul.w	r3, r1, r3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3355      	adds	r3, #85	; 0x55
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d109      	bne.n	8001bc2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bae:	78fb      	ldrb	r3, [r7, #3]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	212c      	movs	r1, #44	; 0x2c
 8001bb4:	fb01 f303 	mul.w	r3, r1, r3
 8001bb8:	4413      	add	r3, r2
 8001bba:	3342      	adds	r3, #66	; 0x42
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001bc0:	e073      	b.n	8001caa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bc2:	78fb      	ldrb	r3, [r7, #3]
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	212c      	movs	r1, #44	; 0x2c
 8001bc8:	fb01 f303 	mul.w	r3, r1, r3
 8001bcc:	4413      	add	r3, r2
 8001bce:	3342      	adds	r3, #66	; 0x42
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	701a      	strb	r2, [r3, #0]
      break;
 8001bd4:	e069      	b.n	8001caa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001bd6:	78fb      	ldrb	r3, [r7, #3]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	212c      	movs	r1, #44	; 0x2c
 8001bdc:	fb01 f303 	mul.w	r3, r1, r3
 8001be0:	4413      	add	r3, r2
 8001be2:	3354      	adds	r3, #84	; 0x54
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d109      	bne.n	8001bfe <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bea:	78fb      	ldrb	r3, [r7, #3]
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	212c      	movs	r1, #44	; 0x2c
 8001bf0:	fb01 f303 	mul.w	r3, r1, r3
 8001bf4:	4413      	add	r3, r2
 8001bf6:	3342      	adds	r3, #66	; 0x42
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]
      break;
 8001bfc:	e055      	b.n	8001caa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bfe:	78fb      	ldrb	r3, [r7, #3]
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	212c      	movs	r1, #44	; 0x2c
 8001c04:	fb01 f303 	mul.w	r3, r1, r3
 8001c08:	4413      	add	r3, r2
 8001c0a:	3342      	adds	r3, #66	; 0x42
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	701a      	strb	r2, [r3, #0]
      break;
 8001c10:	e04b      	b.n	8001caa <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001c12:	78bb      	ldrb	r3, [r7, #2]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d11d      	bne.n	8001c54 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c18:	78fb      	ldrb	r3, [r7, #3]
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	212c      	movs	r1, #44	; 0x2c
 8001c1e:	fb01 f303 	mul.w	r3, r1, r3
 8001c22:	4413      	add	r3, r2
 8001c24:	3355      	adds	r3, #85	; 0x55
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d109      	bne.n	8001c40 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c2c:	78fb      	ldrb	r3, [r7, #3]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	212c      	movs	r1, #44	; 0x2c
 8001c32:	fb01 f303 	mul.w	r3, r1, r3
 8001c36:	4413      	add	r3, r2
 8001c38:	3342      	adds	r3, #66	; 0x42
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c3e:	e034      	b.n	8001caa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c40:	78fb      	ldrb	r3, [r7, #3]
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	212c      	movs	r1, #44	; 0x2c
 8001c46:	fb01 f303 	mul.w	r3, r1, r3
 8001c4a:	4413      	add	r3, r2
 8001c4c:	3342      	adds	r3, #66	; 0x42
 8001c4e:	2202      	movs	r2, #2
 8001c50:	701a      	strb	r2, [r3, #0]
      break;
 8001c52:	e02a      	b.n	8001caa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c54:	78fb      	ldrb	r3, [r7, #3]
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	212c      	movs	r1, #44	; 0x2c
 8001c5a:	fb01 f303 	mul.w	r3, r1, r3
 8001c5e:	4413      	add	r3, r2
 8001c60:	3354      	adds	r3, #84	; 0x54
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d109      	bne.n	8001c7c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c68:	78fb      	ldrb	r3, [r7, #3]
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	212c      	movs	r1, #44	; 0x2c
 8001c6e:	fb01 f303 	mul.w	r3, r1, r3
 8001c72:	4413      	add	r3, r2
 8001c74:	3342      	adds	r3, #66	; 0x42
 8001c76:	2200      	movs	r2, #0
 8001c78:	701a      	strb	r2, [r3, #0]
      break;
 8001c7a:	e016      	b.n	8001caa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c7c:	78fb      	ldrb	r3, [r7, #3]
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	212c      	movs	r1, #44	; 0x2c
 8001c82:	fb01 f303 	mul.w	r3, r1, r3
 8001c86:	4413      	add	r3, r2
 8001c88:	3342      	adds	r3, #66	; 0x42
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	701a      	strb	r2, [r3, #0]
      break;
 8001c8e:	e00c      	b.n	8001caa <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c90:	78fb      	ldrb	r3, [r7, #3]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	212c      	movs	r1, #44	; 0x2c
 8001c96:	fb01 f303 	mul.w	r3, r1, r3
 8001c9a:	4413      	add	r3, r2
 8001c9c:	3342      	adds	r3, #66	; 0x42
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	701a      	strb	r2, [r3, #0]
      break;
 8001ca2:	e002      	b.n	8001caa <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001ca4:	bf00      	nop
 8001ca6:	e000      	b.n	8001caa <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001ca8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001caa:	78fb      	ldrb	r3, [r7, #3]
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	212c      	movs	r1, #44	; 0x2c
 8001cb0:	fb01 f303 	mul.w	r3, r1, r3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	3344      	adds	r3, #68	; 0x44
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001cbc:	78fb      	ldrb	r3, [r7, #3]
 8001cbe:	8b3a      	ldrh	r2, [r7, #24]
 8001cc0:	6879      	ldr	r1, [r7, #4]
 8001cc2:	202c      	movs	r0, #44	; 0x2c
 8001cc4:	fb00 f303 	mul.w	r3, r0, r3
 8001cc8:	440b      	add	r3, r1
 8001cca:	334c      	adds	r3, #76	; 0x4c
 8001ccc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001cce:	78fb      	ldrb	r3, [r7, #3]
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	212c      	movs	r1, #44	; 0x2c
 8001cd4:	fb01 f303 	mul.w	r3, r1, r3
 8001cd8:	4413      	add	r3, r2
 8001cda:	3360      	adds	r3, #96	; 0x60
 8001cdc:	2200      	movs	r2, #0
 8001cde:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001ce0:	78fb      	ldrb	r3, [r7, #3]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	212c      	movs	r1, #44	; 0x2c
 8001ce6:	fb01 f303 	mul.w	r3, r1, r3
 8001cea:	4413      	add	r3, r2
 8001cec:	3350      	adds	r3, #80	; 0x50
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001cf2:	78fb      	ldrb	r3, [r7, #3]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	212c      	movs	r1, #44	; 0x2c
 8001cf8:	fb01 f303 	mul.w	r3, r1, r3
 8001cfc:	4413      	add	r3, r2
 8001cfe:	3339      	adds	r3, #57	; 0x39
 8001d00:	78fa      	ldrb	r2, [r7, #3]
 8001d02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001d04:	78fb      	ldrb	r3, [r7, #3]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	212c      	movs	r1, #44	; 0x2c
 8001d0a:	fb01 f303 	mul.w	r3, r1, r3
 8001d0e:	4413      	add	r3, r2
 8001d10:	3361      	adds	r3, #97	; 0x61
 8001d12:	2200      	movs	r2, #0
 8001d14:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6818      	ldr	r0, [r3, #0]
 8001d1a:	78fb      	ldrb	r3, [r7, #3]
 8001d1c:	222c      	movs	r2, #44	; 0x2c
 8001d1e:	fb02 f303 	mul.w	r3, r2, r3
 8001d22:	3338      	adds	r3, #56	; 0x38
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	18d1      	adds	r1, r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	461a      	mov	r2, r3
 8001d30:	f004 ff1c 	bl	8006b6c <USB_HC_StartXfer>
 8001d34:	4603      	mov	r3, r0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop

08001d40 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f004 fc1d 	bl	8006596 <USB_GetMode>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	f040 80f6 	bne.w	8001f50 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f004 fc01 	bl	8006570 <USB_ReadInterrupts>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 80ec 	beq.w	8001f4e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f004 fbf8 	bl	8006570 <USB_ReadInterrupts>
 8001d80:	4603      	mov	r3, r0
 8001d82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d8a:	d104      	bne.n	8001d96 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001d94:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f004 fbe8 	bl	8006570 <USB_ReadInterrupts>
 8001da0:	4603      	mov	r3, r0
 8001da2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001da6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001daa:	d104      	bne.n	8001db6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001db4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f004 fbd8 	bl	8006570 <USB_ReadInterrupts>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001dc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001dca:	d104      	bne.n	8001dd6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001dd4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f004 fbc8 	bl	8006570 <USB_ReadInterrupts>
 8001de0:	4603      	mov	r3, r0
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d103      	bne.n	8001df2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2202      	movs	r2, #2
 8001df0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f004 fbba 	bl	8006570 <USB_ReadInterrupts>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e06:	d11c      	bne.n	8001e42 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001e10:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10f      	bne.n	8001e42 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001e22:	2110      	movs	r1, #16
 8001e24:	6938      	ldr	r0, [r7, #16]
 8001e26:	f004 faa9 	bl	800637c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001e2a:	6938      	ldr	r0, [r7, #16]
 8001e2c:	f004 fada 	bl	80063e4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2101      	movs	r1, #1
 8001e36:	4618      	mov	r0, r3
 8001e38:	f004 fcb0 	bl	800679c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f007 fa7d 	bl	800933c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f004 fb92 	bl	8006570 <USB_ReadInterrupts>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e56:	d102      	bne.n	8001e5e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f001 f89e 	bl	8002f9a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f004 fb84 	bl	8006570 <USB_ReadInterrupts>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d106      	bne.n	8001e80 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f007 fa46 	bl	8009304 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2208      	movs	r2, #8
 8001e7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f004 fb73 	bl	8006570 <USB_ReadInterrupts>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	f003 0310 	and.w	r3, r3, #16
 8001e90:	2b10      	cmp	r3, #16
 8001e92:	d101      	bne.n	8001e98 <HAL_HCD_IRQHandler+0x158>
 8001e94:	2301      	movs	r3, #1
 8001e96:	e000      	b.n	8001e9a <HAL_HCD_IRQHandler+0x15a>
 8001e98:	2300      	movs	r3, #0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d012      	beq.n	8001ec4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	699a      	ldr	r2, [r3, #24]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 0210 	bic.w	r2, r2, #16
 8001eac:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 ffa1 	bl	8002df6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	699a      	ldr	r2, [r3, #24]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f042 0210 	orr.w	r2, r2, #16
 8001ec2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f004 fb51 	bl	8006570 <USB_ReadInterrupts>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ed8:	d13a      	bne.n	8001f50 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f004 ff86 	bl	8006df0 <USB_HC_ReadInterrupt>
 8001ee4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	e025      	b.n	8001f38 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d018      	beq.n	8001f32 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	015a      	lsls	r2, r3, #5
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4413      	add	r3, r2
 8001f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f16:	d106      	bne.n	8001f26 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f8ab 	bl	800207a <HCD_HC_IN_IRQHandler>
 8001f24:	e005      	b.n	8001f32 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 fbf9 	bl	8002724 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	3301      	adds	r3, #1
 8001f36:	617b      	str	r3, [r7, #20]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d3d4      	bcc.n	8001eec <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f4a:	615a      	str	r2, [r3, #20]
 8001f4c:	e000      	b.n	8001f50 <HAL_HCD_IRQHandler+0x210>
      return;
 8001f4e:	bf00      	nop
    }
  }
}
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d101      	bne.n	8001f6c <HAL_HCD_Start+0x16>
 8001f68:	2302      	movs	r3, #2
 8001f6a:	e013      	b.n	8001f94 <HAL_HCD_Start+0x3e>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2101      	movs	r1, #1
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f004 fc72 	bl	8006864 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f004 f98a 	bl	800629e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d101      	bne.n	8001fb2 <HAL_HCD_Stop+0x16>
 8001fae:	2302      	movs	r3, #2
 8001fb0:	e00d      	b.n	8001fce <HAL_HCD_Stop+0x32>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f005 f860 	bl	8007084 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b082      	sub	sp, #8
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f004 fc14 	bl	8006810 <USB_ResetPort>
 8001fe8:	4603      	mov	r3, r0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001ffe:	78fb      	ldrb	r3, [r7, #3]
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	212c      	movs	r1, #44	; 0x2c
 8002004:	fb01 f303 	mul.w	r3, r1, r3
 8002008:	4413      	add	r3, r2
 800200a:	3360      	adds	r3, #96	; 0x60
 800200c:	781b      	ldrb	r3, [r3, #0]
}
 800200e:	4618      	mov	r0, r3
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	460b      	mov	r3, r1
 8002024:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002026:	78fb      	ldrb	r3, [r7, #3]
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	212c      	movs	r1, #44	; 0x2c
 800202c:	fb01 f303 	mul.w	r3, r1, r3
 8002030:	4413      	add	r3, r2
 8002032:	3350      	adds	r3, #80	; 0x50
 8002034:	681b      	ldr	r3, [r3, #0]
}
 8002036:	4618      	mov	r0, r3
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f004 fc58 	bl	8006904 <USB_GetCurrentFrame>
 8002054:	4603      	mov	r3, r0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f004 fc33 	bl	80068d6 <USB_GetHostSpeed>
 8002070:	4603      	mov	r3, r0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b086      	sub	sp, #24
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	460b      	mov	r3, r1
 8002084:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002090:	78fb      	ldrb	r3, [r7, #3]
 8002092:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	015a      	lsls	r2, r3, #5
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4413      	add	r3, r2
 800209c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 0304 	and.w	r3, r3, #4
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	d11a      	bne.n	80020e0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	015a      	lsls	r2, r3, #5
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4413      	add	r3, r2
 80020b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b6:	461a      	mov	r2, r3
 80020b8:	2304      	movs	r3, #4
 80020ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	212c      	movs	r1, #44	; 0x2c
 80020c2:	fb01 f303 	mul.w	r3, r1, r3
 80020c6:	4413      	add	r3, r2
 80020c8:	3361      	adds	r3, #97	; 0x61
 80020ca:	2206      	movs	r2, #6
 80020cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	4611      	mov	r1, r2
 80020d8:	4618      	mov	r0, r3
 80020da:	f004 fe9a 	bl	8006e12 <USB_HC_Halt>
 80020de:	e0af      	b.n	8002240 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	015a      	lsls	r2, r3, #5
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	4413      	add	r3, r2
 80020e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020f6:	d11b      	bne.n	8002130 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	015a      	lsls	r2, r3, #5
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	4413      	add	r3, r2
 8002100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002104:	461a      	mov	r2, r3
 8002106:	f44f 7380 	mov.w	r3, #256	; 0x100
 800210a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	212c      	movs	r1, #44	; 0x2c
 8002112:	fb01 f303 	mul.w	r3, r1, r3
 8002116:	4413      	add	r3, r2
 8002118:	3361      	adds	r3, #97	; 0x61
 800211a:	2207      	movs	r2, #7
 800211c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	4611      	mov	r1, r2
 8002128:	4618      	mov	r0, r3
 800212a:	f004 fe72 	bl	8006e12 <USB_HC_Halt>
 800212e:	e087      	b.n	8002240 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	015a      	lsls	r2, r3, #5
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	4413      	add	r3, r2
 8002138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 0320 	and.w	r3, r3, #32
 8002142:	2b20      	cmp	r3, #32
 8002144:	d109      	bne.n	800215a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	015a      	lsls	r2, r3, #5
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	4413      	add	r3, r2
 800214e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002152:	461a      	mov	r2, r3
 8002154:	2320      	movs	r3, #32
 8002156:	6093      	str	r3, [r2, #8]
 8002158:	e072      	b.n	8002240 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	015a      	lsls	r2, r3, #5
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	4413      	add	r3, r2
 8002162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 0308 	and.w	r3, r3, #8
 800216c:	2b08      	cmp	r3, #8
 800216e:	d11a      	bne.n	80021a6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	015a      	lsls	r2, r3, #5
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4413      	add	r3, r2
 8002178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217c:	461a      	mov	r2, r3
 800217e:	2308      	movs	r3, #8
 8002180:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	212c      	movs	r1, #44	; 0x2c
 8002188:	fb01 f303 	mul.w	r3, r1, r3
 800218c:	4413      	add	r3, r2
 800218e:	3361      	adds	r3, #97	; 0x61
 8002190:	2205      	movs	r2, #5
 8002192:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	4611      	mov	r1, r2
 800219e:	4618      	mov	r0, r3
 80021a0:	f004 fe37 	bl	8006e12 <USB_HC_Halt>
 80021a4:	e04c      	b.n	8002240 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	015a      	lsls	r2, r3, #5
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	4413      	add	r3, r2
 80021ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021bc:	d11b      	bne.n	80021f6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	015a      	lsls	r2, r3, #5
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4413      	add	r3, r2
 80021c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ca:	461a      	mov	r2, r3
 80021cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	212c      	movs	r1, #44	; 0x2c
 80021d8:	fb01 f303 	mul.w	r3, r1, r3
 80021dc:	4413      	add	r3, r2
 80021de:	3361      	adds	r3, #97	; 0x61
 80021e0:	2208      	movs	r2, #8
 80021e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	4611      	mov	r1, r2
 80021ee:	4618      	mov	r0, r3
 80021f0:	f004 fe0f 	bl	8006e12 <USB_HC_Halt>
 80021f4:	e024      	b.n	8002240 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	015a      	lsls	r2, r3, #5
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4413      	add	r3, r2
 80021fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002208:	2b80      	cmp	r3, #128	; 0x80
 800220a:	d119      	bne.n	8002240 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	015a      	lsls	r2, r3, #5
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4413      	add	r3, r2
 8002214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002218:	461a      	mov	r2, r3
 800221a:	2380      	movs	r3, #128	; 0x80
 800221c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	212c      	movs	r1, #44	; 0x2c
 8002224:	fb01 f303 	mul.w	r3, r1, r3
 8002228:	4413      	add	r3, r2
 800222a:	3361      	adds	r3, #97	; 0x61
 800222c:	2206      	movs	r2, #6
 800222e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	4611      	mov	r1, r2
 800223a:	4618      	mov	r0, r3
 800223c:	f004 fde9 	bl	8006e12 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	015a      	lsls	r2, r3, #5
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4413      	add	r3, r2
 8002248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002252:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002256:	d112      	bne.n	800227e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	4611      	mov	r1, r2
 8002262:	4618      	mov	r0, r3
 8002264:	f004 fdd5 	bl	8006e12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	015a      	lsls	r2, r3, #5
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	4413      	add	r3, r2
 8002270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002274:	461a      	mov	r2, r3
 8002276:	f44f 7300 	mov.w	r3, #512	; 0x200
 800227a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800227c:	e24e      	b.n	800271c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	015a      	lsls	r2, r3, #5
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4413      	add	r3, r2
 8002286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b01      	cmp	r3, #1
 8002292:	f040 80df 	bne.w	8002454 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d019      	beq.n	80022d2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	212c      	movs	r1, #44	; 0x2c
 80022a4:	fb01 f303 	mul.w	r3, r1, r3
 80022a8:	4413      	add	r3, r2
 80022aa:	3348      	adds	r3, #72	; 0x48
 80022ac:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	0159      	lsls	r1, r3, #5
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	440b      	add	r3, r1
 80022b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80022c0:	1ad2      	subs	r2, r2, r3
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	202c      	movs	r0, #44	; 0x2c
 80022c8:	fb00 f303 	mul.w	r3, r0, r3
 80022cc:	440b      	add	r3, r1
 80022ce:	3350      	adds	r3, #80	; 0x50
 80022d0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	212c      	movs	r1, #44	; 0x2c
 80022d8:	fb01 f303 	mul.w	r3, r1, r3
 80022dc:	4413      	add	r3, r2
 80022de:	3361      	adds	r3, #97	; 0x61
 80022e0:	2201      	movs	r2, #1
 80022e2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	212c      	movs	r1, #44	; 0x2c
 80022ea:	fb01 f303 	mul.w	r3, r1, r3
 80022ee:	4413      	add	r3, r2
 80022f0:	335c      	adds	r3, #92	; 0x5c
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	015a      	lsls	r2, r3, #5
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002302:	461a      	mov	r2, r3
 8002304:	2301      	movs	r3, #1
 8002306:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	212c      	movs	r1, #44	; 0x2c
 800230e:	fb01 f303 	mul.w	r3, r1, r3
 8002312:	4413      	add	r3, r2
 8002314:	333f      	adds	r3, #63	; 0x3f
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d009      	beq.n	8002330 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	212c      	movs	r1, #44	; 0x2c
 8002322:	fb01 f303 	mul.w	r3, r1, r3
 8002326:	4413      	add	r3, r2
 8002328:	333f      	adds	r3, #63	; 0x3f
 800232a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800232c:	2b02      	cmp	r3, #2
 800232e:	d111      	bne.n	8002354 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	4611      	mov	r1, r2
 800233a:	4618      	mov	r0, r3
 800233c:	f004 fd69 	bl	8006e12 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	015a      	lsls	r2, r3, #5
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	4413      	add	r3, r2
 8002348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234c:	461a      	mov	r2, r3
 800234e:	2310      	movs	r3, #16
 8002350:	6093      	str	r3, [r2, #8]
 8002352:	e03a      	b.n	80023ca <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	212c      	movs	r1, #44	; 0x2c
 800235a:	fb01 f303 	mul.w	r3, r1, r3
 800235e:	4413      	add	r3, r2
 8002360:	333f      	adds	r3, #63	; 0x3f
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b03      	cmp	r3, #3
 8002366:	d009      	beq.n	800237c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	212c      	movs	r1, #44	; 0x2c
 800236e:	fb01 f303 	mul.w	r3, r1, r3
 8002372:	4413      	add	r3, r2
 8002374:	333f      	adds	r3, #63	; 0x3f
 8002376:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002378:	2b01      	cmp	r3, #1
 800237a:	d126      	bne.n	80023ca <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	015a      	lsls	r2, r3, #5
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4413      	add	r3, r2
 8002384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	0151      	lsls	r1, r2, #5
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	440a      	add	r2, r1
 8002392:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002396:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800239a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	212c      	movs	r1, #44	; 0x2c
 80023a2:	fb01 f303 	mul.w	r3, r1, r3
 80023a6:	4413      	add	r3, r2
 80023a8:	3360      	adds	r3, #96	; 0x60
 80023aa:	2201      	movs	r2, #1
 80023ac:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	b2d9      	uxtb	r1, r3
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	202c      	movs	r0, #44	; 0x2c
 80023b8:	fb00 f303 	mul.w	r3, r0, r3
 80023bc:	4413      	add	r3, r2
 80023be:	3360      	adds	r3, #96	; 0x60
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f006 ffc7 	bl	8009358 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d12b      	bne.n	800242a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	212c      	movs	r1, #44	; 0x2c
 80023d8:	fb01 f303 	mul.w	r3, r1, r3
 80023dc:	4413      	add	r3, r2
 80023de:	3348      	adds	r3, #72	; 0x48
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	202c      	movs	r0, #44	; 0x2c
 80023e8:	fb00 f202 	mul.w	r2, r0, r2
 80023ec:	440a      	add	r2, r1
 80023ee:	3240      	adds	r2, #64	; 0x40
 80023f0:	8812      	ldrh	r2, [r2, #0]
 80023f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f000 818e 	beq.w	800271c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	212c      	movs	r1, #44	; 0x2c
 8002406:	fb01 f303 	mul.w	r3, r1, r3
 800240a:	4413      	add	r3, r2
 800240c:	3354      	adds	r3, #84	; 0x54
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	f083 0301 	eor.w	r3, r3, #1
 8002414:	b2d8      	uxtb	r0, r3
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	212c      	movs	r1, #44	; 0x2c
 800241c:	fb01 f303 	mul.w	r3, r1, r3
 8002420:	4413      	add	r3, r2
 8002422:	3354      	adds	r3, #84	; 0x54
 8002424:	4602      	mov	r2, r0
 8002426:	701a      	strb	r2, [r3, #0]
}
 8002428:	e178      	b.n	800271c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	212c      	movs	r1, #44	; 0x2c
 8002430:	fb01 f303 	mul.w	r3, r1, r3
 8002434:	4413      	add	r3, r2
 8002436:	3354      	adds	r3, #84	; 0x54
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	f083 0301 	eor.w	r3, r3, #1
 800243e:	b2d8      	uxtb	r0, r3
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	212c      	movs	r1, #44	; 0x2c
 8002446:	fb01 f303 	mul.w	r3, r1, r3
 800244a:	4413      	add	r3, r2
 800244c:	3354      	adds	r3, #84	; 0x54
 800244e:	4602      	mov	r2, r0
 8002450:	701a      	strb	r2, [r3, #0]
}
 8002452:	e163      	b.n	800271c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	015a      	lsls	r2, r3, #5
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4413      	add	r3, r2
 800245c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b02      	cmp	r3, #2
 8002468:	f040 80f6 	bne.w	8002658 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	212c      	movs	r1, #44	; 0x2c
 8002472:	fb01 f303 	mul.w	r3, r1, r3
 8002476:	4413      	add	r3, r2
 8002478:	3361      	adds	r3, #97	; 0x61
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d109      	bne.n	8002494 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	212c      	movs	r1, #44	; 0x2c
 8002486:	fb01 f303 	mul.w	r3, r1, r3
 800248a:	4413      	add	r3, r2
 800248c:	3360      	adds	r3, #96	; 0x60
 800248e:	2201      	movs	r2, #1
 8002490:	701a      	strb	r2, [r3, #0]
 8002492:	e0c9      	b.n	8002628 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	212c      	movs	r1, #44	; 0x2c
 800249a:	fb01 f303 	mul.w	r3, r1, r3
 800249e:	4413      	add	r3, r2
 80024a0:	3361      	adds	r3, #97	; 0x61
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b05      	cmp	r3, #5
 80024a6:	d109      	bne.n	80024bc <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	212c      	movs	r1, #44	; 0x2c
 80024ae:	fb01 f303 	mul.w	r3, r1, r3
 80024b2:	4413      	add	r3, r2
 80024b4:	3360      	adds	r3, #96	; 0x60
 80024b6:	2205      	movs	r2, #5
 80024b8:	701a      	strb	r2, [r3, #0]
 80024ba:	e0b5      	b.n	8002628 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	212c      	movs	r1, #44	; 0x2c
 80024c2:	fb01 f303 	mul.w	r3, r1, r3
 80024c6:	4413      	add	r3, r2
 80024c8:	3361      	adds	r3, #97	; 0x61
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b06      	cmp	r3, #6
 80024ce:	d009      	beq.n	80024e4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	212c      	movs	r1, #44	; 0x2c
 80024d6:	fb01 f303 	mul.w	r3, r1, r3
 80024da:	4413      	add	r3, r2
 80024dc:	3361      	adds	r3, #97	; 0x61
 80024de:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	d150      	bne.n	8002586 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	212c      	movs	r1, #44	; 0x2c
 80024ea:	fb01 f303 	mul.w	r3, r1, r3
 80024ee:	4413      	add	r3, r2
 80024f0:	335c      	adds	r3, #92	; 0x5c
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	1c5a      	adds	r2, r3, #1
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	202c      	movs	r0, #44	; 0x2c
 80024fc:	fb00 f303 	mul.w	r3, r0, r3
 8002500:	440b      	add	r3, r1
 8002502:	335c      	adds	r3, #92	; 0x5c
 8002504:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	212c      	movs	r1, #44	; 0x2c
 800250c:	fb01 f303 	mul.w	r3, r1, r3
 8002510:	4413      	add	r3, r2
 8002512:	335c      	adds	r3, #92	; 0x5c
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2b02      	cmp	r3, #2
 8002518:	d912      	bls.n	8002540 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	212c      	movs	r1, #44	; 0x2c
 8002520:	fb01 f303 	mul.w	r3, r1, r3
 8002524:	4413      	add	r3, r2
 8002526:	335c      	adds	r3, #92	; 0x5c
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	212c      	movs	r1, #44	; 0x2c
 8002532:	fb01 f303 	mul.w	r3, r1, r3
 8002536:	4413      	add	r3, r2
 8002538:	3360      	adds	r3, #96	; 0x60
 800253a:	2204      	movs	r2, #4
 800253c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800253e:	e073      	b.n	8002628 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	212c      	movs	r1, #44	; 0x2c
 8002546:	fb01 f303 	mul.w	r3, r1, r3
 800254a:	4413      	add	r3, r2
 800254c:	3360      	adds	r3, #96	; 0x60
 800254e:	2202      	movs	r2, #2
 8002550:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	015a      	lsls	r2, r3, #5
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4413      	add	r3, r2
 800255a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002568:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002570:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	015a      	lsls	r2, r3, #5
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	4413      	add	r3, r2
 800257a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257e:	461a      	mov	r2, r3
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002584:	e050      	b.n	8002628 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	212c      	movs	r1, #44	; 0x2c
 800258c:	fb01 f303 	mul.w	r3, r1, r3
 8002590:	4413      	add	r3, r2
 8002592:	3361      	adds	r3, #97	; 0x61
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b03      	cmp	r3, #3
 8002598:	d122      	bne.n	80025e0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	212c      	movs	r1, #44	; 0x2c
 80025a0:	fb01 f303 	mul.w	r3, r1, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	3360      	adds	r3, #96	; 0x60
 80025a8:	2202      	movs	r2, #2
 80025aa:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	015a      	lsls	r2, r3, #5
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	4413      	add	r3, r2
 80025b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025c2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025ca:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	015a      	lsls	r2, r3, #5
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	4413      	add	r3, r2
 80025d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d8:	461a      	mov	r2, r3
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	e023      	b.n	8002628 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	212c      	movs	r1, #44	; 0x2c
 80025e6:	fb01 f303 	mul.w	r3, r1, r3
 80025ea:	4413      	add	r3, r2
 80025ec:	3361      	adds	r3, #97	; 0x61
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b07      	cmp	r3, #7
 80025f2:	d119      	bne.n	8002628 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	212c      	movs	r1, #44	; 0x2c
 80025fa:	fb01 f303 	mul.w	r3, r1, r3
 80025fe:	4413      	add	r3, r2
 8002600:	335c      	adds	r3, #92	; 0x5c
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	1c5a      	adds	r2, r3, #1
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	202c      	movs	r0, #44	; 0x2c
 800260c:	fb00 f303 	mul.w	r3, r0, r3
 8002610:	440b      	add	r3, r1
 8002612:	335c      	adds	r3, #92	; 0x5c
 8002614:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	212c      	movs	r1, #44	; 0x2c
 800261c:	fb01 f303 	mul.w	r3, r1, r3
 8002620:	4413      	add	r3, r2
 8002622:	3360      	adds	r3, #96	; 0x60
 8002624:	2204      	movs	r2, #4
 8002626:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	015a      	lsls	r2, r3, #5
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	4413      	add	r3, r2
 8002630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002634:	461a      	mov	r2, r3
 8002636:	2302      	movs	r3, #2
 8002638:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	b2d9      	uxtb	r1, r3
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	202c      	movs	r0, #44	; 0x2c
 8002644:	fb00 f303 	mul.w	r3, r0, r3
 8002648:	4413      	add	r3, r2
 800264a:	3360      	adds	r3, #96	; 0x60
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f006 fe81 	bl	8009358 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002656:	e061      	b.n	800271c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	015a      	lsls	r2, r3, #5
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	4413      	add	r3, r2
 8002660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 0310 	and.w	r3, r3, #16
 800266a:	2b10      	cmp	r3, #16
 800266c:	d156      	bne.n	800271c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	212c      	movs	r1, #44	; 0x2c
 8002674:	fb01 f303 	mul.w	r3, r1, r3
 8002678:	4413      	add	r3, r2
 800267a:	333f      	adds	r3, #63	; 0x3f
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b03      	cmp	r3, #3
 8002680:	d111      	bne.n	80026a6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	212c      	movs	r1, #44	; 0x2c
 8002688:	fb01 f303 	mul.w	r3, r1, r3
 800268c:	4413      	add	r3, r2
 800268e:	335c      	adds	r3, #92	; 0x5c
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	4611      	mov	r1, r2
 800269e:	4618      	mov	r0, r3
 80026a0:	f004 fbb7 	bl	8006e12 <USB_HC_Halt>
 80026a4:	e031      	b.n	800270a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	212c      	movs	r1, #44	; 0x2c
 80026ac:	fb01 f303 	mul.w	r3, r1, r3
 80026b0:	4413      	add	r3, r2
 80026b2:	333f      	adds	r3, #63	; 0x3f
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d009      	beq.n	80026ce <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	212c      	movs	r1, #44	; 0x2c
 80026c0:	fb01 f303 	mul.w	r3, r1, r3
 80026c4:	4413      	add	r3, r2
 80026c6:	333f      	adds	r3, #63	; 0x3f
 80026c8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d11d      	bne.n	800270a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	212c      	movs	r1, #44	; 0x2c
 80026d4:	fb01 f303 	mul.w	r3, r1, r3
 80026d8:	4413      	add	r3, r2
 80026da:	335c      	adds	r3, #92	; 0x5c
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d110      	bne.n	800270a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	212c      	movs	r1, #44	; 0x2c
 80026ee:	fb01 f303 	mul.w	r3, r1, r3
 80026f2:	4413      	add	r3, r2
 80026f4:	3361      	adds	r3, #97	; 0x61
 80026f6:	2203      	movs	r2, #3
 80026f8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	4611      	mov	r1, r2
 8002704:	4618      	mov	r0, r3
 8002706:	f004 fb84 	bl	8006e12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	015a      	lsls	r2, r3, #5
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4413      	add	r3, r2
 8002712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002716:	461a      	mov	r2, r3
 8002718:	2310      	movs	r3, #16
 800271a:	6093      	str	r3, [r2, #8]
}
 800271c:	bf00      	nop
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b088      	sub	sp, #32
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800273a:	78fb      	ldrb	r3, [r7, #3]
 800273c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	015a      	lsls	r2, r3, #5
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	4413      	add	r3, r2
 8002746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b04      	cmp	r3, #4
 8002752:	d11a      	bne.n	800278a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	015a      	lsls	r2, r3, #5
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	4413      	add	r3, r2
 800275c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002760:	461a      	mov	r2, r3
 8002762:	2304      	movs	r3, #4
 8002764:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	212c      	movs	r1, #44	; 0x2c
 800276c:	fb01 f303 	mul.w	r3, r1, r3
 8002770:	4413      	add	r3, r2
 8002772:	3361      	adds	r3, #97	; 0x61
 8002774:	2206      	movs	r2, #6
 8002776:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	4611      	mov	r1, r2
 8002782:	4618      	mov	r0, r3
 8002784:	f004 fb45 	bl	8006e12 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002788:	e331      	b.n	8002dee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	015a      	lsls	r2, r3, #5
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	4413      	add	r3, r2
 8002792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 0320 	and.w	r3, r3, #32
 800279c:	2b20      	cmp	r3, #32
 800279e:	d12e      	bne.n	80027fe <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	015a      	lsls	r2, r3, #5
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	4413      	add	r3, r2
 80027a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ac:	461a      	mov	r2, r3
 80027ae:	2320      	movs	r3, #32
 80027b0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	212c      	movs	r1, #44	; 0x2c
 80027b8:	fb01 f303 	mul.w	r3, r1, r3
 80027bc:	4413      	add	r3, r2
 80027be:	333d      	adds	r3, #61	; 0x3d
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	f040 8313 	bne.w	8002dee <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	212c      	movs	r1, #44	; 0x2c
 80027ce:	fb01 f303 	mul.w	r3, r1, r3
 80027d2:	4413      	add	r3, r2
 80027d4:	333d      	adds	r3, #61	; 0x3d
 80027d6:	2200      	movs	r2, #0
 80027d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	212c      	movs	r1, #44	; 0x2c
 80027e0:	fb01 f303 	mul.w	r3, r1, r3
 80027e4:	4413      	add	r3, r2
 80027e6:	3360      	adds	r3, #96	; 0x60
 80027e8:	2202      	movs	r2, #2
 80027ea:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	4611      	mov	r1, r2
 80027f6:	4618      	mov	r0, r3
 80027f8:	f004 fb0b 	bl	8006e12 <USB_HC_Halt>
}
 80027fc:	e2f7      	b.n	8002dee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	015a      	lsls	r2, r3, #5
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	4413      	add	r3, r2
 8002806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002814:	d112      	bne.n	800283c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	015a      	lsls	r2, r3, #5
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	4413      	add	r3, r2
 800281e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002822:	461a      	mov	r2, r3
 8002824:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002828:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	4611      	mov	r1, r2
 8002834:	4618      	mov	r0, r3
 8002836:	f004 faec 	bl	8006e12 <USB_HC_Halt>
}
 800283a:	e2d8      	b.n	8002dee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	015a      	lsls	r2, r3, #5
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	4413      	add	r3, r2
 8002844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b01      	cmp	r3, #1
 8002850:	d140      	bne.n	80028d4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	212c      	movs	r1, #44	; 0x2c
 8002858:	fb01 f303 	mul.w	r3, r1, r3
 800285c:	4413      	add	r3, r2
 800285e:	335c      	adds	r3, #92	; 0x5c
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	015a      	lsls	r2, r3, #5
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	4413      	add	r3, r2
 800286c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002876:	2b40      	cmp	r3, #64	; 0x40
 8002878:	d111      	bne.n	800289e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	212c      	movs	r1, #44	; 0x2c
 8002880:	fb01 f303 	mul.w	r3, r1, r3
 8002884:	4413      	add	r3, r2
 8002886:	333d      	adds	r3, #61	; 0x3d
 8002888:	2201      	movs	r2, #1
 800288a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	015a      	lsls	r2, r3, #5
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	4413      	add	r3, r2
 8002894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002898:	461a      	mov	r2, r3
 800289a:	2340      	movs	r3, #64	; 0x40
 800289c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	015a      	lsls	r2, r3, #5
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	4413      	add	r3, r2
 80028a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028aa:	461a      	mov	r2, r3
 80028ac:	2301      	movs	r3, #1
 80028ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	212c      	movs	r1, #44	; 0x2c
 80028b6:	fb01 f303 	mul.w	r3, r1, r3
 80028ba:	4413      	add	r3, r2
 80028bc:	3361      	adds	r3, #97	; 0x61
 80028be:	2201      	movs	r2, #1
 80028c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	4611      	mov	r1, r2
 80028cc:	4618      	mov	r0, r3
 80028ce:	f004 faa0 	bl	8006e12 <USB_HC_Halt>
}
 80028d2:	e28c      	b.n	8002dee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	015a      	lsls	r2, r3, #5
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	4413      	add	r3, r2
 80028dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e6:	2b40      	cmp	r3, #64	; 0x40
 80028e8:	d12c      	bne.n	8002944 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	212c      	movs	r1, #44	; 0x2c
 80028f0:	fb01 f303 	mul.w	r3, r1, r3
 80028f4:	4413      	add	r3, r2
 80028f6:	3361      	adds	r3, #97	; 0x61
 80028f8:	2204      	movs	r2, #4
 80028fa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	212c      	movs	r1, #44	; 0x2c
 8002902:	fb01 f303 	mul.w	r3, r1, r3
 8002906:	4413      	add	r3, r2
 8002908:	333d      	adds	r3, #61	; 0x3d
 800290a:	2201      	movs	r2, #1
 800290c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	212c      	movs	r1, #44	; 0x2c
 8002914:	fb01 f303 	mul.w	r3, r1, r3
 8002918:	4413      	add	r3, r2
 800291a:	335c      	adds	r3, #92	; 0x5c
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	4611      	mov	r1, r2
 800292a:	4618      	mov	r0, r3
 800292c:	f004 fa71 	bl	8006e12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	015a      	lsls	r2, r3, #5
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	4413      	add	r3, r2
 8002938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293c:	461a      	mov	r2, r3
 800293e:	2340      	movs	r3, #64	; 0x40
 8002940:	6093      	str	r3, [r2, #8]
}
 8002942:	e254      	b.n	8002dee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	015a      	lsls	r2, r3, #5
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	4413      	add	r3, r2
 800294c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 0308 	and.w	r3, r3, #8
 8002956:	2b08      	cmp	r3, #8
 8002958:	d11a      	bne.n	8002990 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	015a      	lsls	r2, r3, #5
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	4413      	add	r3, r2
 8002962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002966:	461a      	mov	r2, r3
 8002968:	2308      	movs	r3, #8
 800296a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	212c      	movs	r1, #44	; 0x2c
 8002972:	fb01 f303 	mul.w	r3, r1, r3
 8002976:	4413      	add	r3, r2
 8002978:	3361      	adds	r3, #97	; 0x61
 800297a:	2205      	movs	r2, #5
 800297c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	4611      	mov	r1, r2
 8002988:	4618      	mov	r0, r3
 800298a:	f004 fa42 	bl	8006e12 <USB_HC_Halt>
}
 800298e:	e22e      	b.n	8002dee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	4413      	add	r3, r2
 8002998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 0310 	and.w	r3, r3, #16
 80029a2:	2b10      	cmp	r3, #16
 80029a4:	d140      	bne.n	8002a28 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	212c      	movs	r1, #44	; 0x2c
 80029ac:	fb01 f303 	mul.w	r3, r1, r3
 80029b0:	4413      	add	r3, r2
 80029b2:	335c      	adds	r3, #92	; 0x5c
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	212c      	movs	r1, #44	; 0x2c
 80029be:	fb01 f303 	mul.w	r3, r1, r3
 80029c2:	4413      	add	r3, r2
 80029c4:	3361      	adds	r3, #97	; 0x61
 80029c6:	2203      	movs	r2, #3
 80029c8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	212c      	movs	r1, #44	; 0x2c
 80029d0:	fb01 f303 	mul.w	r3, r1, r3
 80029d4:	4413      	add	r3, r2
 80029d6:	333d      	adds	r3, #61	; 0x3d
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d112      	bne.n	8002a04 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	212c      	movs	r1, #44	; 0x2c
 80029e4:	fb01 f303 	mul.w	r3, r1, r3
 80029e8:	4413      	add	r3, r2
 80029ea:	333c      	adds	r3, #60	; 0x3c
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d108      	bne.n	8002a04 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	212c      	movs	r1, #44	; 0x2c
 80029f8:	fb01 f303 	mul.w	r3, r1, r3
 80029fc:	4413      	add	r3, r2
 80029fe:	333d      	adds	r3, #61	; 0x3d
 8002a00:	2201      	movs	r2, #1
 8002a02:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	4611      	mov	r1, r2
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f004 f9ff 	bl	8006e12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	015a      	lsls	r2, r3, #5
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a20:	461a      	mov	r2, r3
 8002a22:	2310      	movs	r3, #16
 8002a24:	6093      	str	r3, [r2, #8]
}
 8002a26:	e1e2      	b.n	8002dee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	015a      	lsls	r2, r3, #5
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	4413      	add	r3, r2
 8002a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a3a:	2b80      	cmp	r3, #128	; 0x80
 8002a3c:	d164      	bne.n	8002b08 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d111      	bne.n	8002a6a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	212c      	movs	r1, #44	; 0x2c
 8002a4c:	fb01 f303 	mul.w	r3, r1, r3
 8002a50:	4413      	add	r3, r2
 8002a52:	3361      	adds	r3, #97	; 0x61
 8002a54:	2206      	movs	r2, #6
 8002a56:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	4611      	mov	r1, r2
 8002a62:	4618      	mov	r0, r3
 8002a64:	f004 f9d5 	bl	8006e12 <USB_HC_Halt>
 8002a68:	e044      	b.n	8002af4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	212c      	movs	r1, #44	; 0x2c
 8002a70:	fb01 f303 	mul.w	r3, r1, r3
 8002a74:	4413      	add	r3, r2
 8002a76:	335c      	adds	r3, #92	; 0x5c
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	1c5a      	adds	r2, r3, #1
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	202c      	movs	r0, #44	; 0x2c
 8002a82:	fb00 f303 	mul.w	r3, r0, r3
 8002a86:	440b      	add	r3, r1
 8002a88:	335c      	adds	r3, #92	; 0x5c
 8002a8a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	212c      	movs	r1, #44	; 0x2c
 8002a92:	fb01 f303 	mul.w	r3, r1, r3
 8002a96:	4413      	add	r3, r2
 8002a98:	335c      	adds	r3, #92	; 0x5c
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d920      	bls.n	8002ae2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	212c      	movs	r1, #44	; 0x2c
 8002aa6:	fb01 f303 	mul.w	r3, r1, r3
 8002aaa:	4413      	add	r3, r2
 8002aac:	335c      	adds	r3, #92	; 0x5c
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	212c      	movs	r1, #44	; 0x2c
 8002ab8:	fb01 f303 	mul.w	r3, r1, r3
 8002abc:	4413      	add	r3, r2
 8002abe:	3360      	adds	r3, #96	; 0x60
 8002ac0:	2204      	movs	r2, #4
 8002ac2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	b2d9      	uxtb	r1, r3
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	202c      	movs	r0, #44	; 0x2c
 8002ace:	fb00 f303 	mul.w	r3, r0, r3
 8002ad2:	4413      	add	r3, r2
 8002ad4:	3360      	adds	r3, #96	; 0x60
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f006 fc3c 	bl	8009358 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002ae0:	e008      	b.n	8002af4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	212c      	movs	r1, #44	; 0x2c
 8002ae8:	fb01 f303 	mul.w	r3, r1, r3
 8002aec:	4413      	add	r3, r2
 8002aee:	3360      	adds	r3, #96	; 0x60
 8002af0:	2202      	movs	r2, #2
 8002af2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	015a      	lsls	r2, r3, #5
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	4413      	add	r3, r2
 8002afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b00:	461a      	mov	r2, r3
 8002b02:	2380      	movs	r3, #128	; 0x80
 8002b04:	6093      	str	r3, [r2, #8]
}
 8002b06:	e172      	b.n	8002dee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	015a      	lsls	r2, r3, #5
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b1e:	d11b      	bne.n	8002b58 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	212c      	movs	r1, #44	; 0x2c
 8002b26:	fb01 f303 	mul.w	r3, r1, r3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	3361      	adds	r3, #97	; 0x61
 8002b2e:	2208      	movs	r2, #8
 8002b30:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	4611      	mov	r1, r2
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f004 f968 	bl	8006e12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	015a      	lsls	r2, r3, #5
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	4413      	add	r3, r2
 8002b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4e:	461a      	mov	r2, r3
 8002b50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b54:	6093      	str	r3, [r2, #8]
}
 8002b56:	e14a      	b.n	8002dee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	015a      	lsls	r2, r3, #5
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	4413      	add	r3, r2
 8002b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	f040 813f 	bne.w	8002dee <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	212c      	movs	r1, #44	; 0x2c
 8002b76:	fb01 f303 	mul.w	r3, r1, r3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3361      	adds	r3, #97	; 0x61
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d17d      	bne.n	8002c80 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	212c      	movs	r1, #44	; 0x2c
 8002b8a:	fb01 f303 	mul.w	r3, r1, r3
 8002b8e:	4413      	add	r3, r2
 8002b90:	3360      	adds	r3, #96	; 0x60
 8002b92:	2201      	movs	r2, #1
 8002b94:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	212c      	movs	r1, #44	; 0x2c
 8002b9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	333f      	adds	r3, #63	; 0x3f
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d00a      	beq.n	8002bc0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	212c      	movs	r1, #44	; 0x2c
 8002bb0:	fb01 f303 	mul.w	r3, r1, r3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	333f      	adds	r3, #63	; 0x3f
 8002bb8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	f040 8100 	bne.w	8002dc0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d113      	bne.n	8002bf0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	212c      	movs	r1, #44	; 0x2c
 8002bce:	fb01 f303 	mul.w	r3, r1, r3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	3355      	adds	r3, #85	; 0x55
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	f083 0301 	eor.w	r3, r3, #1
 8002bdc:	b2d8      	uxtb	r0, r3
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	212c      	movs	r1, #44	; 0x2c
 8002be4:	fb01 f303 	mul.w	r3, r1, r3
 8002be8:	4413      	add	r3, r2
 8002bea:	3355      	adds	r3, #85	; 0x55
 8002bec:	4602      	mov	r2, r0
 8002bee:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	f040 80e3 	bne.w	8002dc0 <HCD_HC_OUT_IRQHandler+0x69c>
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	212c      	movs	r1, #44	; 0x2c
 8002c00:	fb01 f303 	mul.w	r3, r1, r3
 8002c04:	4413      	add	r3, r2
 8002c06:	334c      	adds	r3, #76	; 0x4c
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 80d8 	beq.w	8002dc0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	212c      	movs	r1, #44	; 0x2c
 8002c16:	fb01 f303 	mul.w	r3, r1, r3
 8002c1a:	4413      	add	r3, r2
 8002c1c:	334c      	adds	r3, #76	; 0x4c
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	202c      	movs	r0, #44	; 0x2c
 8002c26:	fb00 f202 	mul.w	r2, r0, r2
 8002c2a:	440a      	add	r2, r1
 8002c2c:	3240      	adds	r2, #64	; 0x40
 8002c2e:	8812      	ldrh	r2, [r2, #0]
 8002c30:	4413      	add	r3, r2
 8002c32:	3b01      	subs	r3, #1
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	202c      	movs	r0, #44	; 0x2c
 8002c3a:	fb00 f202 	mul.w	r2, r0, r2
 8002c3e:	440a      	add	r2, r1
 8002c40:	3240      	adds	r2, #64	; 0x40
 8002c42:	8812      	ldrh	r2, [r2, #0]
 8002c44:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 80b5 	beq.w	8002dc0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	212c      	movs	r1, #44	; 0x2c
 8002c5c:	fb01 f303 	mul.w	r3, r1, r3
 8002c60:	4413      	add	r3, r2
 8002c62:	3355      	adds	r3, #85	; 0x55
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	f083 0301 	eor.w	r3, r3, #1
 8002c6a:	b2d8      	uxtb	r0, r3
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	212c      	movs	r1, #44	; 0x2c
 8002c72:	fb01 f303 	mul.w	r3, r1, r3
 8002c76:	4413      	add	r3, r2
 8002c78:	3355      	adds	r3, #85	; 0x55
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	701a      	strb	r2, [r3, #0]
 8002c7e:	e09f      	b.n	8002dc0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	212c      	movs	r1, #44	; 0x2c
 8002c86:	fb01 f303 	mul.w	r3, r1, r3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3361      	adds	r3, #97	; 0x61
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b03      	cmp	r3, #3
 8002c92:	d109      	bne.n	8002ca8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	212c      	movs	r1, #44	; 0x2c
 8002c9a:	fb01 f303 	mul.w	r3, r1, r3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3360      	adds	r3, #96	; 0x60
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	701a      	strb	r2, [r3, #0]
 8002ca6:	e08b      	b.n	8002dc0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	212c      	movs	r1, #44	; 0x2c
 8002cae:	fb01 f303 	mul.w	r3, r1, r3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3361      	adds	r3, #97	; 0x61
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b04      	cmp	r3, #4
 8002cba:	d109      	bne.n	8002cd0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	212c      	movs	r1, #44	; 0x2c
 8002cc2:	fb01 f303 	mul.w	r3, r1, r3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	3360      	adds	r3, #96	; 0x60
 8002cca:	2202      	movs	r2, #2
 8002ccc:	701a      	strb	r2, [r3, #0]
 8002cce:	e077      	b.n	8002dc0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	212c      	movs	r1, #44	; 0x2c
 8002cd6:	fb01 f303 	mul.w	r3, r1, r3
 8002cda:	4413      	add	r3, r2
 8002cdc:	3361      	adds	r3, #97	; 0x61
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b05      	cmp	r3, #5
 8002ce2:	d109      	bne.n	8002cf8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	212c      	movs	r1, #44	; 0x2c
 8002cea:	fb01 f303 	mul.w	r3, r1, r3
 8002cee:	4413      	add	r3, r2
 8002cf0:	3360      	adds	r3, #96	; 0x60
 8002cf2:	2205      	movs	r2, #5
 8002cf4:	701a      	strb	r2, [r3, #0]
 8002cf6:	e063      	b.n	8002dc0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	212c      	movs	r1, #44	; 0x2c
 8002cfe:	fb01 f303 	mul.w	r3, r1, r3
 8002d02:	4413      	add	r3, r2
 8002d04:	3361      	adds	r3, #97	; 0x61
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b06      	cmp	r3, #6
 8002d0a:	d009      	beq.n	8002d20 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	212c      	movs	r1, #44	; 0x2c
 8002d12:	fb01 f303 	mul.w	r3, r1, r3
 8002d16:	4413      	add	r3, r2
 8002d18:	3361      	adds	r3, #97	; 0x61
 8002d1a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	d14f      	bne.n	8002dc0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	212c      	movs	r1, #44	; 0x2c
 8002d26:	fb01 f303 	mul.w	r3, r1, r3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	335c      	adds	r3, #92	; 0x5c
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	1c5a      	adds	r2, r3, #1
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	202c      	movs	r0, #44	; 0x2c
 8002d38:	fb00 f303 	mul.w	r3, r0, r3
 8002d3c:	440b      	add	r3, r1
 8002d3e:	335c      	adds	r3, #92	; 0x5c
 8002d40:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	212c      	movs	r1, #44	; 0x2c
 8002d48:	fb01 f303 	mul.w	r3, r1, r3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	335c      	adds	r3, #92	; 0x5c
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d912      	bls.n	8002d7c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	212c      	movs	r1, #44	; 0x2c
 8002d5c:	fb01 f303 	mul.w	r3, r1, r3
 8002d60:	4413      	add	r3, r2
 8002d62:	335c      	adds	r3, #92	; 0x5c
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	212c      	movs	r1, #44	; 0x2c
 8002d6e:	fb01 f303 	mul.w	r3, r1, r3
 8002d72:	4413      	add	r3, r2
 8002d74:	3360      	adds	r3, #96	; 0x60
 8002d76:	2204      	movs	r2, #4
 8002d78:	701a      	strb	r2, [r3, #0]
 8002d7a:	e021      	b.n	8002dc0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	212c      	movs	r1, #44	; 0x2c
 8002d82:	fb01 f303 	mul.w	r3, r1, r3
 8002d86:	4413      	add	r3, r2
 8002d88:	3360      	adds	r3, #96	; 0x60
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	015a      	lsls	r2, r3, #5
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	4413      	add	r3, r2
 8002d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002da4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002dac:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	015a      	lsls	r2, r3, #5
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	4413      	add	r3, r2
 8002db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dba:	461a      	mov	r2, r3
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	015a      	lsls	r2, r3, #5
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dcc:	461a      	mov	r2, r3
 8002dce:	2302      	movs	r3, #2
 8002dd0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	b2d9      	uxtb	r1, r3
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	202c      	movs	r0, #44	; 0x2c
 8002ddc:	fb00 f303 	mul.w	r3, r0, r3
 8002de0:	4413      	add	r3, r2
 8002de2:	3360      	adds	r3, #96	; 0x60
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	461a      	mov	r2, r3
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f006 fab5 	bl	8009358 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002dee:	bf00      	nop
 8002df0:	3720      	adds	r7, #32
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b08a      	sub	sp, #40	; 0x28
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e06:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	0c5b      	lsrs	r3, r3, #17
 8002e1c:	f003 030f 	and.w	r3, r3, #15
 8002e20:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	091b      	lsrs	r3, r3, #4
 8002e26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e2a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d004      	beq.n	8002e3c <HCD_RXQLVL_IRQHandler+0x46>
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	2b05      	cmp	r3, #5
 8002e36:	f000 80a9 	beq.w	8002f8c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002e3a:	e0aa      	b.n	8002f92 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 80a6 	beq.w	8002f90 <HCD_RXQLVL_IRQHandler+0x19a>
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	212c      	movs	r1, #44	; 0x2c
 8002e4a:	fb01 f303 	mul.w	r3, r1, r3
 8002e4e:	4413      	add	r3, r2
 8002e50:	3344      	adds	r3, #68	; 0x44
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 809b 	beq.w	8002f90 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	212c      	movs	r1, #44	; 0x2c
 8002e60:	fb01 f303 	mul.w	r3, r1, r3
 8002e64:	4413      	add	r3, r2
 8002e66:	3350      	adds	r3, #80	; 0x50
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	441a      	add	r2, r3
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	202c      	movs	r0, #44	; 0x2c
 8002e74:	fb00 f303 	mul.w	r3, r0, r3
 8002e78:	440b      	add	r3, r1
 8002e7a:	334c      	adds	r3, #76	; 0x4c
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d87a      	bhi.n	8002f78 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	212c      	movs	r1, #44	; 0x2c
 8002e8c:	fb01 f303 	mul.w	r3, r1, r3
 8002e90:	4413      	add	r3, r2
 8002e92:	3344      	adds	r3, #68	; 0x44
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	b292      	uxth	r2, r2
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	f003 fb10 	bl	80064c0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	212c      	movs	r1, #44	; 0x2c
 8002ea6:	fb01 f303 	mul.w	r3, r1, r3
 8002eaa:	4413      	add	r3, r2
 8002eac:	3344      	adds	r3, #68	; 0x44
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	441a      	add	r2, r3
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	202c      	movs	r0, #44	; 0x2c
 8002eba:	fb00 f303 	mul.w	r3, r0, r3
 8002ebe:	440b      	add	r3, r1
 8002ec0:	3344      	adds	r3, #68	; 0x44
 8002ec2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	212c      	movs	r1, #44	; 0x2c
 8002eca:	fb01 f303 	mul.w	r3, r1, r3
 8002ece:	4413      	add	r3, r2
 8002ed0:	3350      	adds	r3, #80	; 0x50
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	441a      	add	r2, r3
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	202c      	movs	r0, #44	; 0x2c
 8002ede:	fb00 f303 	mul.w	r3, r0, r3
 8002ee2:	440b      	add	r3, r1
 8002ee4:	3350      	adds	r3, #80	; 0x50
 8002ee6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	015a      	lsls	r2, r3, #5
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	4413      	add	r3, r2
 8002ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	0cdb      	lsrs	r3, r3, #19
 8002ef8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002efc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	212c      	movs	r1, #44	; 0x2c
 8002f04:	fb01 f303 	mul.w	r3, r1, r3
 8002f08:	4413      	add	r3, r2
 8002f0a:	3340      	adds	r3, #64	; 0x40
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d13c      	bne.n	8002f90 <HCD_RXQLVL_IRQHandler+0x19a>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d039      	beq.n	8002f90 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	015a      	lsls	r2, r3, #5
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	4413      	add	r3, r2
 8002f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f32:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f3a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	015a      	lsls	r2, r3, #5
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	4413      	add	r3, r2
 8002f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f48:	461a      	mov	r2, r3
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	212c      	movs	r1, #44	; 0x2c
 8002f54:	fb01 f303 	mul.w	r3, r1, r3
 8002f58:	4413      	add	r3, r2
 8002f5a:	3354      	adds	r3, #84	; 0x54
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	f083 0301 	eor.w	r3, r3, #1
 8002f62:	b2d8      	uxtb	r0, r3
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	212c      	movs	r1, #44	; 0x2c
 8002f6a:	fb01 f303 	mul.w	r3, r1, r3
 8002f6e:	4413      	add	r3, r2
 8002f70:	3354      	adds	r3, #84	; 0x54
 8002f72:	4602      	mov	r2, r0
 8002f74:	701a      	strb	r2, [r3, #0]
      break;
 8002f76:	e00b      	b.n	8002f90 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	212c      	movs	r1, #44	; 0x2c
 8002f7e:	fb01 f303 	mul.w	r3, r1, r3
 8002f82:	4413      	add	r3, r2
 8002f84:	3360      	adds	r3, #96	; 0x60
 8002f86:	2204      	movs	r2, #4
 8002f88:	701a      	strb	r2, [r3, #0]
      break;
 8002f8a:	e001      	b.n	8002f90 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002f8c:	bf00      	nop
 8002f8e:	e000      	b.n	8002f92 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002f90:	bf00      	nop
  }
}
 8002f92:	bf00      	nop
 8002f94:	3728      	adds	r7, #40	; 0x28
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b086      	sub	sp, #24
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002fc6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d10b      	bne.n	8002fea <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d102      	bne.n	8002fe2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f006 f99f 	bl	8009320 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	f043 0302 	orr.w	r3, r3, #2
 8002fe8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f003 0308 	and.w	r3, r3, #8
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d132      	bne.n	800305a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	f043 0308 	orr.w	r3, r3, #8
 8002ffa:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	2b04      	cmp	r3, #4
 8003004:	d126      	bne.n	8003054 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	2b02      	cmp	r3, #2
 800300c:	d113      	bne.n	8003036 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003014:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003018:	d106      	bne.n	8003028 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2102      	movs	r1, #2
 8003020:	4618      	mov	r0, r3
 8003022:	f003 fbbb 	bl	800679c <USB_InitFSLSPClkSel>
 8003026:	e011      	b.n	800304c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2101      	movs	r1, #1
 800302e:	4618      	mov	r0, r3
 8003030:	f003 fbb4 	bl	800679c <USB_InitFSLSPClkSel>
 8003034:	e00a      	b.n	800304c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d106      	bne.n	800304c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003044:	461a      	mov	r2, r3
 8003046:	f64e 2360 	movw	r3, #60000	; 0xea60
 800304a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f006 f991 	bl	8009374 <HAL_HCD_PortEnabled_Callback>
 8003052:	e002      	b.n	800305a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f006 f99b 	bl	8009390 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f003 0320 	and.w	r3, r3, #32
 8003060:	2b20      	cmp	r3, #32
 8003062:	d103      	bne.n	800306c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f043 0320 	orr.w	r3, r3, #32
 800306a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003072:	461a      	mov	r2, r3
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	6013      	str	r3, [r2, #0]
}
 8003078:	bf00      	nop
 800307a:	3718      	adds	r7, #24
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e12b      	b.n	80032ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d106      	bne.n	80030ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7fd fe1a 	bl	8000ce0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2224      	movs	r2, #36	; 0x24
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0201 	bic.w	r2, r2, #1
 80030c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030e4:	f001 fa20 	bl	8004528 <HAL_RCC_GetPCLK1Freq>
 80030e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	4a81      	ldr	r2, [pc, #516]	; (80032f4 <HAL_I2C_Init+0x274>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d807      	bhi.n	8003104 <HAL_I2C_Init+0x84>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4a80      	ldr	r2, [pc, #512]	; (80032f8 <HAL_I2C_Init+0x278>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	bf94      	ite	ls
 80030fc:	2301      	movls	r3, #1
 80030fe:	2300      	movhi	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	e006      	b.n	8003112 <HAL_I2C_Init+0x92>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4a7d      	ldr	r2, [pc, #500]	; (80032fc <HAL_I2C_Init+0x27c>)
 8003108:	4293      	cmp	r3, r2
 800310a:	bf94      	ite	ls
 800310c:	2301      	movls	r3, #1
 800310e:	2300      	movhi	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e0e7      	b.n	80032ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	4a78      	ldr	r2, [pc, #480]	; (8003300 <HAL_I2C_Init+0x280>)
 800311e:	fba2 2303 	umull	r2, r3, r2, r3
 8003122:	0c9b      	lsrs	r3, r3, #18
 8003124:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	430a      	orrs	r2, r1
 8003138:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	4a6a      	ldr	r2, [pc, #424]	; (80032f4 <HAL_I2C_Init+0x274>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d802      	bhi.n	8003154 <HAL_I2C_Init+0xd4>
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	3301      	adds	r3, #1
 8003152:	e009      	b.n	8003168 <HAL_I2C_Init+0xe8>
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800315a:	fb02 f303 	mul.w	r3, r2, r3
 800315e:	4a69      	ldr	r2, [pc, #420]	; (8003304 <HAL_I2C_Init+0x284>)
 8003160:	fba2 2303 	umull	r2, r3, r2, r3
 8003164:	099b      	lsrs	r3, r3, #6
 8003166:	3301      	adds	r3, #1
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6812      	ldr	r2, [r2, #0]
 800316c:	430b      	orrs	r3, r1
 800316e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800317a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	495c      	ldr	r1, [pc, #368]	; (80032f4 <HAL_I2C_Init+0x274>)
 8003184:	428b      	cmp	r3, r1
 8003186:	d819      	bhi.n	80031bc <HAL_I2C_Init+0x13c>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	1e59      	subs	r1, r3, #1
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	fbb1 f3f3 	udiv	r3, r1, r3
 8003196:	1c59      	adds	r1, r3, #1
 8003198:	f640 73fc 	movw	r3, #4092	; 0xffc
 800319c:	400b      	ands	r3, r1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00a      	beq.n	80031b8 <HAL_I2C_Init+0x138>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	1e59      	subs	r1, r3, #1
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80031b0:	3301      	adds	r3, #1
 80031b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031b6:	e051      	b.n	800325c <HAL_I2C_Init+0x1dc>
 80031b8:	2304      	movs	r3, #4
 80031ba:	e04f      	b.n	800325c <HAL_I2C_Init+0x1dc>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d111      	bne.n	80031e8 <HAL_I2C_Init+0x168>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	1e58      	subs	r0, r3, #1
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6859      	ldr	r1, [r3, #4]
 80031cc:	460b      	mov	r3, r1
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	440b      	add	r3, r1
 80031d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031d6:	3301      	adds	r3, #1
 80031d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031dc:	2b00      	cmp	r3, #0
 80031de:	bf0c      	ite	eq
 80031e0:	2301      	moveq	r3, #1
 80031e2:	2300      	movne	r3, #0
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	e012      	b.n	800320e <HAL_I2C_Init+0x18e>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	1e58      	subs	r0, r3, #1
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6859      	ldr	r1, [r3, #4]
 80031f0:	460b      	mov	r3, r1
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	440b      	add	r3, r1
 80031f6:	0099      	lsls	r1, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80031fe:	3301      	adds	r3, #1
 8003200:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003204:	2b00      	cmp	r3, #0
 8003206:	bf0c      	ite	eq
 8003208:	2301      	moveq	r3, #1
 800320a:	2300      	movne	r3, #0
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_I2C_Init+0x196>
 8003212:	2301      	movs	r3, #1
 8003214:	e022      	b.n	800325c <HAL_I2C_Init+0x1dc>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10e      	bne.n	800323c <HAL_I2C_Init+0x1bc>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	1e58      	subs	r0, r3, #1
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6859      	ldr	r1, [r3, #4]
 8003226:	460b      	mov	r3, r1
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	440b      	add	r3, r1
 800322c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003230:	3301      	adds	r3, #1
 8003232:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800323a:	e00f      	b.n	800325c <HAL_I2C_Init+0x1dc>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	1e58      	subs	r0, r3, #1
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6859      	ldr	r1, [r3, #4]
 8003244:	460b      	mov	r3, r1
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	0099      	lsls	r1, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003252:	3301      	adds	r3, #1
 8003254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003258:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	6809      	ldr	r1, [r1, #0]
 8003260:	4313      	orrs	r3, r2
 8003262:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	69da      	ldr	r2, [r3, #28]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800328a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	6911      	ldr	r1, [r2, #16]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	68d2      	ldr	r2, [r2, #12]
 8003296:	4311      	orrs	r1, r2
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6812      	ldr	r2, [r2, #0]
 800329c:	430b      	orrs	r3, r1
 800329e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	695a      	ldr	r2, [r3, #20]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	431a      	orrs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 0201 	orr.w	r2, r2, #1
 80032ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2220      	movs	r2, #32
 80032d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	000186a0 	.word	0x000186a0
 80032f8:	001e847f 	.word	0x001e847f
 80032fc:	003d08ff 	.word	0x003d08ff
 8003300:	431bde83 	.word	0x431bde83
 8003304:	10624dd3 	.word	0x10624dd3

08003308 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b088      	sub	sp, #32
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e128      	b.n	800356c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d109      	bne.n	800333a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a90      	ldr	r2, [pc, #576]	; (8003574 <HAL_I2S_Init+0x26c>)
 8003332:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f7fd fd1b 	bl	8000d70 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2202      	movs	r2, #2
 800333e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	69db      	ldr	r3, [r3, #28]
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6812      	ldr	r2, [r2, #0]
 800334c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003350:	f023 030f 	bic.w	r3, r3, #15
 8003354:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2202      	movs	r2, #2
 800335c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	2b02      	cmp	r3, #2
 8003364:	d060      	beq.n	8003428 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d102      	bne.n	8003374 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800336e:	2310      	movs	r3, #16
 8003370:	617b      	str	r3, [r7, #20]
 8003372:	e001      	b.n	8003378 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003374:	2320      	movs	r3, #32
 8003376:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	2b20      	cmp	r3, #32
 800337e:	d802      	bhi.n	8003386 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003386:	2001      	movs	r0, #1
 8003388:	f001 f9c4 	bl	8004714 <HAL_RCCEx_GetPeriphCLKFreq>
 800338c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003396:	d125      	bne.n	80033e4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d010      	beq.n	80033c2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80033aa:	4613      	mov	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	461a      	mov	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033bc:	3305      	adds	r3, #5
 80033be:	613b      	str	r3, [r7, #16]
 80033c0:	e01f      	b.n	8003402 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80033cc:	4613      	mov	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	461a      	mov	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	fbb2 f3f3 	udiv	r3, r2, r3
 80033de:	3305      	adds	r3, #5
 80033e0:	613b      	str	r3, [r7, #16]
 80033e2:	e00e      	b.n	8003402 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	461a      	mov	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fe:	3305      	adds	r3, #5
 8003400:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	4a5c      	ldr	r2, [pc, #368]	; (8003578 <HAL_I2S_Init+0x270>)
 8003406:	fba2 2303 	umull	r2, r3, r2, r3
 800340a:	08db      	lsrs	r3, r3, #3
 800340c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	085b      	lsrs	r3, r3, #1
 800341e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	021b      	lsls	r3, r3, #8
 8003424:	61bb      	str	r3, [r7, #24]
 8003426:	e003      	b.n	8003430 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003428:	2302      	movs	r3, #2
 800342a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d902      	bls.n	800343c <HAL_I2S_Init+0x134>
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	2bff      	cmp	r3, #255	; 0xff
 800343a:	d907      	bls.n	800344c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003440:	f043 0210 	orr.w	r2, r3, #16
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e08f      	b.n	800356c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691a      	ldr	r2, [r3, #16]
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	ea42 0103 	orr.w	r1, r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	69fa      	ldr	r2, [r7, #28]
 800345c:	430a      	orrs	r2, r1
 800345e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800346a:	f023 030f 	bic.w	r3, r3, #15
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	6851      	ldr	r1, [r2, #4]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6892      	ldr	r2, [r2, #8]
 8003476:	4311      	orrs	r1, r2
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	68d2      	ldr	r2, [r2, #12]
 800347c:	4311      	orrs	r1, r2
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6992      	ldr	r2, [r2, #24]
 8003482:	430a      	orrs	r2, r1
 8003484:	431a      	orrs	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800348e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d161      	bne.n	800355c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a38      	ldr	r2, [pc, #224]	; (800357c <HAL_I2S_Init+0x274>)
 800349c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a37      	ldr	r2, [pc, #220]	; (8003580 <HAL_I2S_Init+0x278>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d101      	bne.n	80034ac <HAL_I2S_Init+0x1a4>
 80034a8:	4b36      	ldr	r3, [pc, #216]	; (8003584 <HAL_I2S_Init+0x27c>)
 80034aa:	e001      	b.n	80034b0 <HAL_I2S_Init+0x1a8>
 80034ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6812      	ldr	r2, [r2, #0]
 80034b6:	4932      	ldr	r1, [pc, #200]	; (8003580 <HAL_I2S_Init+0x278>)
 80034b8:	428a      	cmp	r2, r1
 80034ba:	d101      	bne.n	80034c0 <HAL_I2S_Init+0x1b8>
 80034bc:	4a31      	ldr	r2, [pc, #196]	; (8003584 <HAL_I2S_Init+0x27c>)
 80034be:	e001      	b.n	80034c4 <HAL_I2S_Init+0x1bc>
 80034c0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80034c4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80034c8:	f023 030f 	bic.w	r3, r3, #15
 80034cc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a2b      	ldr	r2, [pc, #172]	; (8003580 <HAL_I2S_Init+0x278>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d101      	bne.n	80034dc <HAL_I2S_Init+0x1d4>
 80034d8:	4b2a      	ldr	r3, [pc, #168]	; (8003584 <HAL_I2S_Init+0x27c>)
 80034da:	e001      	b.n	80034e0 <HAL_I2S_Init+0x1d8>
 80034dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034e0:	2202      	movs	r2, #2
 80034e2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a25      	ldr	r2, [pc, #148]	; (8003580 <HAL_I2S_Init+0x278>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d101      	bne.n	80034f2 <HAL_I2S_Init+0x1ea>
 80034ee:	4b25      	ldr	r3, [pc, #148]	; (8003584 <HAL_I2S_Init+0x27c>)
 80034f0:	e001      	b.n	80034f6 <HAL_I2S_Init+0x1ee>
 80034f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034f6:	69db      	ldr	r3, [r3, #28]
 80034f8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003502:	d003      	beq.n	800350c <HAL_I2S_Init+0x204>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d103      	bne.n	8003514 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800350c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003510:	613b      	str	r3, [r7, #16]
 8003512:	e001      	b.n	8003518 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003514:	2300      	movs	r3, #0
 8003516:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003522:	4313      	orrs	r3, r2
 8003524:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800352c:	4313      	orrs	r3, r2
 800352e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003536:	4313      	orrs	r3, r2
 8003538:	b29a      	uxth	r2, r3
 800353a:	897b      	ldrh	r3, [r7, #10]
 800353c:	4313      	orrs	r3, r2
 800353e:	b29b      	uxth	r3, r3
 8003540:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003544:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a0d      	ldr	r2, [pc, #52]	; (8003580 <HAL_I2S_Init+0x278>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d101      	bne.n	8003554 <HAL_I2S_Init+0x24c>
 8003550:	4b0c      	ldr	r3, [pc, #48]	; (8003584 <HAL_I2S_Init+0x27c>)
 8003552:	e001      	b.n	8003558 <HAL_I2S_Init+0x250>
 8003554:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003558:	897a      	ldrh	r2, [r7, #10]
 800355a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3720      	adds	r7, #32
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	0800367f 	.word	0x0800367f
 8003578:	cccccccd 	.word	0xcccccccd
 800357c:	08003795 	.word	0x08003795
 8003580:	40003800 	.word	0x40003800
 8003584:	40003400 	.word	0x40003400

08003588 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	881a      	ldrh	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035dc:	1c9a      	adds	r2, r3, #2
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10e      	bne.n	8003618 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003608:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7ff ffb8 	bl	8003588 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003618:	bf00      	nop
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68da      	ldr	r2, [r3, #12]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003632:	b292      	uxth	r2, r2
 8003634:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363a:	1c9a      	adds	r2, r3, #2
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003644:	b29b      	uxth	r3, r3
 8003646:	3b01      	subs	r3, #1
 8003648:	b29a      	uxth	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003652:	b29b      	uxth	r3, r3
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10e      	bne.n	8003676 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003666:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f7ff ff93 	bl	800359c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003676:	bf00      	nop
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b086      	sub	sp, #24
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b04      	cmp	r3, #4
 8003698:	d13a      	bne.n	8003710 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d109      	bne.n	80036b8 <I2S_IRQHandler+0x3a>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ae:	2b40      	cmp	r3, #64	; 0x40
 80036b0:	d102      	bne.n	80036b8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7ff ffb4 	bl	8003620 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036be:	2b40      	cmp	r3, #64	; 0x40
 80036c0:	d126      	bne.n	8003710 <I2S_IRQHandler+0x92>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f003 0320 	and.w	r3, r3, #32
 80036cc:	2b20      	cmp	r3, #32
 80036ce:	d11f      	bne.n	8003710 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036de:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80036e0:	2300      	movs	r3, #0
 80036e2:	613b      	str	r3, [r7, #16]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	613b      	str	r3, [r7, #16]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	613b      	str	r3, [r7, #16]
 80036f4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003702:	f043 0202 	orr.w	r2, r3, #2
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7ff ff50 	bl	80035b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b03      	cmp	r3, #3
 800371a:	d136      	bne.n	800378a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b02      	cmp	r3, #2
 8003724:	d109      	bne.n	800373a <I2S_IRQHandler+0xbc>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003730:	2b80      	cmp	r3, #128	; 0x80
 8003732:	d102      	bne.n	800373a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f7ff ff45 	bl	80035c4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f003 0308 	and.w	r3, r3, #8
 8003740:	2b08      	cmp	r3, #8
 8003742:	d122      	bne.n	800378a <I2S_IRQHandler+0x10c>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f003 0320 	and.w	r3, r3, #32
 800374e:	2b20      	cmp	r3, #32
 8003750:	d11b      	bne.n	800378a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003760:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003762:	2300      	movs	r3, #0
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	60fb      	str	r3, [r7, #12]
 800376e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377c:	f043 0204 	orr.w	r2, r3, #4
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7ff ff13 	bl	80035b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800378a:	bf00      	nop
 800378c:	3718      	adds	r7, #24
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
	...

08003794 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b088      	sub	sp, #32
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a92      	ldr	r2, [pc, #584]	; (80039f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d101      	bne.n	80037b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80037ae:	4b92      	ldr	r3, [pc, #584]	; (80039f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037b0:	e001      	b.n	80037b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80037b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a8b      	ldr	r2, [pc, #556]	; (80039f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d101      	bne.n	80037d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80037cc:	4b8a      	ldr	r3, [pc, #552]	; (80039f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037ce:	e001      	b.n	80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80037d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037e0:	d004      	beq.n	80037ec <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f040 8099 	bne.w	800391e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d107      	bne.n	8003806 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 f925 	bl	8003a50 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b01      	cmp	r3, #1
 800380e:	d107      	bne.n	8003820 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003816:	2b00      	cmp	r3, #0
 8003818:	d002      	beq.n	8003820 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f9c8 	bl	8003bb0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003826:	2b40      	cmp	r3, #64	; 0x40
 8003828:	d13a      	bne.n	80038a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f003 0320 	and.w	r3, r3, #32
 8003830:	2b00      	cmp	r3, #0
 8003832:	d035      	beq.n	80038a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a6e      	ldr	r2, [pc, #440]	; (80039f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d101      	bne.n	8003842 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800383e:	4b6e      	ldr	r3, [pc, #440]	; (80039f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003840:	e001      	b.n	8003846 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003842:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4969      	ldr	r1, [pc, #420]	; (80039f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800384e:	428b      	cmp	r3, r1
 8003850:	d101      	bne.n	8003856 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003852:	4b69      	ldr	r3, [pc, #420]	; (80039f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003854:	e001      	b.n	800385a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003856:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800385a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800385e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800386e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003870:	2300      	movs	r3, #0
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	60fb      	str	r3, [r7, #12]
 8003884:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003892:	f043 0202 	orr.w	r2, r3, #2
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7ff fe88 	bl	80035b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f003 0308 	and.w	r3, r3, #8
 80038a6:	2b08      	cmp	r3, #8
 80038a8:	f040 80c3 	bne.w	8003a32 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f003 0320 	and.w	r3, r3, #32
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f000 80bd 	beq.w	8003a32 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038c6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a49      	ldr	r2, [pc, #292]	; (80039f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d101      	bne.n	80038d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80038d2:	4b49      	ldr	r3, [pc, #292]	; (80039f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038d4:	e001      	b.n	80038da <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80038d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4944      	ldr	r1, [pc, #272]	; (80039f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038e2:	428b      	cmp	r3, r1
 80038e4:	d101      	bne.n	80038ea <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80038e6:	4b44      	ldr	r3, [pc, #272]	; (80039f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038e8:	e001      	b.n	80038ee <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80038ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038f2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80038f4:	2300      	movs	r3, #0
 80038f6:	60bb      	str	r3, [r7, #8]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	60bb      	str	r3, [r7, #8]
 8003900:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390e:	f043 0204 	orr.w	r2, r3, #4
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7ff fe4a 	bl	80035b0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800391c:	e089      	b.n	8003a32 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b02      	cmp	r3, #2
 8003926:	d107      	bne.n	8003938 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392e:	2b00      	cmp	r3, #0
 8003930:	d002      	beq.n	8003938 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f8be 	bl	8003ab4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b01      	cmp	r3, #1
 8003940:	d107      	bne.n	8003952 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f8fd 	bl	8003b4c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003958:	2b40      	cmp	r3, #64	; 0x40
 800395a:	d12f      	bne.n	80039bc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	f003 0320 	and.w	r3, r3, #32
 8003962:	2b00      	cmp	r3, #0
 8003964:	d02a      	beq.n	80039bc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003974:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a1e      	ldr	r2, [pc, #120]	; (80039f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d101      	bne.n	8003984 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003980:	4b1d      	ldr	r3, [pc, #116]	; (80039f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003982:	e001      	b.n	8003988 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003984:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4919      	ldr	r1, [pc, #100]	; (80039f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003990:	428b      	cmp	r3, r1
 8003992:	d101      	bne.n	8003998 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003994:	4b18      	ldr	r3, [pc, #96]	; (80039f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003996:	e001      	b.n	800399c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003998:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800399c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039a0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ae:	f043 0202 	orr.w	r2, r3, #2
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7ff fdfa 	bl	80035b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b08      	cmp	r3, #8
 80039c4:	d136      	bne.n	8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	f003 0320 	and.w	r3, r3, #32
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d031      	beq.n	8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a07      	ldr	r2, [pc, #28]	; (80039f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d101      	bne.n	80039de <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80039da:	4b07      	ldr	r3, [pc, #28]	; (80039f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039dc:	e001      	b.n	80039e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80039de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4902      	ldr	r1, [pc, #8]	; (80039f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039ea:	428b      	cmp	r3, r1
 80039ec:	d106      	bne.n	80039fc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80039ee:	4b02      	ldr	r3, [pc, #8]	; (80039f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039f0:	e006      	b.n	8003a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80039f2:	bf00      	nop
 80039f4:	40003800 	.word	0x40003800
 80039f8:	40003400 	.word	0x40003400
 80039fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a00:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a04:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a14:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a22:	f043 0204 	orr.w	r2, r3, #4
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7ff fdc0 	bl	80035b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a30:	e000      	b.n	8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a32:	bf00      	nop
}
 8003a34:	bf00      	nop
 8003a36:	3720      	adds	r7, #32
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	1c99      	adds	r1, r3, #2
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6251      	str	r1, [r2, #36]	; 0x24
 8003a62:	881a      	ldrh	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	3b01      	subs	r3, #1
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d113      	bne.n	8003aaa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a90:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d106      	bne.n	8003aaa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f7ff ffc9 	bl	8003a3c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003aaa:	bf00      	nop
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
	...

08003ab4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	1c99      	adds	r1, r3, #2
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6251      	str	r1, [r2, #36]	; 0x24
 8003ac6:	8819      	ldrh	r1, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a1d      	ldr	r2, [pc, #116]	; (8003b44 <I2SEx_TxISR_I2SExt+0x90>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d101      	bne.n	8003ad6 <I2SEx_TxISR_I2SExt+0x22>
 8003ad2:	4b1d      	ldr	r3, [pc, #116]	; (8003b48 <I2SEx_TxISR_I2SExt+0x94>)
 8003ad4:	e001      	b.n	8003ada <I2SEx_TxISR_I2SExt+0x26>
 8003ad6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ada:	460a      	mov	r2, r1
 8003adc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d121      	bne.n	8003b3a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a12      	ldr	r2, [pc, #72]	; (8003b44 <I2SEx_TxISR_I2SExt+0x90>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d101      	bne.n	8003b04 <I2SEx_TxISR_I2SExt+0x50>
 8003b00:	4b11      	ldr	r3, [pc, #68]	; (8003b48 <I2SEx_TxISR_I2SExt+0x94>)
 8003b02:	e001      	b.n	8003b08 <I2SEx_TxISR_I2SExt+0x54>
 8003b04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	490d      	ldr	r1, [pc, #52]	; (8003b44 <I2SEx_TxISR_I2SExt+0x90>)
 8003b10:	428b      	cmp	r3, r1
 8003b12:	d101      	bne.n	8003b18 <I2SEx_TxISR_I2SExt+0x64>
 8003b14:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <I2SEx_TxISR_I2SExt+0x94>)
 8003b16:	e001      	b.n	8003b1c <I2SEx_TxISR_I2SExt+0x68>
 8003b18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b20:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d106      	bne.n	8003b3a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f7ff ff81 	bl	8003a3c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b3a:	bf00      	nop
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40003800 	.word	0x40003800
 8003b48:	40003400 	.word	0x40003400

08003b4c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68d8      	ldr	r0, [r3, #12]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5e:	1c99      	adds	r1, r3, #2
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b64:	b282      	uxth	r2, r0
 8003b66:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d113      	bne.n	8003ba8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	685a      	ldr	r2, [r3, #4]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b8e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d106      	bne.n	8003ba8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7ff ff4a 	bl	8003a3c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ba8:	bf00      	nop
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a20      	ldr	r2, [pc, #128]	; (8003c40 <I2SEx_RxISR_I2SExt+0x90>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d101      	bne.n	8003bc6 <I2SEx_RxISR_I2SExt+0x16>
 8003bc2:	4b20      	ldr	r3, [pc, #128]	; (8003c44 <I2SEx_RxISR_I2SExt+0x94>)
 8003bc4:	e001      	b.n	8003bca <I2SEx_RxISR_I2SExt+0x1a>
 8003bc6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bca:	68d8      	ldr	r0, [r3, #12]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd0:	1c99      	adds	r1, r3, #2
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003bd6:	b282      	uxth	r2, r0
 8003bd8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	3b01      	subs	r3, #1
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d121      	bne.n	8003c36 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a12      	ldr	r2, [pc, #72]	; (8003c40 <I2SEx_RxISR_I2SExt+0x90>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d101      	bne.n	8003c00 <I2SEx_RxISR_I2SExt+0x50>
 8003bfc:	4b11      	ldr	r3, [pc, #68]	; (8003c44 <I2SEx_RxISR_I2SExt+0x94>)
 8003bfe:	e001      	b.n	8003c04 <I2SEx_RxISR_I2SExt+0x54>
 8003c00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	490d      	ldr	r1, [pc, #52]	; (8003c40 <I2SEx_RxISR_I2SExt+0x90>)
 8003c0c:	428b      	cmp	r3, r1
 8003c0e:	d101      	bne.n	8003c14 <I2SEx_RxISR_I2SExt+0x64>
 8003c10:	4b0c      	ldr	r3, [pc, #48]	; (8003c44 <I2SEx_RxISR_I2SExt+0x94>)
 8003c12:	e001      	b.n	8003c18 <I2SEx_RxISR_I2SExt+0x68>
 8003c14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c18:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c1c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d106      	bne.n	8003c36 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7ff ff03 	bl	8003a3c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c36:	bf00      	nop
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	40003800 	.word	0x40003800
 8003c44:	40003400 	.word	0x40003400

08003c48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e267      	b.n	800412a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d075      	beq.n	8003d52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c66:	4b88      	ldr	r3, [pc, #544]	; (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 030c 	and.w	r3, r3, #12
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d00c      	beq.n	8003c8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c72:	4b85      	ldr	r3, [pc, #532]	; (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c7a:	2b08      	cmp	r3, #8
 8003c7c:	d112      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c7e:	4b82      	ldr	r3, [pc, #520]	; (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c8a:	d10b      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c8c:	4b7e      	ldr	r3, [pc, #504]	; (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d05b      	beq.n	8003d50 <HAL_RCC_OscConfig+0x108>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d157      	bne.n	8003d50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e242      	b.n	800412a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cac:	d106      	bne.n	8003cbc <HAL_RCC_OscConfig+0x74>
 8003cae:	4b76      	ldr	r3, [pc, #472]	; (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a75      	ldr	r2, [pc, #468]	; (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	e01d      	b.n	8003cf8 <HAL_RCC_OscConfig+0xb0>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cc4:	d10c      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x98>
 8003cc6:	4b70      	ldr	r3, [pc, #448]	; (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a6f      	ldr	r2, [pc, #444]	; (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003ccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cd0:	6013      	str	r3, [r2, #0]
 8003cd2:	4b6d      	ldr	r3, [pc, #436]	; (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a6c      	ldr	r2, [pc, #432]	; (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cdc:	6013      	str	r3, [r2, #0]
 8003cde:	e00b      	b.n	8003cf8 <HAL_RCC_OscConfig+0xb0>
 8003ce0:	4b69      	ldr	r3, [pc, #420]	; (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a68      	ldr	r2, [pc, #416]	; (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cea:	6013      	str	r3, [r2, #0]
 8003cec:	4b66      	ldr	r3, [pc, #408]	; (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a65      	ldr	r2, [pc, #404]	; (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003cf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d013      	beq.n	8003d28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d00:	f7fd fabc 	bl	800127c <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d08:	f7fd fab8 	bl	800127c <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b64      	cmp	r3, #100	; 0x64
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e207      	b.n	800412a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d1a:	4b5b      	ldr	r3, [pc, #364]	; (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d0f0      	beq.n	8003d08 <HAL_RCC_OscConfig+0xc0>
 8003d26:	e014      	b.n	8003d52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d28:	f7fd faa8 	bl	800127c <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d30:	f7fd faa4 	bl	800127c <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b64      	cmp	r3, #100	; 0x64
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e1f3      	b.n	800412a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d42:	4b51      	ldr	r3, [pc, #324]	; (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1f0      	bne.n	8003d30 <HAL_RCC_OscConfig+0xe8>
 8003d4e:	e000      	b.n	8003d52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d063      	beq.n	8003e26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d5e:	4b4a      	ldr	r3, [pc, #296]	; (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f003 030c 	and.w	r3, r3, #12
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00b      	beq.n	8003d82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d6a:	4b47      	ldr	r3, [pc, #284]	; (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d72:	2b08      	cmp	r3, #8
 8003d74:	d11c      	bne.n	8003db0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d76:	4b44      	ldr	r3, [pc, #272]	; (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d116      	bne.n	8003db0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d82:	4b41      	ldr	r3, [pc, #260]	; (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d005      	beq.n	8003d9a <HAL_RCC_OscConfig+0x152>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d001      	beq.n	8003d9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e1c7      	b.n	800412a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d9a:	4b3b      	ldr	r3, [pc, #236]	; (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	4937      	ldr	r1, [pc, #220]	; (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dae:	e03a      	b.n	8003e26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d020      	beq.n	8003dfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003db8:	4b34      	ldr	r3, [pc, #208]	; (8003e8c <HAL_RCC_OscConfig+0x244>)
 8003dba:	2201      	movs	r2, #1
 8003dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbe:	f7fd fa5d 	bl	800127c <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dc6:	f7fd fa59 	bl	800127c <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e1a8      	b.n	800412a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd8:	4b2b      	ldr	r3, [pc, #172]	; (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0f0      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de4:	4b28      	ldr	r3, [pc, #160]	; (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	4925      	ldr	r1, [pc, #148]	; (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	600b      	str	r3, [r1, #0]
 8003df8:	e015      	b.n	8003e26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dfa:	4b24      	ldr	r3, [pc, #144]	; (8003e8c <HAL_RCC_OscConfig+0x244>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e00:	f7fd fa3c 	bl	800127c <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e08:	f7fd fa38 	bl	800127c <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e187      	b.n	800412a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e1a:	4b1b      	ldr	r3, [pc, #108]	; (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1f0      	bne.n	8003e08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0308 	and.w	r3, r3, #8
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d036      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d016      	beq.n	8003e68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e3a:	4b15      	ldr	r3, [pc, #84]	; (8003e90 <HAL_RCC_OscConfig+0x248>)
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e40:	f7fd fa1c 	bl	800127c <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e48:	f7fd fa18 	bl	800127c <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e167      	b.n	800412a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e5a:	4b0b      	ldr	r3, [pc, #44]	; (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d0f0      	beq.n	8003e48 <HAL_RCC_OscConfig+0x200>
 8003e66:	e01b      	b.n	8003ea0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e68:	4b09      	ldr	r3, [pc, #36]	; (8003e90 <HAL_RCC_OscConfig+0x248>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e6e:	f7fd fa05 	bl	800127c <HAL_GetTick>
 8003e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e74:	e00e      	b.n	8003e94 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e76:	f7fd fa01 	bl	800127c <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d907      	bls.n	8003e94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e150      	b.n	800412a <HAL_RCC_OscConfig+0x4e2>
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	42470000 	.word	0x42470000
 8003e90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e94:	4b88      	ldr	r3, [pc, #544]	; (80040b8 <HAL_RCC_OscConfig+0x470>)
 8003e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1ea      	bne.n	8003e76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 8097 	beq.w	8003fdc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eb2:	4b81      	ldr	r3, [pc, #516]	; (80040b8 <HAL_RCC_OscConfig+0x470>)
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10f      	bne.n	8003ede <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60bb      	str	r3, [r7, #8]
 8003ec2:	4b7d      	ldr	r3, [pc, #500]	; (80040b8 <HAL_RCC_OscConfig+0x470>)
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	4a7c      	ldr	r2, [pc, #496]	; (80040b8 <HAL_RCC_OscConfig+0x470>)
 8003ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ece:	4b7a      	ldr	r3, [pc, #488]	; (80040b8 <HAL_RCC_OscConfig+0x470>)
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed6:	60bb      	str	r3, [r7, #8]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eda:	2301      	movs	r3, #1
 8003edc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ede:	4b77      	ldr	r3, [pc, #476]	; (80040bc <HAL_RCC_OscConfig+0x474>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d118      	bne.n	8003f1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eea:	4b74      	ldr	r3, [pc, #464]	; (80040bc <HAL_RCC_OscConfig+0x474>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a73      	ldr	r2, [pc, #460]	; (80040bc <HAL_RCC_OscConfig+0x474>)
 8003ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ef6:	f7fd f9c1 	bl	800127c <HAL_GetTick>
 8003efa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003efc:	e008      	b.n	8003f10 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003efe:	f7fd f9bd 	bl	800127c <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e10c      	b.n	800412a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f10:	4b6a      	ldr	r3, [pc, #424]	; (80040bc <HAL_RCC_OscConfig+0x474>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d0f0      	beq.n	8003efe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d106      	bne.n	8003f32 <HAL_RCC_OscConfig+0x2ea>
 8003f24:	4b64      	ldr	r3, [pc, #400]	; (80040b8 <HAL_RCC_OscConfig+0x470>)
 8003f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f28:	4a63      	ldr	r2, [pc, #396]	; (80040b8 <HAL_RCC_OscConfig+0x470>)
 8003f2a:	f043 0301 	orr.w	r3, r3, #1
 8003f2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f30:	e01c      	b.n	8003f6c <HAL_RCC_OscConfig+0x324>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	2b05      	cmp	r3, #5
 8003f38:	d10c      	bne.n	8003f54 <HAL_RCC_OscConfig+0x30c>
 8003f3a:	4b5f      	ldr	r3, [pc, #380]	; (80040b8 <HAL_RCC_OscConfig+0x470>)
 8003f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3e:	4a5e      	ldr	r2, [pc, #376]	; (80040b8 <HAL_RCC_OscConfig+0x470>)
 8003f40:	f043 0304 	orr.w	r3, r3, #4
 8003f44:	6713      	str	r3, [r2, #112]	; 0x70
 8003f46:	4b5c      	ldr	r3, [pc, #368]	; (80040b8 <HAL_RCC_OscConfig+0x470>)
 8003f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4a:	4a5b      	ldr	r2, [pc, #364]	; (80040b8 <HAL_RCC_OscConfig+0x470>)
 8003f4c:	f043 0301 	orr.w	r3, r3, #1
 8003f50:	6713      	str	r3, [r2, #112]	; 0x70
 8003f52:	e00b      	b.n	8003f6c <HAL_RCC_OscConfig+0x324>
 8003f54:	4b58      	ldr	r3, [pc, #352]	; (80040b8 <HAL_RCC_OscConfig+0x470>)
 8003f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f58:	4a57      	ldr	r2, [pc, #348]	; (80040b8 <HAL_RCC_OscConfig+0x470>)
 8003f5a:	f023 0301 	bic.w	r3, r3, #1
 8003f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f60:	4b55      	ldr	r3, [pc, #340]	; (80040b8 <HAL_RCC_OscConfig+0x470>)
 8003f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f64:	4a54      	ldr	r2, [pc, #336]	; (80040b8 <HAL_RCC_OscConfig+0x470>)
 8003f66:	f023 0304 	bic.w	r3, r3, #4
 8003f6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d015      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f74:	f7fd f982 	bl	800127c <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f7a:	e00a      	b.n	8003f92 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f7c:	f7fd f97e 	bl	800127c <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e0cb      	b.n	800412a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f92:	4b49      	ldr	r3, [pc, #292]	; (80040b8 <HAL_RCC_OscConfig+0x470>)
 8003f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0ee      	beq.n	8003f7c <HAL_RCC_OscConfig+0x334>
 8003f9e:	e014      	b.n	8003fca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fa0:	f7fd f96c 	bl	800127c <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fa6:	e00a      	b.n	8003fbe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fa8:	f7fd f968 	bl	800127c <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e0b5      	b.n	800412a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fbe:	4b3e      	ldr	r3, [pc, #248]	; (80040b8 <HAL_RCC_OscConfig+0x470>)
 8003fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1ee      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fca:	7dfb      	ldrb	r3, [r7, #23]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d105      	bne.n	8003fdc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fd0:	4b39      	ldr	r3, [pc, #228]	; (80040b8 <HAL_RCC_OscConfig+0x470>)
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd4:	4a38      	ldr	r2, [pc, #224]	; (80040b8 <HAL_RCC_OscConfig+0x470>)
 8003fd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fda:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 80a1 	beq.w	8004128 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fe6:	4b34      	ldr	r3, [pc, #208]	; (80040b8 <HAL_RCC_OscConfig+0x470>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 030c 	and.w	r3, r3, #12
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	d05c      	beq.n	80040ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d141      	bne.n	800407e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ffa:	4b31      	ldr	r3, [pc, #196]	; (80040c0 <HAL_RCC_OscConfig+0x478>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004000:	f7fd f93c 	bl	800127c <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004006:	e008      	b.n	800401a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004008:	f7fd f938 	bl	800127c <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b02      	cmp	r3, #2
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e087      	b.n	800412a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800401a:	4b27      	ldr	r3, [pc, #156]	; (80040b8 <HAL_RCC_OscConfig+0x470>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1f0      	bne.n	8004008 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	69da      	ldr	r2, [r3, #28]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	431a      	orrs	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	019b      	lsls	r3, r3, #6
 8004036:	431a      	orrs	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403c:	085b      	lsrs	r3, r3, #1
 800403e:	3b01      	subs	r3, #1
 8004040:	041b      	lsls	r3, r3, #16
 8004042:	431a      	orrs	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004048:	061b      	lsls	r3, r3, #24
 800404a:	491b      	ldr	r1, [pc, #108]	; (80040b8 <HAL_RCC_OscConfig+0x470>)
 800404c:	4313      	orrs	r3, r2
 800404e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004050:	4b1b      	ldr	r3, [pc, #108]	; (80040c0 <HAL_RCC_OscConfig+0x478>)
 8004052:	2201      	movs	r2, #1
 8004054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004056:	f7fd f911 	bl	800127c <HAL_GetTick>
 800405a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800405c:	e008      	b.n	8004070 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800405e:	f7fd f90d 	bl	800127c <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d901      	bls.n	8004070 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e05c      	b.n	800412a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004070:	4b11      	ldr	r3, [pc, #68]	; (80040b8 <HAL_RCC_OscConfig+0x470>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d0f0      	beq.n	800405e <HAL_RCC_OscConfig+0x416>
 800407c:	e054      	b.n	8004128 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800407e:	4b10      	ldr	r3, [pc, #64]	; (80040c0 <HAL_RCC_OscConfig+0x478>)
 8004080:	2200      	movs	r2, #0
 8004082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004084:	f7fd f8fa 	bl	800127c <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800408c:	f7fd f8f6 	bl	800127c <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e045      	b.n	800412a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800409e:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <HAL_RCC_OscConfig+0x470>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1f0      	bne.n	800408c <HAL_RCC_OscConfig+0x444>
 80040aa:	e03d      	b.n	8004128 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d107      	bne.n	80040c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e038      	b.n	800412a <HAL_RCC_OscConfig+0x4e2>
 80040b8:	40023800 	.word	0x40023800
 80040bc:	40007000 	.word	0x40007000
 80040c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040c4:	4b1b      	ldr	r3, [pc, #108]	; (8004134 <HAL_RCC_OscConfig+0x4ec>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d028      	beq.n	8004124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040dc:	429a      	cmp	r2, r3
 80040de:	d121      	bne.n	8004124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d11a      	bne.n	8004124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040f4:	4013      	ands	r3, r2
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d111      	bne.n	8004124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410a:	085b      	lsrs	r3, r3, #1
 800410c:	3b01      	subs	r3, #1
 800410e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004110:	429a      	cmp	r2, r3
 8004112:	d107      	bne.n	8004124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004120:	429a      	cmp	r2, r3
 8004122:	d001      	beq.n	8004128 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e000      	b.n	800412a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3718      	adds	r7, #24
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	40023800 	.word	0x40023800

08004138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e0cc      	b.n	80042e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800414c:	4b68      	ldr	r3, [pc, #416]	; (80042f0 <HAL_RCC_ClockConfig+0x1b8>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	d90c      	bls.n	8004174 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415a:	4b65      	ldr	r3, [pc, #404]	; (80042f0 <HAL_RCC_ClockConfig+0x1b8>)
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	b2d2      	uxtb	r2, r2
 8004160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004162:	4b63      	ldr	r3, [pc, #396]	; (80042f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0307 	and.w	r3, r3, #7
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	429a      	cmp	r2, r3
 800416e:	d001      	beq.n	8004174 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e0b8      	b.n	80042e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d020      	beq.n	80041c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0304 	and.w	r3, r3, #4
 8004188:	2b00      	cmp	r3, #0
 800418a:	d005      	beq.n	8004198 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800418c:	4b59      	ldr	r3, [pc, #356]	; (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	4a58      	ldr	r2, [pc, #352]	; (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004192:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004196:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0308 	and.w	r3, r3, #8
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d005      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041a4:	4b53      	ldr	r3, [pc, #332]	; (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	4a52      	ldr	r2, [pc, #328]	; (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 80041aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041b0:	4b50      	ldr	r3, [pc, #320]	; (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	494d      	ldr	r1, [pc, #308]	; (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d044      	beq.n	8004258 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d107      	bne.n	80041e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d6:	4b47      	ldr	r3, [pc, #284]	; (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d119      	bne.n	8004216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e07f      	b.n	80042e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d003      	beq.n	80041f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041f2:	2b03      	cmp	r3, #3
 80041f4:	d107      	bne.n	8004206 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041f6:	4b3f      	ldr	r3, [pc, #252]	; (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d109      	bne.n	8004216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e06f      	b.n	80042e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004206:	4b3b      	ldr	r3, [pc, #236]	; (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e067      	b.n	80042e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004216:	4b37      	ldr	r3, [pc, #220]	; (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f023 0203 	bic.w	r2, r3, #3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	4934      	ldr	r1, [pc, #208]	; (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004224:	4313      	orrs	r3, r2
 8004226:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004228:	f7fd f828 	bl	800127c <HAL_GetTick>
 800422c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800422e:	e00a      	b.n	8004246 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004230:	f7fd f824 	bl	800127c <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	f241 3288 	movw	r2, #5000	; 0x1388
 800423e:	4293      	cmp	r3, r2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e04f      	b.n	80042e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004246:	4b2b      	ldr	r3, [pc, #172]	; (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f003 020c 	and.w	r2, r3, #12
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	429a      	cmp	r2, r3
 8004256:	d1eb      	bne.n	8004230 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004258:	4b25      	ldr	r3, [pc, #148]	; (80042f0 <HAL_RCC_ClockConfig+0x1b8>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	429a      	cmp	r2, r3
 8004264:	d20c      	bcs.n	8004280 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004266:	4b22      	ldr	r3, [pc, #136]	; (80042f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800426e:	4b20      	ldr	r3, [pc, #128]	; (80042f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	429a      	cmp	r2, r3
 800427a:	d001      	beq.n	8004280 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e032      	b.n	80042e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	2b00      	cmp	r3, #0
 800428a:	d008      	beq.n	800429e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800428c:	4b19      	ldr	r3, [pc, #100]	; (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	4916      	ldr	r1, [pc, #88]	; (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 800429a:	4313      	orrs	r3, r2
 800429c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0308 	and.w	r3, r3, #8
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d009      	beq.n	80042be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042aa:	4b12      	ldr	r3, [pc, #72]	; (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	490e      	ldr	r1, [pc, #56]	; (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042be:	f000 f821 	bl	8004304 <HAL_RCC_GetSysClockFreq>
 80042c2:	4602      	mov	r2, r0
 80042c4:	4b0b      	ldr	r3, [pc, #44]	; (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	091b      	lsrs	r3, r3, #4
 80042ca:	f003 030f 	and.w	r3, r3, #15
 80042ce:	490a      	ldr	r1, [pc, #40]	; (80042f8 <HAL_RCC_ClockConfig+0x1c0>)
 80042d0:	5ccb      	ldrb	r3, [r1, r3]
 80042d2:	fa22 f303 	lsr.w	r3, r2, r3
 80042d6:	4a09      	ldr	r2, [pc, #36]	; (80042fc <HAL_RCC_ClockConfig+0x1c4>)
 80042d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042da:	4b09      	ldr	r3, [pc, #36]	; (8004300 <HAL_RCC_ClockConfig+0x1c8>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fc ff88 	bl	80011f4 <HAL_InitTick>

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	40023c00 	.word	0x40023c00
 80042f4:	40023800 	.word	0x40023800
 80042f8:	08009a30 	.word	0x08009a30
 80042fc:	20000000 	.word	0x20000000
 8004300:	20000004 	.word	0x20000004

08004304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004308:	b094      	sub	sp, #80	; 0x50
 800430a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800430c:	2300      	movs	r3, #0
 800430e:	647b      	str	r3, [r7, #68]	; 0x44
 8004310:	2300      	movs	r3, #0
 8004312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004314:	2300      	movs	r3, #0
 8004316:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004318:	2300      	movs	r3, #0
 800431a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800431c:	4b79      	ldr	r3, [pc, #484]	; (8004504 <HAL_RCC_GetSysClockFreq+0x200>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f003 030c 	and.w	r3, r3, #12
 8004324:	2b08      	cmp	r3, #8
 8004326:	d00d      	beq.n	8004344 <HAL_RCC_GetSysClockFreq+0x40>
 8004328:	2b08      	cmp	r3, #8
 800432a:	f200 80e1 	bhi.w	80044f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800432e:	2b00      	cmp	r3, #0
 8004330:	d002      	beq.n	8004338 <HAL_RCC_GetSysClockFreq+0x34>
 8004332:	2b04      	cmp	r3, #4
 8004334:	d003      	beq.n	800433e <HAL_RCC_GetSysClockFreq+0x3a>
 8004336:	e0db      	b.n	80044f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004338:	4b73      	ldr	r3, [pc, #460]	; (8004508 <HAL_RCC_GetSysClockFreq+0x204>)
 800433a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800433c:	e0db      	b.n	80044f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800433e:	4b73      	ldr	r3, [pc, #460]	; (800450c <HAL_RCC_GetSysClockFreq+0x208>)
 8004340:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004342:	e0d8      	b.n	80044f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004344:	4b6f      	ldr	r3, [pc, #444]	; (8004504 <HAL_RCC_GetSysClockFreq+0x200>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800434c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800434e:	4b6d      	ldr	r3, [pc, #436]	; (8004504 <HAL_RCC_GetSysClockFreq+0x200>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d063      	beq.n	8004422 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800435a:	4b6a      	ldr	r3, [pc, #424]	; (8004504 <HAL_RCC_GetSysClockFreq+0x200>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	099b      	lsrs	r3, r3, #6
 8004360:	2200      	movs	r2, #0
 8004362:	63bb      	str	r3, [r7, #56]	; 0x38
 8004364:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800436c:	633b      	str	r3, [r7, #48]	; 0x30
 800436e:	2300      	movs	r3, #0
 8004370:	637b      	str	r3, [r7, #52]	; 0x34
 8004372:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004376:	4622      	mov	r2, r4
 8004378:	462b      	mov	r3, r5
 800437a:	f04f 0000 	mov.w	r0, #0
 800437e:	f04f 0100 	mov.w	r1, #0
 8004382:	0159      	lsls	r1, r3, #5
 8004384:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004388:	0150      	lsls	r0, r2, #5
 800438a:	4602      	mov	r2, r0
 800438c:	460b      	mov	r3, r1
 800438e:	4621      	mov	r1, r4
 8004390:	1a51      	subs	r1, r2, r1
 8004392:	6139      	str	r1, [r7, #16]
 8004394:	4629      	mov	r1, r5
 8004396:	eb63 0301 	sbc.w	r3, r3, r1
 800439a:	617b      	str	r3, [r7, #20]
 800439c:	f04f 0200 	mov.w	r2, #0
 80043a0:	f04f 0300 	mov.w	r3, #0
 80043a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043a8:	4659      	mov	r1, fp
 80043aa:	018b      	lsls	r3, r1, #6
 80043ac:	4651      	mov	r1, sl
 80043ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043b2:	4651      	mov	r1, sl
 80043b4:	018a      	lsls	r2, r1, #6
 80043b6:	4651      	mov	r1, sl
 80043b8:	ebb2 0801 	subs.w	r8, r2, r1
 80043bc:	4659      	mov	r1, fp
 80043be:	eb63 0901 	sbc.w	r9, r3, r1
 80043c2:	f04f 0200 	mov.w	r2, #0
 80043c6:	f04f 0300 	mov.w	r3, #0
 80043ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043d6:	4690      	mov	r8, r2
 80043d8:	4699      	mov	r9, r3
 80043da:	4623      	mov	r3, r4
 80043dc:	eb18 0303 	adds.w	r3, r8, r3
 80043e0:	60bb      	str	r3, [r7, #8]
 80043e2:	462b      	mov	r3, r5
 80043e4:	eb49 0303 	adc.w	r3, r9, r3
 80043e8:	60fb      	str	r3, [r7, #12]
 80043ea:	f04f 0200 	mov.w	r2, #0
 80043ee:	f04f 0300 	mov.w	r3, #0
 80043f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043f6:	4629      	mov	r1, r5
 80043f8:	024b      	lsls	r3, r1, #9
 80043fa:	4621      	mov	r1, r4
 80043fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004400:	4621      	mov	r1, r4
 8004402:	024a      	lsls	r2, r1, #9
 8004404:	4610      	mov	r0, r2
 8004406:	4619      	mov	r1, r3
 8004408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800440a:	2200      	movs	r2, #0
 800440c:	62bb      	str	r3, [r7, #40]	; 0x28
 800440e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004410:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004414:	f7fb fed8 	bl	80001c8 <__aeabi_uldivmod>
 8004418:	4602      	mov	r2, r0
 800441a:	460b      	mov	r3, r1
 800441c:	4613      	mov	r3, r2
 800441e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004420:	e058      	b.n	80044d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004422:	4b38      	ldr	r3, [pc, #224]	; (8004504 <HAL_RCC_GetSysClockFreq+0x200>)
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	099b      	lsrs	r3, r3, #6
 8004428:	2200      	movs	r2, #0
 800442a:	4618      	mov	r0, r3
 800442c:	4611      	mov	r1, r2
 800442e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004432:	623b      	str	r3, [r7, #32]
 8004434:	2300      	movs	r3, #0
 8004436:	627b      	str	r3, [r7, #36]	; 0x24
 8004438:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800443c:	4642      	mov	r2, r8
 800443e:	464b      	mov	r3, r9
 8004440:	f04f 0000 	mov.w	r0, #0
 8004444:	f04f 0100 	mov.w	r1, #0
 8004448:	0159      	lsls	r1, r3, #5
 800444a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800444e:	0150      	lsls	r0, r2, #5
 8004450:	4602      	mov	r2, r0
 8004452:	460b      	mov	r3, r1
 8004454:	4641      	mov	r1, r8
 8004456:	ebb2 0a01 	subs.w	sl, r2, r1
 800445a:	4649      	mov	r1, r9
 800445c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004460:	f04f 0200 	mov.w	r2, #0
 8004464:	f04f 0300 	mov.w	r3, #0
 8004468:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800446c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004470:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004474:	ebb2 040a 	subs.w	r4, r2, sl
 8004478:	eb63 050b 	sbc.w	r5, r3, fp
 800447c:	f04f 0200 	mov.w	r2, #0
 8004480:	f04f 0300 	mov.w	r3, #0
 8004484:	00eb      	lsls	r3, r5, #3
 8004486:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800448a:	00e2      	lsls	r2, r4, #3
 800448c:	4614      	mov	r4, r2
 800448e:	461d      	mov	r5, r3
 8004490:	4643      	mov	r3, r8
 8004492:	18e3      	adds	r3, r4, r3
 8004494:	603b      	str	r3, [r7, #0]
 8004496:	464b      	mov	r3, r9
 8004498:	eb45 0303 	adc.w	r3, r5, r3
 800449c:	607b      	str	r3, [r7, #4]
 800449e:	f04f 0200 	mov.w	r2, #0
 80044a2:	f04f 0300 	mov.w	r3, #0
 80044a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044aa:	4629      	mov	r1, r5
 80044ac:	028b      	lsls	r3, r1, #10
 80044ae:	4621      	mov	r1, r4
 80044b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044b4:	4621      	mov	r1, r4
 80044b6:	028a      	lsls	r2, r1, #10
 80044b8:	4610      	mov	r0, r2
 80044ba:	4619      	mov	r1, r3
 80044bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044be:	2200      	movs	r2, #0
 80044c0:	61bb      	str	r3, [r7, #24]
 80044c2:	61fa      	str	r2, [r7, #28]
 80044c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044c8:	f7fb fe7e 	bl	80001c8 <__aeabi_uldivmod>
 80044cc:	4602      	mov	r2, r0
 80044ce:	460b      	mov	r3, r1
 80044d0:	4613      	mov	r3, r2
 80044d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044d4:	4b0b      	ldr	r3, [pc, #44]	; (8004504 <HAL_RCC_GetSysClockFreq+0x200>)
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	0c1b      	lsrs	r3, r3, #16
 80044da:	f003 0303 	and.w	r3, r3, #3
 80044de:	3301      	adds	r3, #1
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80044e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044ee:	e002      	b.n	80044f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044f0:	4b05      	ldr	r3, [pc, #20]	; (8004508 <HAL_RCC_GetSysClockFreq+0x204>)
 80044f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3750      	adds	r7, #80	; 0x50
 80044fc:	46bd      	mov	sp, r7
 80044fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004502:	bf00      	nop
 8004504:	40023800 	.word	0x40023800
 8004508:	00f42400 	.word	0x00f42400
 800450c:	007a1200 	.word	0x007a1200

08004510 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004514:	4b03      	ldr	r3, [pc, #12]	; (8004524 <HAL_RCC_GetHCLKFreq+0x14>)
 8004516:	681b      	ldr	r3, [r3, #0]
}
 8004518:	4618      	mov	r0, r3
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	20000000 	.word	0x20000000

08004528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800452c:	f7ff fff0 	bl	8004510 <HAL_RCC_GetHCLKFreq>
 8004530:	4602      	mov	r2, r0
 8004532:	4b05      	ldr	r3, [pc, #20]	; (8004548 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	0a9b      	lsrs	r3, r3, #10
 8004538:	f003 0307 	and.w	r3, r3, #7
 800453c:	4903      	ldr	r1, [pc, #12]	; (800454c <HAL_RCC_GetPCLK1Freq+0x24>)
 800453e:	5ccb      	ldrb	r3, [r1, r3]
 8004540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004544:	4618      	mov	r0, r3
 8004546:	bd80      	pop	{r7, pc}
 8004548:	40023800 	.word	0x40023800
 800454c:	08009a40 	.word	0x08009a40

08004550 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004558:	2300      	movs	r3, #0
 800455a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800455c:	2300      	movs	r3, #0
 800455e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b00      	cmp	r3, #0
 800456a:	d105      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004574:	2b00      	cmp	r3, #0
 8004576:	d035      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004578:	4b62      	ldr	r3, [pc, #392]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800457a:	2200      	movs	r2, #0
 800457c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800457e:	f7fc fe7d 	bl	800127c <HAL_GetTick>
 8004582:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004584:	e008      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004586:	f7fc fe79 	bl	800127c <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d901      	bls.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e0b0      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004598:	4b5b      	ldr	r3, [pc, #364]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1f0      	bne.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	019a      	lsls	r2, r3, #6
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	071b      	lsls	r3, r3, #28
 80045b0:	4955      	ldr	r1, [pc, #340]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80045b8:	4b52      	ldr	r3, [pc, #328]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80045ba:	2201      	movs	r2, #1
 80045bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045be:	f7fc fe5d 	bl	800127c <HAL_GetTick>
 80045c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045c4:	e008      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045c6:	f7fc fe59 	bl	800127c <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e090      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045d8:	4b4b      	ldr	r3, [pc, #300]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d0f0      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 8083 	beq.w	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80045f2:	2300      	movs	r3, #0
 80045f4:	60fb      	str	r3, [r7, #12]
 80045f6:	4b44      	ldr	r3, [pc, #272]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fa:	4a43      	ldr	r2, [pc, #268]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004600:	6413      	str	r3, [r2, #64]	; 0x40
 8004602:	4b41      	ldr	r3, [pc, #260]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800460e:	4b3f      	ldr	r3, [pc, #252]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a3e      	ldr	r2, [pc, #248]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004618:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800461a:	f7fc fe2f 	bl	800127c <HAL_GetTick>
 800461e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004620:	e008      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004622:	f7fc fe2b 	bl	800127c <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d901      	bls.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e062      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004634:	4b35      	ldr	r3, [pc, #212]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0f0      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004640:	4b31      	ldr	r3, [pc, #196]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004644:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004648:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d02f      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	429a      	cmp	r2, r3
 800465c:	d028      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800465e:	4b2a      	ldr	r3, [pc, #168]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004666:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004668:	4b29      	ldr	r3, [pc, #164]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800466a:	2201      	movs	r2, #1
 800466c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800466e:	4b28      	ldr	r3, [pc, #160]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004674:	4a24      	ldr	r2, [pc, #144]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800467a:	4b23      	ldr	r3, [pc, #140]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800467c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b01      	cmp	r3, #1
 8004684:	d114      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004686:	f7fc fdf9 	bl	800127c <HAL_GetTick>
 800468a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800468c:	e00a      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800468e:	f7fc fdf5 	bl	800127c <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	f241 3288 	movw	r2, #5000	; 0x1388
 800469c:	4293      	cmp	r3, r2
 800469e:	d901      	bls.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e02a      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a4:	4b18      	ldr	r3, [pc, #96]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0ee      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046bc:	d10d      	bne.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80046be:	4b12      	ldr	r3, [pc, #72]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80046ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046d2:	490d      	ldr	r1, [pc, #52]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	608b      	str	r3, [r1, #8]
 80046d8:	e005      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80046da:	4b0b      	ldr	r3, [pc, #44]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	4a0a      	ldr	r2, [pc, #40]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046e0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80046e4:	6093      	str	r3, [r2, #8]
 80046e6:	4b08      	ldr	r3, [pc, #32]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046f2:	4905      	ldr	r1, [pc, #20]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3718      	adds	r7, #24
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	42470068 	.word	0x42470068
 8004708:	40023800 	.word	0x40023800
 800470c:	40007000 	.word	0x40007000
 8004710:	42470e40 	.word	0x42470e40

08004714 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004714:	b480      	push	{r7}
 8004716:	b087      	sub	sp, #28
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800471c:	2300      	movs	r3, #0
 800471e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004720:	2300      	movs	r3, #0
 8004722:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004724:	2300      	movs	r3, #0
 8004726:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004728:	2300      	movs	r3, #0
 800472a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d13e      	bne.n	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004732:	4b23      	ldr	r3, [pc, #140]	; (80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800473a:	60fb      	str	r3, [r7, #12]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d005      	beq.n	800474e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d12f      	bne.n	80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004748:	4b1e      	ldr	r3, [pc, #120]	; (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800474a:	617b      	str	r3, [r7, #20]
          break;
 800474c:	e02f      	b.n	80047ae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800474e:	4b1c      	ldr	r3, [pc, #112]	; (80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004756:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800475a:	d108      	bne.n	800476e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800475c:	4b18      	ldr	r3, [pc, #96]	; (80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004764:	4a18      	ldr	r2, [pc, #96]	; (80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004766:	fbb2 f3f3 	udiv	r3, r2, r3
 800476a:	613b      	str	r3, [r7, #16]
 800476c:	e007      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800476e:	4b14      	ldr	r3, [pc, #80]	; (80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004776:	4a15      	ldr	r2, [pc, #84]	; (80047cc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004778:	fbb2 f3f3 	udiv	r3, r2, r3
 800477c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800477e:	4b10      	ldr	r3, [pc, #64]	; (80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004780:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004784:	099b      	lsrs	r3, r3, #6
 8004786:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	fb02 f303 	mul.w	r3, r2, r3
 8004790:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004792:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004794:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004798:	0f1b      	lsrs	r3, r3, #28
 800479a:	f003 0307 	and.w	r3, r3, #7
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a4:	617b      	str	r3, [r7, #20]
          break;
 80047a6:	e002      	b.n	80047ae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	617b      	str	r3, [r7, #20]
          break;
 80047ac:	bf00      	nop
        }
      }
      break;
 80047ae:	bf00      	nop
    }
  }
  return frequency;
 80047b0:	697b      	ldr	r3, [r7, #20]
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	371c      	adds	r7, #28
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	40023800 	.word	0x40023800
 80047c4:	00bb8000 	.word	0x00bb8000
 80047c8:	007a1200 	.word	0x007a1200
 80047cc:	00f42400 	.word	0x00f42400

080047d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e07b      	b.n	80048da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d108      	bne.n	80047fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047f2:	d009      	beq.n	8004808 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	61da      	str	r2, [r3, #28]
 80047fa:	e005      	b.n	8004808 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d106      	bne.n	8004828 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7fc fb24 	bl	8000e70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2202      	movs	r2, #2
 800482c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800483e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004850:	431a      	orrs	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800485a:	431a      	orrs	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	431a      	orrs	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004878:	431a      	orrs	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004882:	431a      	orrs	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800488c:	ea42 0103 	orr.w	r1, r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004894:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	430a      	orrs	r2, r1
 800489e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	0c1b      	lsrs	r3, r3, #16
 80048a6:	f003 0104 	and.w	r1, r3, #4
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ae:	f003 0210 	and.w	r2, r3, #16
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	69da      	ldr	r2, [r3, #28]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b082      	sub	sp, #8
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e041      	b.n	8004978 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d106      	bne.n	800490e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f7fc faf9 	bl	8000f00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2202      	movs	r2, #2
 8004912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	3304      	adds	r3, #4
 800491e:	4619      	mov	r1, r3
 8004920:	4610      	mov	r0, r2
 8004922:	f000 fead 	bl	8005680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3708      	adds	r7, #8
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e041      	b.n	8004a16 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d106      	bne.n	80049ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f839 	bl	8004a1e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	3304      	adds	r3, #4
 80049bc:	4619      	mov	r1, r3
 80049be:	4610      	mov	r0, r2
 80049c0:	f000 fe5e 	bl	8005680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b083      	sub	sp, #12
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a26:	bf00      	nop
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
	...

08004a34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d109      	bne.n	8004a58 <HAL_TIM_PWM_Start+0x24>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	bf14      	ite	ne
 8004a50:	2301      	movne	r3, #1
 8004a52:	2300      	moveq	r3, #0
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	e022      	b.n	8004a9e <HAL_TIM_PWM_Start+0x6a>
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	2b04      	cmp	r3, #4
 8004a5c:	d109      	bne.n	8004a72 <HAL_TIM_PWM_Start+0x3e>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	bf14      	ite	ne
 8004a6a:	2301      	movne	r3, #1
 8004a6c:	2300      	moveq	r3, #0
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	e015      	b.n	8004a9e <HAL_TIM_PWM_Start+0x6a>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b08      	cmp	r3, #8
 8004a76:	d109      	bne.n	8004a8c <HAL_TIM_PWM_Start+0x58>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	bf14      	ite	ne
 8004a84:	2301      	movne	r3, #1
 8004a86:	2300      	moveq	r3, #0
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	e008      	b.n	8004a9e <HAL_TIM_PWM_Start+0x6a>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	bf14      	ite	ne
 8004a98:	2301      	movne	r3, #1
 8004a9a:	2300      	moveq	r3, #0
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e07c      	b.n	8004ba0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d104      	bne.n	8004ab6 <HAL_TIM_PWM_Start+0x82>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ab4:	e013      	b.n	8004ade <HAL_TIM_PWM_Start+0xaa>
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	2b04      	cmp	r3, #4
 8004aba:	d104      	bne.n	8004ac6 <HAL_TIM_PWM_Start+0x92>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2202      	movs	r2, #2
 8004ac0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ac4:	e00b      	b.n	8004ade <HAL_TIM_PWM_Start+0xaa>
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	d104      	bne.n	8004ad6 <HAL_TIM_PWM_Start+0xa2>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ad4:	e003      	b.n	8004ade <HAL_TIM_PWM_Start+0xaa>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2202      	movs	r2, #2
 8004ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	6839      	ldr	r1, [r7, #0]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f001 fa70 	bl	8005fcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a2d      	ldr	r2, [pc, #180]	; (8004ba8 <HAL_TIM_PWM_Start+0x174>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d004      	beq.n	8004b00 <HAL_TIM_PWM_Start+0xcc>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a2c      	ldr	r2, [pc, #176]	; (8004bac <HAL_TIM_PWM_Start+0x178>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d101      	bne.n	8004b04 <HAL_TIM_PWM_Start+0xd0>
 8004b00:	2301      	movs	r3, #1
 8004b02:	e000      	b.n	8004b06 <HAL_TIM_PWM_Start+0xd2>
 8004b04:	2300      	movs	r3, #0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d007      	beq.n	8004b1a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a22      	ldr	r2, [pc, #136]	; (8004ba8 <HAL_TIM_PWM_Start+0x174>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d022      	beq.n	8004b6a <HAL_TIM_PWM_Start+0x136>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b2c:	d01d      	beq.n	8004b6a <HAL_TIM_PWM_Start+0x136>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a1f      	ldr	r2, [pc, #124]	; (8004bb0 <HAL_TIM_PWM_Start+0x17c>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d018      	beq.n	8004b6a <HAL_TIM_PWM_Start+0x136>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a1d      	ldr	r2, [pc, #116]	; (8004bb4 <HAL_TIM_PWM_Start+0x180>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d013      	beq.n	8004b6a <HAL_TIM_PWM_Start+0x136>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a1c      	ldr	r2, [pc, #112]	; (8004bb8 <HAL_TIM_PWM_Start+0x184>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d00e      	beq.n	8004b6a <HAL_TIM_PWM_Start+0x136>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a16      	ldr	r2, [pc, #88]	; (8004bac <HAL_TIM_PWM_Start+0x178>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d009      	beq.n	8004b6a <HAL_TIM_PWM_Start+0x136>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a18      	ldr	r2, [pc, #96]	; (8004bbc <HAL_TIM_PWM_Start+0x188>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d004      	beq.n	8004b6a <HAL_TIM_PWM_Start+0x136>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a16      	ldr	r2, [pc, #88]	; (8004bc0 <HAL_TIM_PWM_Start+0x18c>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d111      	bne.n	8004b8e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f003 0307 	and.w	r3, r3, #7
 8004b74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2b06      	cmp	r3, #6
 8004b7a:	d010      	beq.n	8004b9e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0201 	orr.w	r2, r2, #1
 8004b8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b8c:	e007      	b.n	8004b9e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f042 0201 	orr.w	r2, r2, #1
 8004b9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	40010000 	.word	0x40010000
 8004bac:	40010400 	.word	0x40010400
 8004bb0:	40000400 	.word	0x40000400
 8004bb4:	40000800 	.word	0x40000800
 8004bb8:	40000c00 	.word	0x40000c00
 8004bbc:	40014000 	.word	0x40014000
 8004bc0:	40001800 	.word	0x40001800

08004bc4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e041      	b.n	8004c5a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d106      	bne.n	8004bf0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f839 	bl	8004c62 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	3304      	adds	r3, #4
 8004c00:	4619      	mov	r1, r3
 8004c02:	4610      	mov	r0, r2
 8004c04:	f000 fd3c 	bl	8005680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b083      	sub	sp, #12
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004c6a:	bf00      	nop
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
	...

08004c78 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c82:	2300      	movs	r3, #0
 8004c84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d104      	bne.n	8004c96 <HAL_TIM_IC_Start_IT+0x1e>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	e013      	b.n	8004cbe <HAL_TIM_IC_Start_IT+0x46>
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	2b04      	cmp	r3, #4
 8004c9a:	d104      	bne.n	8004ca6 <HAL_TIM_IC_Start_IT+0x2e>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	e00b      	b.n	8004cbe <HAL_TIM_IC_Start_IT+0x46>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d104      	bne.n	8004cb6 <HAL_TIM_IC_Start_IT+0x3e>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	e003      	b.n	8004cbe <HAL_TIM_IC_Start_IT+0x46>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d104      	bne.n	8004cd0 <HAL_TIM_IC_Start_IT+0x58>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	e013      	b.n	8004cf8 <HAL_TIM_IC_Start_IT+0x80>
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	2b04      	cmp	r3, #4
 8004cd4:	d104      	bne.n	8004ce0 <HAL_TIM_IC_Start_IT+0x68>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	e00b      	b.n	8004cf8 <HAL_TIM_IC_Start_IT+0x80>
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	2b08      	cmp	r3, #8
 8004ce4:	d104      	bne.n	8004cf0 <HAL_TIM_IC_Start_IT+0x78>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	e003      	b.n	8004cf8 <HAL_TIM_IC_Start_IT+0x80>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cfa:	7bbb      	ldrb	r3, [r7, #14]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d102      	bne.n	8004d06 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d00:	7b7b      	ldrb	r3, [r7, #13]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d001      	beq.n	8004d0a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e0cc      	b.n	8004ea4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d104      	bne.n	8004d1a <HAL_TIM_IC_Start_IT+0xa2>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2202      	movs	r2, #2
 8004d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d18:	e013      	b.n	8004d42 <HAL_TIM_IC_Start_IT+0xca>
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	2b04      	cmp	r3, #4
 8004d1e:	d104      	bne.n	8004d2a <HAL_TIM_IC_Start_IT+0xb2>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2202      	movs	r2, #2
 8004d24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d28:	e00b      	b.n	8004d42 <HAL_TIM_IC_Start_IT+0xca>
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2b08      	cmp	r3, #8
 8004d2e:	d104      	bne.n	8004d3a <HAL_TIM_IC_Start_IT+0xc2>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2202      	movs	r2, #2
 8004d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d38:	e003      	b.n	8004d42 <HAL_TIM_IC_Start_IT+0xca>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2202      	movs	r2, #2
 8004d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d104      	bne.n	8004d52 <HAL_TIM_IC_Start_IT+0xda>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d50:	e013      	b.n	8004d7a <HAL_TIM_IC_Start_IT+0x102>
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	2b04      	cmp	r3, #4
 8004d56:	d104      	bne.n	8004d62 <HAL_TIM_IC_Start_IT+0xea>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d60:	e00b      	b.n	8004d7a <HAL_TIM_IC_Start_IT+0x102>
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	2b08      	cmp	r3, #8
 8004d66:	d104      	bne.n	8004d72 <HAL_TIM_IC_Start_IT+0xfa>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d70:	e003      	b.n	8004d7a <HAL_TIM_IC_Start_IT+0x102>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2202      	movs	r2, #2
 8004d76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b0c      	cmp	r3, #12
 8004d7e:	d841      	bhi.n	8004e04 <HAL_TIM_IC_Start_IT+0x18c>
 8004d80:	a201      	add	r2, pc, #4	; (adr r2, 8004d88 <HAL_TIM_IC_Start_IT+0x110>)
 8004d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d86:	bf00      	nop
 8004d88:	08004dbd 	.word	0x08004dbd
 8004d8c:	08004e05 	.word	0x08004e05
 8004d90:	08004e05 	.word	0x08004e05
 8004d94:	08004e05 	.word	0x08004e05
 8004d98:	08004dcf 	.word	0x08004dcf
 8004d9c:	08004e05 	.word	0x08004e05
 8004da0:	08004e05 	.word	0x08004e05
 8004da4:	08004e05 	.word	0x08004e05
 8004da8:	08004de1 	.word	0x08004de1
 8004dac:	08004e05 	.word	0x08004e05
 8004db0:	08004e05 	.word	0x08004e05
 8004db4:	08004e05 	.word	0x08004e05
 8004db8:	08004df3 	.word	0x08004df3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68da      	ldr	r2, [r3, #12]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f042 0202 	orr.w	r2, r2, #2
 8004dca:	60da      	str	r2, [r3, #12]
      break;
 8004dcc:	e01d      	b.n	8004e0a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68da      	ldr	r2, [r3, #12]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f042 0204 	orr.w	r2, r2, #4
 8004ddc:	60da      	str	r2, [r3, #12]
      break;
 8004dde:	e014      	b.n	8004e0a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68da      	ldr	r2, [r3, #12]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f042 0208 	orr.w	r2, r2, #8
 8004dee:	60da      	str	r2, [r3, #12]
      break;
 8004df0:	e00b      	b.n	8004e0a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68da      	ldr	r2, [r3, #12]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f042 0210 	orr.w	r2, r2, #16
 8004e00:	60da      	str	r2, [r3, #12]
      break;
 8004e02:	e002      	b.n	8004e0a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	73fb      	strb	r3, [r7, #15]
      break;
 8004e08:	bf00      	nop
  }

  if (status == HAL_OK)
 8004e0a:	7bfb      	ldrb	r3, [r7, #15]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d148      	bne.n	8004ea2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2201      	movs	r2, #1
 8004e16:	6839      	ldr	r1, [r7, #0]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f001 f8d7 	bl	8005fcc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a22      	ldr	r2, [pc, #136]	; (8004eac <HAL_TIM_IC_Start_IT+0x234>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d022      	beq.n	8004e6e <HAL_TIM_IC_Start_IT+0x1f6>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e30:	d01d      	beq.n	8004e6e <HAL_TIM_IC_Start_IT+0x1f6>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a1e      	ldr	r2, [pc, #120]	; (8004eb0 <HAL_TIM_IC_Start_IT+0x238>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d018      	beq.n	8004e6e <HAL_TIM_IC_Start_IT+0x1f6>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a1c      	ldr	r2, [pc, #112]	; (8004eb4 <HAL_TIM_IC_Start_IT+0x23c>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d013      	beq.n	8004e6e <HAL_TIM_IC_Start_IT+0x1f6>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a1b      	ldr	r2, [pc, #108]	; (8004eb8 <HAL_TIM_IC_Start_IT+0x240>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d00e      	beq.n	8004e6e <HAL_TIM_IC_Start_IT+0x1f6>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a19      	ldr	r2, [pc, #100]	; (8004ebc <HAL_TIM_IC_Start_IT+0x244>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d009      	beq.n	8004e6e <HAL_TIM_IC_Start_IT+0x1f6>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a18      	ldr	r2, [pc, #96]	; (8004ec0 <HAL_TIM_IC_Start_IT+0x248>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d004      	beq.n	8004e6e <HAL_TIM_IC_Start_IT+0x1f6>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a16      	ldr	r2, [pc, #88]	; (8004ec4 <HAL_TIM_IC_Start_IT+0x24c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d111      	bne.n	8004e92 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f003 0307 	and.w	r3, r3, #7
 8004e78:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	2b06      	cmp	r3, #6
 8004e7e:	d010      	beq.n	8004ea2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 0201 	orr.w	r2, r2, #1
 8004e8e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e90:	e007      	b.n	8004ea2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f042 0201 	orr.w	r2, r2, #1
 8004ea0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	40010000 	.word	0x40010000
 8004eb0:	40000400 	.word	0x40000400
 8004eb4:	40000800 	.word	0x40000800
 8004eb8:	40000c00 	.word	0x40000c00
 8004ebc:	40010400 	.word	0x40010400
 8004ec0:	40014000 	.word	0x40014000
 8004ec4:	40001800 	.word	0x40001800

08004ec8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d122      	bne.n	8004f24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d11b      	bne.n	8004f24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f06f 0202 	mvn.w	r2, #2
 8004ef4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	f003 0303 	and.w	r3, r3, #3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d003      	beq.n	8004f12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7fb fe3e 	bl	8000b8c <HAL_TIM_IC_CaptureCallback>
 8004f10:	e005      	b.n	8004f1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 fb96 	bl	8005644 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 fb9d 	bl	8005658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	f003 0304 	and.w	r3, r3, #4
 8004f2e:	2b04      	cmp	r3, #4
 8004f30:	d122      	bne.n	8004f78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f003 0304 	and.w	r3, r3, #4
 8004f3c:	2b04      	cmp	r3, #4
 8004f3e:	d11b      	bne.n	8004f78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f06f 0204 	mvn.w	r2, #4
 8004f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2202      	movs	r2, #2
 8004f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d003      	beq.n	8004f66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7fb fe14 	bl	8000b8c <HAL_TIM_IC_CaptureCallback>
 8004f64:	e005      	b.n	8004f72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 fb6c 	bl	8005644 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 fb73 	bl	8005658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	f003 0308 	and.w	r3, r3, #8
 8004f82:	2b08      	cmp	r3, #8
 8004f84:	d122      	bne.n	8004fcc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	f003 0308 	and.w	r3, r3, #8
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	d11b      	bne.n	8004fcc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f06f 0208 	mvn.w	r2, #8
 8004f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2204      	movs	r2, #4
 8004fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d003      	beq.n	8004fba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7fb fdea 	bl	8000b8c <HAL_TIM_IC_CaptureCallback>
 8004fb8:	e005      	b.n	8004fc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 fb42 	bl	8005644 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 fb49 	bl	8005658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	f003 0310 	and.w	r3, r3, #16
 8004fd6:	2b10      	cmp	r3, #16
 8004fd8:	d122      	bne.n	8005020 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f003 0310 	and.w	r3, r3, #16
 8004fe4:	2b10      	cmp	r3, #16
 8004fe6:	d11b      	bne.n	8005020 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f06f 0210 	mvn.w	r2, #16
 8004ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2208      	movs	r2, #8
 8004ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005002:	2b00      	cmp	r3, #0
 8005004:	d003      	beq.n	800500e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7fb fdc0 	bl	8000b8c <HAL_TIM_IC_CaptureCallback>
 800500c:	e005      	b.n	800501a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 fb18 	bl	8005644 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 fb1f 	bl	8005658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	2b01      	cmp	r3, #1
 800502c:	d10e      	bne.n	800504c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	f003 0301 	and.w	r3, r3, #1
 8005038:	2b01      	cmp	r3, #1
 800503a:	d107      	bne.n	800504c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f06f 0201 	mvn.w	r2, #1
 8005044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 faf2 	bl	8005630 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005056:	2b80      	cmp	r3, #128	; 0x80
 8005058:	d10e      	bne.n	8005078 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005064:	2b80      	cmp	r3, #128	; 0x80
 8005066:	d107      	bne.n	8005078 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f001 f8a8 	bl	80061c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005082:	2b40      	cmp	r3, #64	; 0x40
 8005084:	d10e      	bne.n	80050a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005090:	2b40      	cmp	r3, #64	; 0x40
 8005092:	d107      	bne.n	80050a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800509c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 fae4 	bl	800566c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	f003 0320 	and.w	r3, r3, #32
 80050ae:	2b20      	cmp	r3, #32
 80050b0:	d10e      	bne.n	80050d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	f003 0320 	and.w	r3, r3, #32
 80050bc:	2b20      	cmp	r3, #32
 80050be:	d107      	bne.n	80050d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f06f 0220 	mvn.w	r2, #32
 80050c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f001 f872 	bl	80061b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050d0:	bf00      	nop
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050e4:	2300      	movs	r3, #0
 80050e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d101      	bne.n	80050f6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80050f2:	2302      	movs	r3, #2
 80050f4:	e088      	b.n	8005208 <HAL_TIM_IC_ConfigChannel+0x130>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d11b      	bne.n	800513c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6818      	ldr	r0, [r3, #0]
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	6819      	ldr	r1, [r3, #0]
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f000 fd96 	bl	8005c44 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	699a      	ldr	r2, [r3, #24]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 020c 	bic.w	r2, r2, #12
 8005126:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6999      	ldr	r1, [r3, #24]
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	689a      	ldr	r2, [r3, #8]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	430a      	orrs	r2, r1
 8005138:	619a      	str	r2, [r3, #24]
 800513a:	e060      	b.n	80051fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b04      	cmp	r3, #4
 8005140:	d11c      	bne.n	800517c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6818      	ldr	r0, [r3, #0]
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	6819      	ldr	r1, [r3, #0]
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	685a      	ldr	r2, [r3, #4]
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	f000 fe1a 	bl	8005d8a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	699a      	ldr	r2, [r3, #24]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005164:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6999      	ldr	r1, [r3, #24]
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	021a      	lsls	r2, r3, #8
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	619a      	str	r2, [r3, #24]
 800517a:	e040      	b.n	80051fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b08      	cmp	r3, #8
 8005180:	d11b      	bne.n	80051ba <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6818      	ldr	r0, [r3, #0]
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	6819      	ldr	r1, [r3, #0]
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	f000 fe67 	bl	8005e64 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	69da      	ldr	r2, [r3, #28]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f022 020c 	bic.w	r2, r2, #12
 80051a4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	69d9      	ldr	r1, [r3, #28]
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	689a      	ldr	r2, [r3, #8]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	430a      	orrs	r2, r1
 80051b6:	61da      	str	r2, [r3, #28]
 80051b8:	e021      	b.n	80051fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b0c      	cmp	r3, #12
 80051be:	d11c      	bne.n	80051fa <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6818      	ldr	r0, [r3, #0]
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	6819      	ldr	r1, [r3, #0]
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	f000 fe84 	bl	8005edc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	69da      	ldr	r2, [r3, #28]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80051e2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	69d9      	ldr	r1, [r3, #28]
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	021a      	lsls	r2, r3, #8
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	430a      	orrs	r2, r1
 80051f6:	61da      	str	r2, [r3, #28]
 80051f8:	e001      	b.n	80051fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005206:	7dfb      	ldrb	r3, [r7, #23]
}
 8005208:	4618      	mov	r0, r3
 800520a:	3718      	adds	r7, #24
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b086      	sub	sp, #24
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800521c:	2300      	movs	r3, #0
 800521e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005226:	2b01      	cmp	r3, #1
 8005228:	d101      	bne.n	800522e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800522a:	2302      	movs	r3, #2
 800522c:	e0ae      	b.n	800538c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b0c      	cmp	r3, #12
 800523a:	f200 809f 	bhi.w	800537c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800523e:	a201      	add	r2, pc, #4	; (adr r2, 8005244 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005244:	08005279 	.word	0x08005279
 8005248:	0800537d 	.word	0x0800537d
 800524c:	0800537d 	.word	0x0800537d
 8005250:	0800537d 	.word	0x0800537d
 8005254:	080052b9 	.word	0x080052b9
 8005258:	0800537d 	.word	0x0800537d
 800525c:	0800537d 	.word	0x0800537d
 8005260:	0800537d 	.word	0x0800537d
 8005264:	080052fb 	.word	0x080052fb
 8005268:	0800537d 	.word	0x0800537d
 800526c:	0800537d 	.word	0x0800537d
 8005270:	0800537d 	.word	0x0800537d
 8005274:	0800533b 	.word	0x0800533b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68b9      	ldr	r1, [r7, #8]
 800527e:	4618      	mov	r0, r3
 8005280:	f000 fa9e 	bl	80057c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	699a      	ldr	r2, [r3, #24]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f042 0208 	orr.w	r2, r2, #8
 8005292:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	699a      	ldr	r2, [r3, #24]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 0204 	bic.w	r2, r2, #4
 80052a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6999      	ldr	r1, [r3, #24]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	691a      	ldr	r2, [r3, #16]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	619a      	str	r2, [r3, #24]
      break;
 80052b6:	e064      	b.n	8005382 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68b9      	ldr	r1, [r7, #8]
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 faee 	bl	80058a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	699a      	ldr	r2, [r3, #24]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	699a      	ldr	r2, [r3, #24]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6999      	ldr	r1, [r3, #24]
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	021a      	lsls	r2, r3, #8
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	619a      	str	r2, [r3, #24]
      break;
 80052f8:	e043      	b.n	8005382 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68b9      	ldr	r1, [r7, #8]
 8005300:	4618      	mov	r0, r3
 8005302:	f000 fb43 	bl	800598c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	69da      	ldr	r2, [r3, #28]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f042 0208 	orr.w	r2, r2, #8
 8005314:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	69da      	ldr	r2, [r3, #28]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f022 0204 	bic.w	r2, r2, #4
 8005324:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	69d9      	ldr	r1, [r3, #28]
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	691a      	ldr	r2, [r3, #16]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	430a      	orrs	r2, r1
 8005336:	61da      	str	r2, [r3, #28]
      break;
 8005338:	e023      	b.n	8005382 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68b9      	ldr	r1, [r7, #8]
 8005340:	4618      	mov	r0, r3
 8005342:	f000 fb97 	bl	8005a74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	69da      	ldr	r2, [r3, #28]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005354:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	69da      	ldr	r2, [r3, #28]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005364:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	69d9      	ldr	r1, [r3, #28]
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	021a      	lsls	r2, r3, #8
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	430a      	orrs	r2, r1
 8005378:	61da      	str	r2, [r3, #28]
      break;
 800537a:	e002      	b.n	8005382 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	75fb      	strb	r3, [r7, #23]
      break;
 8005380:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800538a:	7dfb      	ldrb	r3, [r7, #23]
}
 800538c:	4618      	mov	r0, r3
 800538e:	3718      	adds	r7, #24
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800539e:	2300      	movs	r3, #0
 80053a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d101      	bne.n	80053b0 <HAL_TIM_ConfigClockSource+0x1c>
 80053ac:	2302      	movs	r3, #2
 80053ae:	e0b4      	b.n	800551a <HAL_TIM_ConfigClockSource+0x186>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2202      	movs	r2, #2
 80053bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68ba      	ldr	r2, [r7, #8]
 80053de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053e8:	d03e      	beq.n	8005468 <HAL_TIM_ConfigClockSource+0xd4>
 80053ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053ee:	f200 8087 	bhi.w	8005500 <HAL_TIM_ConfigClockSource+0x16c>
 80053f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053f6:	f000 8086 	beq.w	8005506 <HAL_TIM_ConfigClockSource+0x172>
 80053fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053fe:	d87f      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x16c>
 8005400:	2b70      	cmp	r3, #112	; 0x70
 8005402:	d01a      	beq.n	800543a <HAL_TIM_ConfigClockSource+0xa6>
 8005404:	2b70      	cmp	r3, #112	; 0x70
 8005406:	d87b      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x16c>
 8005408:	2b60      	cmp	r3, #96	; 0x60
 800540a:	d050      	beq.n	80054ae <HAL_TIM_ConfigClockSource+0x11a>
 800540c:	2b60      	cmp	r3, #96	; 0x60
 800540e:	d877      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x16c>
 8005410:	2b50      	cmp	r3, #80	; 0x50
 8005412:	d03c      	beq.n	800548e <HAL_TIM_ConfigClockSource+0xfa>
 8005414:	2b50      	cmp	r3, #80	; 0x50
 8005416:	d873      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x16c>
 8005418:	2b40      	cmp	r3, #64	; 0x40
 800541a:	d058      	beq.n	80054ce <HAL_TIM_ConfigClockSource+0x13a>
 800541c:	2b40      	cmp	r3, #64	; 0x40
 800541e:	d86f      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x16c>
 8005420:	2b30      	cmp	r3, #48	; 0x30
 8005422:	d064      	beq.n	80054ee <HAL_TIM_ConfigClockSource+0x15a>
 8005424:	2b30      	cmp	r3, #48	; 0x30
 8005426:	d86b      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x16c>
 8005428:	2b20      	cmp	r3, #32
 800542a:	d060      	beq.n	80054ee <HAL_TIM_ConfigClockSource+0x15a>
 800542c:	2b20      	cmp	r3, #32
 800542e:	d867      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x16c>
 8005430:	2b00      	cmp	r3, #0
 8005432:	d05c      	beq.n	80054ee <HAL_TIM_ConfigClockSource+0x15a>
 8005434:	2b10      	cmp	r3, #16
 8005436:	d05a      	beq.n	80054ee <HAL_TIM_ConfigClockSource+0x15a>
 8005438:	e062      	b.n	8005500 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6818      	ldr	r0, [r3, #0]
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	6899      	ldr	r1, [r3, #8]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	f000 fd9f 	bl	8005f8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800545c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	609a      	str	r2, [r3, #8]
      break;
 8005466:	e04f      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6818      	ldr	r0, [r3, #0]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	6899      	ldr	r1, [r3, #8]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	f000 fd88 	bl	8005f8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689a      	ldr	r2, [r3, #8]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800548a:	609a      	str	r2, [r3, #8]
      break;
 800548c:	e03c      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6818      	ldr	r0, [r3, #0]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	6859      	ldr	r1, [r3, #4]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	461a      	mov	r2, r3
 800549c:	f000 fc46 	bl	8005d2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2150      	movs	r1, #80	; 0x50
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 fd55 	bl	8005f56 <TIM_ITRx_SetConfig>
      break;
 80054ac:	e02c      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6818      	ldr	r0, [r3, #0]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	6859      	ldr	r1, [r3, #4]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	461a      	mov	r2, r3
 80054bc:	f000 fca2 	bl	8005e04 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2160      	movs	r1, #96	; 0x60
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 fd45 	bl	8005f56 <TIM_ITRx_SetConfig>
      break;
 80054cc:	e01c      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6818      	ldr	r0, [r3, #0]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	6859      	ldr	r1, [r3, #4]
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	461a      	mov	r2, r3
 80054dc:	f000 fc26 	bl	8005d2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2140      	movs	r1, #64	; 0x40
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 fd35 	bl	8005f56 <TIM_ITRx_SetConfig>
      break;
 80054ec:	e00c      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4619      	mov	r1, r3
 80054f8:	4610      	mov	r0, r2
 80054fa:	f000 fd2c 	bl	8005f56 <TIM_ITRx_SetConfig>
      break;
 80054fe:	e003      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	73fb      	strb	r3, [r7, #15]
      break;
 8005504:	e000      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005506:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005518:	7bfb      	ldrb	r3, [r7, #15]
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b082      	sub	sp, #8
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
 800552a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005532:	2b01      	cmp	r3, #1
 8005534:	d101      	bne.n	800553a <HAL_TIM_SlaveConfigSynchro+0x18>
 8005536:	2302      	movs	r3, #2
 8005538:	e031      	b.n	800559e <HAL_TIM_SlaveConfigSynchro+0x7c>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2202      	movs	r2, #2
 8005546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800554a:	6839      	ldr	r1, [r7, #0]
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 fae7 	bl	8005b20 <TIM_SlaveTimer_SetConfig>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d009      	beq.n	800556c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e018      	b.n	800559e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68da      	ldr	r2, [r3, #12]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800557a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68da      	ldr	r2, [r3, #12]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800558a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3708      	adds	r7, #8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
	...

080055a8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80055b2:	2300      	movs	r3, #0
 80055b4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	2b0c      	cmp	r3, #12
 80055ba:	d831      	bhi.n	8005620 <HAL_TIM_ReadCapturedValue+0x78>
 80055bc:	a201      	add	r2, pc, #4	; (adr r2, 80055c4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80055be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c2:	bf00      	nop
 80055c4:	080055f9 	.word	0x080055f9
 80055c8:	08005621 	.word	0x08005621
 80055cc:	08005621 	.word	0x08005621
 80055d0:	08005621 	.word	0x08005621
 80055d4:	08005603 	.word	0x08005603
 80055d8:	08005621 	.word	0x08005621
 80055dc:	08005621 	.word	0x08005621
 80055e0:	08005621 	.word	0x08005621
 80055e4:	0800560d 	.word	0x0800560d
 80055e8:	08005621 	.word	0x08005621
 80055ec:	08005621 	.word	0x08005621
 80055f0:	08005621 	.word	0x08005621
 80055f4:	08005617 	.word	0x08005617
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055fe:	60fb      	str	r3, [r7, #12]

      break;
 8005600:	e00f      	b.n	8005622 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005608:	60fb      	str	r3, [r7, #12]

      break;
 800560a:	e00a      	b.n	8005622 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005612:	60fb      	str	r3, [r7, #12]

      break;
 8005614:	e005      	b.n	8005622 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561c:	60fb      	str	r3, [r7, #12]

      break;
 800561e:	e000      	b.n	8005622 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005620:	bf00      	nop
  }

  return tmpreg;
 8005622:	68fb      	ldr	r3, [r7, #12]
}
 8005624:	4618      	mov	r0, r3
 8005626:	3714      	adds	r7, #20
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a40      	ldr	r2, [pc, #256]	; (8005794 <TIM_Base_SetConfig+0x114>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d013      	beq.n	80056c0 <TIM_Base_SetConfig+0x40>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800569e:	d00f      	beq.n	80056c0 <TIM_Base_SetConfig+0x40>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a3d      	ldr	r2, [pc, #244]	; (8005798 <TIM_Base_SetConfig+0x118>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d00b      	beq.n	80056c0 <TIM_Base_SetConfig+0x40>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a3c      	ldr	r2, [pc, #240]	; (800579c <TIM_Base_SetConfig+0x11c>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d007      	beq.n	80056c0 <TIM_Base_SetConfig+0x40>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a3b      	ldr	r2, [pc, #236]	; (80057a0 <TIM_Base_SetConfig+0x120>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d003      	beq.n	80056c0 <TIM_Base_SetConfig+0x40>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a3a      	ldr	r2, [pc, #232]	; (80057a4 <TIM_Base_SetConfig+0x124>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d108      	bne.n	80056d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a2f      	ldr	r2, [pc, #188]	; (8005794 <TIM_Base_SetConfig+0x114>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d02b      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056e0:	d027      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a2c      	ldr	r2, [pc, #176]	; (8005798 <TIM_Base_SetConfig+0x118>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d023      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a2b      	ldr	r2, [pc, #172]	; (800579c <TIM_Base_SetConfig+0x11c>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d01f      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a2a      	ldr	r2, [pc, #168]	; (80057a0 <TIM_Base_SetConfig+0x120>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d01b      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a29      	ldr	r2, [pc, #164]	; (80057a4 <TIM_Base_SetConfig+0x124>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d017      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a28      	ldr	r2, [pc, #160]	; (80057a8 <TIM_Base_SetConfig+0x128>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d013      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a27      	ldr	r2, [pc, #156]	; (80057ac <TIM_Base_SetConfig+0x12c>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d00f      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a26      	ldr	r2, [pc, #152]	; (80057b0 <TIM_Base_SetConfig+0x130>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d00b      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a25      	ldr	r2, [pc, #148]	; (80057b4 <TIM_Base_SetConfig+0x134>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d007      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a24      	ldr	r2, [pc, #144]	; (80057b8 <TIM_Base_SetConfig+0x138>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d003      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a23      	ldr	r2, [pc, #140]	; (80057bc <TIM_Base_SetConfig+0x13c>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d108      	bne.n	8005744 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005738:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	4313      	orrs	r3, r2
 8005742:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	4313      	orrs	r3, r2
 8005750:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	689a      	ldr	r2, [r3, #8]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a0a      	ldr	r2, [pc, #40]	; (8005794 <TIM_Base_SetConfig+0x114>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d003      	beq.n	8005778 <TIM_Base_SetConfig+0xf8>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a0c      	ldr	r2, [pc, #48]	; (80057a4 <TIM_Base_SetConfig+0x124>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d103      	bne.n	8005780 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	691a      	ldr	r2, [r3, #16]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	615a      	str	r2, [r3, #20]
}
 8005786:	bf00      	nop
 8005788:	3714      	adds	r7, #20
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	40010000 	.word	0x40010000
 8005798:	40000400 	.word	0x40000400
 800579c:	40000800 	.word	0x40000800
 80057a0:	40000c00 	.word	0x40000c00
 80057a4:	40010400 	.word	0x40010400
 80057a8:	40014000 	.word	0x40014000
 80057ac:	40014400 	.word	0x40014400
 80057b0:	40014800 	.word	0x40014800
 80057b4:	40001800 	.word	0x40001800
 80057b8:	40001c00 	.word	0x40001c00
 80057bc:	40002000 	.word	0x40002000

080057c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	f023 0201 	bic.w	r2, r3, #1
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f023 0303 	bic.w	r3, r3, #3
 80057f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	4313      	orrs	r3, r2
 8005800:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f023 0302 	bic.w	r3, r3, #2
 8005808:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	4313      	orrs	r3, r2
 8005812:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a20      	ldr	r2, [pc, #128]	; (8005898 <TIM_OC1_SetConfig+0xd8>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d003      	beq.n	8005824 <TIM_OC1_SetConfig+0x64>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a1f      	ldr	r2, [pc, #124]	; (800589c <TIM_OC1_SetConfig+0xdc>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d10c      	bne.n	800583e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f023 0308 	bic.w	r3, r3, #8
 800582a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	4313      	orrs	r3, r2
 8005834:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	f023 0304 	bic.w	r3, r3, #4
 800583c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a15      	ldr	r2, [pc, #84]	; (8005898 <TIM_OC1_SetConfig+0xd8>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d003      	beq.n	800584e <TIM_OC1_SetConfig+0x8e>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a14      	ldr	r2, [pc, #80]	; (800589c <TIM_OC1_SetConfig+0xdc>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d111      	bne.n	8005872 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005854:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800585c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	4313      	orrs	r3, r2
 8005866:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	693a      	ldr	r2, [r7, #16]
 800586e:	4313      	orrs	r3, r2
 8005870:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	685a      	ldr	r2, [r3, #4]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	621a      	str	r2, [r3, #32]
}
 800588c:	bf00      	nop
 800588e:	371c      	adds	r7, #28
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr
 8005898:	40010000 	.word	0x40010000
 800589c:	40010400 	.word	0x40010400

080058a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b087      	sub	sp, #28
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	f023 0210 	bic.w	r2, r3, #16
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	021b      	lsls	r3, r3, #8
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f023 0320 	bic.w	r3, r3, #32
 80058ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	011b      	lsls	r3, r3, #4
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a22      	ldr	r2, [pc, #136]	; (8005984 <TIM_OC2_SetConfig+0xe4>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d003      	beq.n	8005908 <TIM_OC2_SetConfig+0x68>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a21      	ldr	r2, [pc, #132]	; (8005988 <TIM_OC2_SetConfig+0xe8>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d10d      	bne.n	8005924 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800590e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	011b      	lsls	r3, r3, #4
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	4313      	orrs	r3, r2
 800591a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005922:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a17      	ldr	r2, [pc, #92]	; (8005984 <TIM_OC2_SetConfig+0xe4>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d003      	beq.n	8005934 <TIM_OC2_SetConfig+0x94>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a16      	ldr	r2, [pc, #88]	; (8005988 <TIM_OC2_SetConfig+0xe8>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d113      	bne.n	800595c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800593a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005942:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	4313      	orrs	r3, r2
 800594e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	4313      	orrs	r3, r2
 800595a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	621a      	str	r2, [r3, #32]
}
 8005976:	bf00      	nop
 8005978:	371c      	adds	r7, #28
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	40010000 	.word	0x40010000
 8005988:	40010400 	.word	0x40010400

0800598c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800598c:	b480      	push	{r7}
 800598e:	b087      	sub	sp, #28
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	69db      	ldr	r3, [r3, #28]
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f023 0303 	bic.w	r3, r3, #3
 80059c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	021b      	lsls	r3, r3, #8
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	4313      	orrs	r3, r2
 80059e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a21      	ldr	r2, [pc, #132]	; (8005a6c <TIM_OC3_SetConfig+0xe0>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d003      	beq.n	80059f2 <TIM_OC3_SetConfig+0x66>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a20      	ldr	r2, [pc, #128]	; (8005a70 <TIM_OC3_SetConfig+0xe4>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d10d      	bne.n	8005a0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	021b      	lsls	r3, r3, #8
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a16      	ldr	r2, [pc, #88]	; (8005a6c <TIM_OC3_SetConfig+0xe0>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d003      	beq.n	8005a1e <TIM_OC3_SetConfig+0x92>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a15      	ldr	r2, [pc, #84]	; (8005a70 <TIM_OC3_SetConfig+0xe4>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d113      	bne.n	8005a46 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	011b      	lsls	r3, r3, #4
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	011b      	lsls	r3, r3, #4
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	697a      	ldr	r2, [r7, #20]
 8005a5e:	621a      	str	r2, [r3, #32]
}
 8005a60:	bf00      	nop
 8005a62:	371c      	adds	r7, #28
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	40010000 	.word	0x40010000
 8005a70:	40010400 	.word	0x40010400

08005a74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b087      	sub	sp, #28
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	021b      	lsls	r3, r3, #8
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005abe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	031b      	lsls	r3, r3, #12
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a12      	ldr	r2, [pc, #72]	; (8005b18 <TIM_OC4_SetConfig+0xa4>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d003      	beq.n	8005adc <TIM_OC4_SetConfig+0x68>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a11      	ldr	r2, [pc, #68]	; (8005b1c <TIM_OC4_SetConfig+0xa8>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d109      	bne.n	8005af0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ae2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	019b      	lsls	r3, r3, #6
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	621a      	str	r2, [r3, #32]
}
 8005b0a:	bf00      	nop
 8005b0c:	371c      	adds	r7, #28
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	40010000 	.word	0x40010000
 8005b1c:	40010400 	.word	0x40010400

08005b20 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b3c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	f023 0307 	bic.w	r3, r3, #7
 8005b4e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	2b70      	cmp	r3, #112	; 0x70
 8005b68:	d01a      	beq.n	8005ba0 <TIM_SlaveTimer_SetConfig+0x80>
 8005b6a:	2b70      	cmp	r3, #112	; 0x70
 8005b6c:	d860      	bhi.n	8005c30 <TIM_SlaveTimer_SetConfig+0x110>
 8005b6e:	2b60      	cmp	r3, #96	; 0x60
 8005b70:	d054      	beq.n	8005c1c <TIM_SlaveTimer_SetConfig+0xfc>
 8005b72:	2b60      	cmp	r3, #96	; 0x60
 8005b74:	d85c      	bhi.n	8005c30 <TIM_SlaveTimer_SetConfig+0x110>
 8005b76:	2b50      	cmp	r3, #80	; 0x50
 8005b78:	d046      	beq.n	8005c08 <TIM_SlaveTimer_SetConfig+0xe8>
 8005b7a:	2b50      	cmp	r3, #80	; 0x50
 8005b7c:	d858      	bhi.n	8005c30 <TIM_SlaveTimer_SetConfig+0x110>
 8005b7e:	2b40      	cmp	r3, #64	; 0x40
 8005b80:	d019      	beq.n	8005bb6 <TIM_SlaveTimer_SetConfig+0x96>
 8005b82:	2b40      	cmp	r3, #64	; 0x40
 8005b84:	d854      	bhi.n	8005c30 <TIM_SlaveTimer_SetConfig+0x110>
 8005b86:	2b30      	cmp	r3, #48	; 0x30
 8005b88:	d055      	beq.n	8005c36 <TIM_SlaveTimer_SetConfig+0x116>
 8005b8a:	2b30      	cmp	r3, #48	; 0x30
 8005b8c:	d850      	bhi.n	8005c30 <TIM_SlaveTimer_SetConfig+0x110>
 8005b8e:	2b20      	cmp	r3, #32
 8005b90:	d051      	beq.n	8005c36 <TIM_SlaveTimer_SetConfig+0x116>
 8005b92:	2b20      	cmp	r3, #32
 8005b94:	d84c      	bhi.n	8005c30 <TIM_SlaveTimer_SetConfig+0x110>
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d04d      	beq.n	8005c36 <TIM_SlaveTimer_SetConfig+0x116>
 8005b9a:	2b10      	cmp	r3, #16
 8005b9c:	d04b      	beq.n	8005c36 <TIM_SlaveTimer_SetConfig+0x116>
 8005b9e:	e047      	b.n	8005c30 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6818      	ldr	r0, [r3, #0]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	68d9      	ldr	r1, [r3, #12]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	689a      	ldr	r2, [r3, #8]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	f000 f9ec 	bl	8005f8c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8005bb4:	e040      	b.n	8005c38 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2b05      	cmp	r3, #5
 8005bbc:	d101      	bne.n	8005bc2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e03b      	b.n	8005c3a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	6a1b      	ldr	r3, [r3, #32]
 8005bc8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6a1a      	ldr	r2, [r3, #32]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f022 0201 	bic.w	r2, r2, #1
 8005bd8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005be8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	011b      	lsls	r3, r3, #4
 8005bf0:	68ba      	ldr	r2, [r7, #8]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	621a      	str	r2, [r3, #32]
      break;
 8005c06:	e017      	b.n	8005c38 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6818      	ldr	r0, [r3, #0]
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	6899      	ldr	r1, [r3, #8]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	461a      	mov	r2, r3
 8005c16:	f000 f889 	bl	8005d2c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005c1a:	e00d      	b.n	8005c38 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6818      	ldr	r0, [r3, #0]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	6899      	ldr	r1, [r3, #8]
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	461a      	mov	r2, r3
 8005c2a:	f000 f8eb 	bl	8005e04 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005c2e:	e003      	b.n	8005c38 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	75fb      	strb	r3, [r7, #23]
      break;
 8005c34:	e000      	b.n	8005c38 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8005c36:	bf00      	nop
  }

  return status;
 8005c38:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3718      	adds	r7, #24
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
	...

08005c44 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b087      	sub	sp, #28
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
 8005c50:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	f023 0201 	bic.w	r2, r3, #1
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6a1b      	ldr	r3, [r3, #32]
 8005c68:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	4a28      	ldr	r2, [pc, #160]	; (8005d10 <TIM_TI1_SetConfig+0xcc>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d01b      	beq.n	8005caa <TIM_TI1_SetConfig+0x66>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c78:	d017      	beq.n	8005caa <TIM_TI1_SetConfig+0x66>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	4a25      	ldr	r2, [pc, #148]	; (8005d14 <TIM_TI1_SetConfig+0xd0>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d013      	beq.n	8005caa <TIM_TI1_SetConfig+0x66>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	4a24      	ldr	r2, [pc, #144]	; (8005d18 <TIM_TI1_SetConfig+0xd4>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d00f      	beq.n	8005caa <TIM_TI1_SetConfig+0x66>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	4a23      	ldr	r2, [pc, #140]	; (8005d1c <TIM_TI1_SetConfig+0xd8>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d00b      	beq.n	8005caa <TIM_TI1_SetConfig+0x66>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	4a22      	ldr	r2, [pc, #136]	; (8005d20 <TIM_TI1_SetConfig+0xdc>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d007      	beq.n	8005caa <TIM_TI1_SetConfig+0x66>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	4a21      	ldr	r2, [pc, #132]	; (8005d24 <TIM_TI1_SetConfig+0xe0>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d003      	beq.n	8005caa <TIM_TI1_SetConfig+0x66>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	4a20      	ldr	r2, [pc, #128]	; (8005d28 <TIM_TI1_SetConfig+0xe4>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d101      	bne.n	8005cae <TIM_TI1_SetConfig+0x6a>
 8005caa:	2301      	movs	r3, #1
 8005cac:	e000      	b.n	8005cb0 <TIM_TI1_SetConfig+0x6c>
 8005cae:	2300      	movs	r3, #0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d008      	beq.n	8005cc6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	f023 0303 	bic.w	r3, r3, #3
 8005cba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	617b      	str	r3, [r7, #20]
 8005cc4:	e003      	b.n	8005cce <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f043 0301 	orr.w	r3, r3, #1
 8005ccc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	011b      	lsls	r3, r3, #4
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	f023 030a 	bic.w	r3, r3, #10
 8005ce8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	f003 030a 	and.w	r3, r3, #10
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	621a      	str	r2, [r3, #32]
}
 8005d02:	bf00      	nop
 8005d04:	371c      	adds	r7, #28
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	40010000 	.word	0x40010000
 8005d14:	40000400 	.word	0x40000400
 8005d18:	40000800 	.word	0x40000800
 8005d1c:	40000c00 	.word	0x40000c00
 8005d20:	40010400 	.word	0x40010400
 8005d24:	40014000 	.word	0x40014000
 8005d28:	40001800 	.word	0x40001800

08005d2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b087      	sub	sp, #28
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
 8005d3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	f023 0201 	bic.w	r2, r3, #1
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	011b      	lsls	r3, r3, #4
 8005d5c:	693a      	ldr	r2, [r7, #16]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f023 030a 	bic.w	r3, r3, #10
 8005d68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	621a      	str	r2, [r3, #32]
}
 8005d7e:	bf00      	nop
 8005d80:	371c      	adds	r7, #28
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b087      	sub	sp, #28
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	60f8      	str	r0, [r7, #12]
 8005d92:	60b9      	str	r1, [r7, #8]
 8005d94:	607a      	str	r2, [r7, #4]
 8005d96:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6a1b      	ldr	r3, [r3, #32]
 8005d9c:	f023 0210 	bic.w	r2, r3, #16
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005db6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	021b      	lsls	r3, r3, #8
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	031b      	lsls	r3, r3, #12
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	697a      	ldr	r2, [r7, #20]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ddc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	011b      	lsls	r3, r3, #4
 8005de2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	621a      	str	r2, [r3, #32]
}
 8005df8:	bf00      	nop
 8005dfa:	371c      	adds	r7, #28
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b087      	sub	sp, #28
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6a1b      	ldr	r3, [r3, #32]
 8005e14:	f023 0210 	bic.w	r2, r3, #16
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	699b      	ldr	r3, [r3, #24]
 8005e20:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e2e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	031b      	lsls	r3, r3, #12
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e40:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	011b      	lsls	r3, r3, #4
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	621a      	str	r2, [r3, #32]
}
 8005e58:	bf00      	nop
 8005e5a:	371c      	adds	r7, #28
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b087      	sub	sp, #28
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
 8005e70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	69db      	ldr	r3, [r3, #28]
 8005e82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6a1b      	ldr	r3, [r3, #32]
 8005e88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f023 0303 	bic.w	r3, r3, #3
 8005e90:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ea0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	011b      	lsls	r3, r3, #4
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	697a      	ldr	r2, [r7, #20]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005eb4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	021b      	lsls	r3, r3, #8
 8005eba:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	697a      	ldr	r2, [r7, #20]
 8005ec8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	621a      	str	r2, [r3, #32]
}
 8005ed0:	bf00      	nop
 8005ed2:	371c      	adds	r7, #28
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b087      	sub	sp, #28
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
 8005ee8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6a1b      	ldr	r3, [r3, #32]
 8005f00:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f08:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	021b      	lsls	r3, r3, #8
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f1a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	031b      	lsls	r3, r3, #12
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005f2e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	031b      	lsls	r3, r3, #12
 8005f34:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005f38:	693a      	ldr	r2, [r7, #16]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	621a      	str	r2, [r3, #32]
}
 8005f4a:	bf00      	nop
 8005f4c:	371c      	adds	r7, #28
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b085      	sub	sp, #20
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
 8005f5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f6e:	683a      	ldr	r2, [r7, #0]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	f043 0307 	orr.w	r3, r3, #7
 8005f78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	609a      	str	r2, [r3, #8]
}
 8005f80:	bf00      	nop
 8005f82:	3714      	adds	r7, #20
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b087      	sub	sp, #28
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
 8005f98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	021a      	lsls	r2, r3, #8
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	431a      	orrs	r2, r3
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	609a      	str	r2, [r3, #8]
}
 8005fc0:	bf00      	nop
 8005fc2:	371c      	adds	r7, #28
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b087      	sub	sp, #28
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	f003 031f 	and.w	r3, r3, #31
 8005fde:	2201      	movs	r2, #1
 8005fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6a1a      	ldr	r2, [r3, #32]
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	43db      	mvns	r3, r3
 8005fee:	401a      	ands	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6a1a      	ldr	r2, [r3, #32]
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	f003 031f 	and.w	r3, r3, #31
 8005ffe:	6879      	ldr	r1, [r7, #4]
 8006000:	fa01 f303 	lsl.w	r3, r1, r3
 8006004:	431a      	orrs	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	621a      	str	r2, [r3, #32]
}
 800600a:	bf00      	nop
 800600c:	371c      	adds	r7, #28
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
	...

08006018 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006028:	2b01      	cmp	r3, #1
 800602a:	d101      	bne.n	8006030 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800602c:	2302      	movs	r3, #2
 800602e:	e05a      	b.n	80060e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2202      	movs	r2, #2
 800603c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006056:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	4313      	orrs	r3, r2
 8006060:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a21      	ldr	r2, [pc, #132]	; (80060f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d022      	beq.n	80060ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800607c:	d01d      	beq.n	80060ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a1d      	ldr	r2, [pc, #116]	; (80060f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d018      	beq.n	80060ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a1b      	ldr	r2, [pc, #108]	; (80060fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d013      	beq.n	80060ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a1a      	ldr	r2, [pc, #104]	; (8006100 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d00e      	beq.n	80060ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a18      	ldr	r2, [pc, #96]	; (8006104 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d009      	beq.n	80060ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a17      	ldr	r2, [pc, #92]	; (8006108 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d004      	beq.n	80060ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a15      	ldr	r2, [pc, #84]	; (800610c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d10c      	bne.n	80060d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68ba      	ldr	r2, [r7, #8]
 80060d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3714      	adds	r7, #20
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	40010000 	.word	0x40010000
 80060f8:	40000400 	.word	0x40000400
 80060fc:	40000800 	.word	0x40000800
 8006100:	40000c00 	.word	0x40000c00
 8006104:	40010400 	.word	0x40010400
 8006108:	40014000 	.word	0x40014000
 800610c:	40001800 	.word	0x40001800

08006110 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800611a:	2300      	movs	r3, #0
 800611c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006124:	2b01      	cmp	r3, #1
 8006126:	d101      	bne.n	800612c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006128:	2302      	movs	r3, #2
 800612a:	e03d      	b.n	80061a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	4313      	orrs	r3, r2
 8006140:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	4313      	orrs	r3, r2
 800614e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	4313      	orrs	r3, r2
 800615c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4313      	orrs	r3, r2
 800616a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	4313      	orrs	r3, r2
 8006178:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	695b      	ldr	r3, [r3, #20]
 8006184:	4313      	orrs	r3, r2
 8006186:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	69db      	ldr	r3, [r3, #28]
 8006192:	4313      	orrs	r3, r2
 8006194:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061dc:	b084      	sub	sp, #16
 80061de:	b580      	push	{r7, lr}
 80061e0:	b084      	sub	sp, #16
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
 80061e6:	f107 001c 	add.w	r0, r7, #28
 80061ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d122      	bne.n	800623a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006208:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800621c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800621e:	2b01      	cmp	r3, #1
 8006220:	d105      	bne.n	800622e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f9c0 	bl	80065b4 <USB_CoreReset>
 8006234:	4603      	mov	r3, r0
 8006236:	73fb      	strb	r3, [r7, #15]
 8006238:	e01a      	b.n	8006270 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f9b4 	bl	80065b4 <USB_CoreReset>
 800624c:	4603      	mov	r3, r0
 800624e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006252:	2b00      	cmp	r3, #0
 8006254:	d106      	bne.n	8006264 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	639a      	str	r2, [r3, #56]	; 0x38
 8006262:	e005      	b.n	8006270 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006268:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006272:	2b01      	cmp	r3, #1
 8006274:	d10b      	bne.n	800628e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	f043 0206 	orr.w	r2, r3, #6
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f043 0220 	orr.w	r2, r3, #32
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800628e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006290:	4618      	mov	r0, r3
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800629a:	b004      	add	sp, #16
 800629c:	4770      	bx	lr

0800629e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800629e:	b480      	push	{r7}
 80062a0:	b083      	sub	sp, #12
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f043 0201 	orr.w	r2, r3, #1
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f023 0201 	bic.w	r2, r3, #1
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	370c      	adds	r7, #12
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b084      	sub	sp, #16
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
 80062ea:	460b      	mov	r3, r1
 80062ec:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80062ee:	2300      	movs	r3, #0
 80062f0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80062fe:	78fb      	ldrb	r3, [r7, #3]
 8006300:	2b01      	cmp	r3, #1
 8006302:	d115      	bne.n	8006330 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006310:	2001      	movs	r0, #1
 8006312:	f7fa ffbf 	bl	8001294 <HAL_Delay>
      ms++;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	3301      	adds	r3, #1
 800631a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 f93a 	bl	8006596 <USB_GetMode>
 8006322:	4603      	mov	r3, r0
 8006324:	2b01      	cmp	r3, #1
 8006326:	d01e      	beq.n	8006366 <USB_SetCurrentMode+0x84>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2b31      	cmp	r3, #49	; 0x31
 800632c:	d9f0      	bls.n	8006310 <USB_SetCurrentMode+0x2e>
 800632e:	e01a      	b.n	8006366 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006330:	78fb      	ldrb	r3, [r7, #3]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d115      	bne.n	8006362 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006342:	2001      	movs	r0, #1
 8006344:	f7fa ffa6 	bl	8001294 <HAL_Delay>
      ms++;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	3301      	adds	r3, #1
 800634c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 f921 	bl	8006596 <USB_GetMode>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d005      	beq.n	8006366 <USB_SetCurrentMode+0x84>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2b31      	cmp	r3, #49	; 0x31
 800635e:	d9f0      	bls.n	8006342 <USB_SetCurrentMode+0x60>
 8006360:	e001      	b.n	8006366 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e005      	b.n	8006372 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2b32      	cmp	r3, #50	; 0x32
 800636a:	d101      	bne.n	8006370 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e000      	b.n	8006372 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
	...

0800637c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006386:	2300      	movs	r3, #0
 8006388:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	3301      	adds	r3, #1
 800638e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	4a13      	ldr	r2, [pc, #76]	; (80063e0 <USB_FlushTxFifo+0x64>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d901      	bls.n	800639c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	e01b      	b.n	80063d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	daf2      	bge.n	800638a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80063a4:	2300      	movs	r3, #0
 80063a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	019b      	lsls	r3, r3, #6
 80063ac:	f043 0220 	orr.w	r2, r3, #32
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	3301      	adds	r3, #1
 80063b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	4a08      	ldr	r2, [pc, #32]	; (80063e0 <USB_FlushTxFifo+0x64>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d901      	bls.n	80063c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e006      	b.n	80063d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	f003 0320 	and.w	r3, r3, #32
 80063ce:	2b20      	cmp	r3, #32
 80063d0:	d0f0      	beq.n	80063b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3714      	adds	r7, #20
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr
 80063e0:	00030d40 	.word	0x00030d40

080063e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b085      	sub	sp, #20
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063ec:	2300      	movs	r3, #0
 80063ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	3301      	adds	r3, #1
 80063f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	4a11      	ldr	r2, [pc, #68]	; (8006440 <USB_FlushRxFifo+0x5c>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d901      	bls.n	8006402 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e018      	b.n	8006434 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	2b00      	cmp	r3, #0
 8006408:	daf2      	bge.n	80063f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800640a:	2300      	movs	r3, #0
 800640c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2210      	movs	r2, #16
 8006412:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	3301      	adds	r3, #1
 8006418:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	4a08      	ldr	r2, [pc, #32]	; (8006440 <USB_FlushRxFifo+0x5c>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d901      	bls.n	8006426 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e006      	b.n	8006434 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	f003 0310 	and.w	r3, r3, #16
 800642e:	2b10      	cmp	r3, #16
 8006430:	d0f0      	beq.n	8006414 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3714      	adds	r7, #20
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr
 8006440:	00030d40 	.word	0x00030d40

08006444 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006444:	b480      	push	{r7}
 8006446:	b089      	sub	sp, #36	; 0x24
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	4611      	mov	r1, r2
 8006450:	461a      	mov	r2, r3
 8006452:	460b      	mov	r3, r1
 8006454:	71fb      	strb	r3, [r7, #7]
 8006456:	4613      	mov	r3, r2
 8006458:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006462:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006466:	2b00      	cmp	r3, #0
 8006468:	d123      	bne.n	80064b2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800646a:	88bb      	ldrh	r3, [r7, #4]
 800646c:	3303      	adds	r3, #3
 800646e:	089b      	lsrs	r3, r3, #2
 8006470:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006472:	2300      	movs	r3, #0
 8006474:	61bb      	str	r3, [r7, #24]
 8006476:	e018      	b.n	80064aa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006478:	79fb      	ldrb	r3, [r7, #7]
 800647a:	031a      	lsls	r2, r3, #12
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	4413      	add	r3, r2
 8006480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006484:	461a      	mov	r2, r3
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	3301      	adds	r3, #1
 8006490:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	3301      	adds	r3, #1
 8006496:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	3301      	adds	r3, #1
 800649c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	3301      	adds	r3, #1
 80064a2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	3301      	adds	r3, #1
 80064a8:	61bb      	str	r3, [r7, #24]
 80064aa:	69ba      	ldr	r2, [r7, #24]
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d3e2      	bcc.n	8006478 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3724      	adds	r7, #36	; 0x24
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b08b      	sub	sp, #44	; 0x2c
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	4613      	mov	r3, r2
 80064cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80064d6:	88fb      	ldrh	r3, [r7, #6]
 80064d8:	089b      	lsrs	r3, r3, #2
 80064da:	b29b      	uxth	r3, r3
 80064dc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80064de:	88fb      	ldrh	r3, [r7, #6]
 80064e0:	f003 0303 	and.w	r3, r3, #3
 80064e4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80064e6:	2300      	movs	r3, #0
 80064e8:	623b      	str	r3, [r7, #32]
 80064ea:	e014      	b.n	8006516 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f6:	601a      	str	r2, [r3, #0]
    pDest++;
 80064f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fa:	3301      	adds	r3, #1
 80064fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80064fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006500:	3301      	adds	r3, #1
 8006502:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006506:	3301      	adds	r3, #1
 8006508:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650c:	3301      	adds	r3, #1
 800650e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006510:	6a3b      	ldr	r3, [r7, #32]
 8006512:	3301      	adds	r3, #1
 8006514:	623b      	str	r3, [r7, #32]
 8006516:	6a3a      	ldr	r2, [r7, #32]
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	429a      	cmp	r2, r3
 800651c:	d3e6      	bcc.n	80064ec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800651e:	8bfb      	ldrh	r3, [r7, #30]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d01e      	beq.n	8006562 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006524:	2300      	movs	r3, #0
 8006526:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800652e:	461a      	mov	r2, r3
 8006530:	f107 0310 	add.w	r3, r7, #16
 8006534:	6812      	ldr	r2, [r2, #0]
 8006536:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006538:	693a      	ldr	r2, [r7, #16]
 800653a:	6a3b      	ldr	r3, [r7, #32]
 800653c:	b2db      	uxtb	r3, r3
 800653e:	00db      	lsls	r3, r3, #3
 8006540:	fa22 f303 	lsr.w	r3, r2, r3
 8006544:	b2da      	uxtb	r2, r3
 8006546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006548:	701a      	strb	r2, [r3, #0]
      i++;
 800654a:	6a3b      	ldr	r3, [r7, #32]
 800654c:	3301      	adds	r3, #1
 800654e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006552:	3301      	adds	r3, #1
 8006554:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006556:	8bfb      	ldrh	r3, [r7, #30]
 8006558:	3b01      	subs	r3, #1
 800655a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800655c:	8bfb      	ldrh	r3, [r7, #30]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1ea      	bne.n	8006538 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006564:	4618      	mov	r0, r3
 8006566:	372c      	adds	r7, #44	; 0x2c
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	695b      	ldr	r3, [r3, #20]
 800657c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	4013      	ands	r3, r2
 8006586:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006588:	68fb      	ldr	r3, [r7, #12]
}
 800658a:	4618      	mov	r0, r3
 800658c:	3714      	adds	r7, #20
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr

08006596 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006596:	b480      	push	{r7}
 8006598:	b083      	sub	sp, #12
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	f003 0301 	and.w	r3, r3, #1
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	370c      	adds	r7, #12
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
	...

080065b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065bc:	2300      	movs	r3, #0
 80065be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	3301      	adds	r3, #1
 80065c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	4a13      	ldr	r2, [pc, #76]	; (8006618 <USB_CoreReset+0x64>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d901      	bls.n	80065d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e01b      	b.n	800660a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	daf2      	bge.n	80065c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80065da:	2300      	movs	r3, #0
 80065dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	f043 0201 	orr.w	r2, r3, #1
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	3301      	adds	r3, #1
 80065ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	4a09      	ldr	r2, [pc, #36]	; (8006618 <USB_CoreReset+0x64>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d901      	bls.n	80065fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e006      	b.n	800660a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	f003 0301 	and.w	r3, r3, #1
 8006604:	2b01      	cmp	r3, #1
 8006606:	d0f0      	beq.n	80065ea <USB_CoreReset+0x36>

  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3714      	adds	r7, #20
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	00030d40 	.word	0x00030d40

0800661c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800661c:	b084      	sub	sp, #16
 800661e:	b580      	push	{r7, lr}
 8006620:	b086      	sub	sp, #24
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
 8006626:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800662a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800662e:	2300      	movs	r3, #0
 8006630:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800663c:	461a      	mov	r2, r3
 800663e:	2300      	movs	r3, #0
 8006640:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006646:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006652:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800666a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800666e:	2b00      	cmp	r3, #0
 8006670:	d018      	beq.n	80066a4 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006674:	2b01      	cmp	r3, #1
 8006676:	d10a      	bne.n	800668e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006686:	f043 0304 	orr.w	r3, r3, #4
 800668a:	6013      	str	r3, [r2, #0]
 800668c:	e014      	b.n	80066b8 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800669c:	f023 0304 	bic.w	r3, r3, #4
 80066a0:	6013      	str	r3, [r2, #0]
 80066a2:	e009      	b.n	80066b8 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066b2:	f023 0304 	bic.w	r3, r3, #4
 80066b6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80066b8:	2110      	movs	r1, #16
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f7ff fe5e 	bl	800637c <USB_FlushTxFifo>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d001      	beq.n	80066ca <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7ff fe8a 	bl	80063e4 <USB_FlushRxFifo>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d001      	beq.n	80066da <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80066da:	2300      	movs	r3, #0
 80066dc:	613b      	str	r3, [r7, #16]
 80066de:	e015      	b.n	800670c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ec:	461a      	mov	r2, r3
 80066ee:	f04f 33ff 	mov.w	r3, #4294967295
 80066f2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	015a      	lsls	r2, r3, #5
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006700:	461a      	mov	r2, r3
 8006702:	2300      	movs	r3, #0
 8006704:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	3301      	adds	r3, #1
 800670a:	613b      	str	r3, [r7, #16]
 800670c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	429a      	cmp	r2, r3
 8006712:	d3e5      	bcc.n	80066e0 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f04f 32ff 	mov.w	r2, #4294967295
 8006720:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00b      	beq.n	8006746 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006734:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a13      	ldr	r2, [pc, #76]	; (8006788 <USB_HostInit+0x16c>)
 800673a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a13      	ldr	r2, [pc, #76]	; (800678c <USB_HostInit+0x170>)
 8006740:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006744:	e009      	b.n	800675a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2280      	movs	r2, #128	; 0x80
 800674a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a10      	ldr	r2, [pc, #64]	; (8006790 <USB_HostInit+0x174>)
 8006750:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a0f      	ldr	r2, [pc, #60]	; (8006794 <USB_HostInit+0x178>)
 8006756:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800675a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675c:	2b00      	cmp	r3, #0
 800675e:	d105      	bne.n	800676c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	f043 0210 	orr.w	r2, r3, #16
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	699a      	ldr	r2, [r3, #24]
 8006770:	4b09      	ldr	r3, [pc, #36]	; (8006798 <USB_HostInit+0x17c>)
 8006772:	4313      	orrs	r3, r2
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006778:	7dfb      	ldrb	r3, [r7, #23]
}
 800677a:	4618      	mov	r0, r3
 800677c:	3718      	adds	r7, #24
 800677e:	46bd      	mov	sp, r7
 8006780:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006784:	b004      	add	sp, #16
 8006786:	4770      	bx	lr
 8006788:	01000200 	.word	0x01000200
 800678c:	00e00300 	.word	0x00e00300
 8006790:	00600080 	.word	0x00600080
 8006794:	004000e0 	.word	0x004000e0
 8006798:	a3200008 	.word	0xa3200008

0800679c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	460b      	mov	r3, r1
 80067a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80067ba:	f023 0303 	bic.w	r3, r3, #3
 80067be:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	78fb      	ldrb	r3, [r7, #3]
 80067ca:	f003 0303 	and.w	r3, r3, #3
 80067ce:	68f9      	ldr	r1, [r7, #12]
 80067d0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80067d4:	4313      	orrs	r3, r2
 80067d6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80067d8:	78fb      	ldrb	r3, [r7, #3]
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d107      	bne.n	80067ee <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067e4:	461a      	mov	r2, r3
 80067e6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80067ea:	6053      	str	r3, [r2, #4]
 80067ec:	e009      	b.n	8006802 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80067ee:	78fb      	ldrb	r3, [r7, #3]
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d106      	bne.n	8006802 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067fa:	461a      	mov	r2, r3
 80067fc:	f241 7370 	movw	r3, #6000	; 0x1770
 8006800:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3714      	adds	r7, #20
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800681c:	2300      	movs	r3, #0
 800681e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006830:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800683a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800683e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006840:	2064      	movs	r0, #100	; 0x64
 8006842:	f7fa fd27 	bl	8001294 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800684e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006852:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006854:	200a      	movs	r0, #10
 8006856:	f7fa fd1d 	bl	8001294 <HAL_Delay>

  return HAL_OK;
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	3710      	adds	r7, #16
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	460b      	mov	r3, r1
 800686e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006874:	2300      	movs	r3, #0
 8006876:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006888:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006890:	2b00      	cmp	r3, #0
 8006892:	d109      	bne.n	80068a8 <USB_DriveVbus+0x44>
 8006894:	78fb      	ldrb	r3, [r7, #3]
 8006896:	2b01      	cmp	r3, #1
 8006898:	d106      	bne.n	80068a8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80068a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80068a6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068b2:	d109      	bne.n	80068c8 <USB_DriveVbus+0x64>
 80068b4:	78fb      	ldrb	r3, [r7, #3]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d106      	bne.n	80068c8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80068c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068c6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3714      	adds	r7, #20
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr

080068d6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80068d6:	b480      	push	{r7}
 80068d8:	b085      	sub	sp, #20
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80068e2:	2300      	movs	r3, #0
 80068e4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	0c5b      	lsrs	r3, r3, #17
 80068f4:	f003 0303 	and.w	r3, r3, #3
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	b29b      	uxth	r3, r3
}
 800691a:	4618      	mov	r0, r3
 800691c:	3714      	adds	r7, #20
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
	...

08006928 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b088      	sub	sp, #32
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	4608      	mov	r0, r1
 8006932:	4611      	mov	r1, r2
 8006934:	461a      	mov	r2, r3
 8006936:	4603      	mov	r3, r0
 8006938:	70fb      	strb	r3, [r7, #3]
 800693a:	460b      	mov	r3, r1
 800693c:	70bb      	strb	r3, [r7, #2]
 800693e:	4613      	mov	r3, r2
 8006940:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006942:	2300      	movs	r3, #0
 8006944:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800694a:	78fb      	ldrb	r3, [r7, #3]
 800694c:	015a      	lsls	r2, r3, #5
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	4413      	add	r3, r2
 8006952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006956:	461a      	mov	r2, r3
 8006958:	f04f 33ff 	mov.w	r3, #4294967295
 800695c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800695e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006962:	2b03      	cmp	r3, #3
 8006964:	d87e      	bhi.n	8006a64 <USB_HC_Init+0x13c>
 8006966:	a201      	add	r2, pc, #4	; (adr r2, 800696c <USB_HC_Init+0x44>)
 8006968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800696c:	0800697d 	.word	0x0800697d
 8006970:	08006a27 	.word	0x08006a27
 8006974:	0800697d 	.word	0x0800697d
 8006978:	080069e9 	.word	0x080069e9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800697c:	78fb      	ldrb	r3, [r7, #3]
 800697e:	015a      	lsls	r2, r3, #5
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	4413      	add	r3, r2
 8006984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006988:	461a      	mov	r2, r3
 800698a:	f240 439d 	movw	r3, #1181	; 0x49d
 800698e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006990:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006994:	2b00      	cmp	r3, #0
 8006996:	da10      	bge.n	80069ba <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006998:	78fb      	ldrb	r3, [r7, #3]
 800699a:	015a      	lsls	r2, r3, #5
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	4413      	add	r3, r2
 80069a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	78fa      	ldrb	r2, [r7, #3]
 80069a8:	0151      	lsls	r1, r2, #5
 80069aa:	693a      	ldr	r2, [r7, #16]
 80069ac:	440a      	add	r2, r1
 80069ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069b6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80069b8:	e057      	b.n	8006a6a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d051      	beq.n	8006a6a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80069c6:	78fb      	ldrb	r3, [r7, #3]
 80069c8:	015a      	lsls	r2, r3, #5
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	4413      	add	r3, r2
 80069ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	78fa      	ldrb	r2, [r7, #3]
 80069d6:	0151      	lsls	r1, r2, #5
 80069d8:	693a      	ldr	r2, [r7, #16]
 80069da:	440a      	add	r2, r1
 80069dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069e0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80069e4:	60d3      	str	r3, [r2, #12]
      break;
 80069e6:	e040      	b.n	8006a6a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80069e8:	78fb      	ldrb	r3, [r7, #3]
 80069ea:	015a      	lsls	r2, r3, #5
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	4413      	add	r3, r2
 80069f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069f4:	461a      	mov	r2, r3
 80069f6:	f240 639d 	movw	r3, #1693	; 0x69d
 80069fa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80069fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	da34      	bge.n	8006a6e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006a04:	78fb      	ldrb	r3, [r7, #3]
 8006a06:	015a      	lsls	r2, r3, #5
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	78fa      	ldrb	r2, [r7, #3]
 8006a14:	0151      	lsls	r1, r2, #5
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	440a      	add	r2, r1
 8006a1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a22:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006a24:	e023      	b.n	8006a6e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006a26:	78fb      	ldrb	r3, [r7, #3]
 8006a28:	015a      	lsls	r2, r3, #5
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a32:	461a      	mov	r2, r3
 8006a34:	f240 2325 	movw	r3, #549	; 0x225
 8006a38:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006a3a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	da17      	bge.n	8006a72 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006a42:	78fb      	ldrb	r3, [r7, #3]
 8006a44:	015a      	lsls	r2, r3, #5
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	4413      	add	r3, r2
 8006a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	78fa      	ldrb	r2, [r7, #3]
 8006a52:	0151      	lsls	r1, r2, #5
 8006a54:	693a      	ldr	r2, [r7, #16]
 8006a56:	440a      	add	r2, r1
 8006a58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a5c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006a60:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006a62:	e006      	b.n	8006a72 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	77fb      	strb	r3, [r7, #31]
      break;
 8006a68:	e004      	b.n	8006a74 <USB_HC_Init+0x14c>
      break;
 8006a6a:	bf00      	nop
 8006a6c:	e002      	b.n	8006a74 <USB_HC_Init+0x14c>
      break;
 8006a6e:	bf00      	nop
 8006a70:	e000      	b.n	8006a74 <USB_HC_Init+0x14c>
      break;
 8006a72:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006a74:	78fb      	ldrb	r3, [r7, #3]
 8006a76:	015a      	lsls	r2, r3, #5
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	78fa      	ldrb	r2, [r7, #3]
 8006a84:	0151      	lsls	r1, r2, #5
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	440a      	add	r2, r1
 8006a8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a8e:	f043 0302 	orr.w	r3, r3, #2
 8006a92:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a9a:	699a      	ldr	r2, [r3, #24]
 8006a9c:	78fb      	ldrb	r3, [r7, #3]
 8006a9e:	f003 030f 	and.w	r3, r3, #15
 8006aa2:	2101      	movs	r1, #1
 8006aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8006aa8:	6939      	ldr	r1, [r7, #16]
 8006aaa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	699b      	ldr	r3, [r3, #24]
 8006ab6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006abe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	da03      	bge.n	8006ace <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006aca:	61bb      	str	r3, [r7, #24]
 8006acc:	e001      	b.n	8006ad2 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7ff feff 	bl	80068d6 <USB_GetHostSpeed>
 8006ad8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006ada:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d106      	bne.n	8006af0 <USB_HC_Init+0x1c8>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	d003      	beq.n	8006af0 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006ae8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006aec:	617b      	str	r3, [r7, #20]
 8006aee:	e001      	b.n	8006af4 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006af0:	2300      	movs	r3, #0
 8006af2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006af4:	787b      	ldrb	r3, [r7, #1]
 8006af6:	059b      	lsls	r3, r3, #22
 8006af8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006afc:	78bb      	ldrb	r3, [r7, #2]
 8006afe:	02db      	lsls	r3, r3, #11
 8006b00:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006b04:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006b06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006b0a:	049b      	lsls	r3, r3, #18
 8006b0c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006b10:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006b12:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006b14:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006b18:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006b1e:	78fb      	ldrb	r3, [r7, #3]
 8006b20:	0159      	lsls	r1, r3, #5
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	440b      	add	r3, r1
 8006b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b2a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006b30:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006b32:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006b36:	2b03      	cmp	r3, #3
 8006b38:	d003      	beq.n	8006b42 <USB_HC_Init+0x21a>
 8006b3a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d10f      	bne.n	8006b62 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006b42:	78fb      	ldrb	r3, [r7, #3]
 8006b44:	015a      	lsls	r2, r3, #5
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	4413      	add	r3, r2
 8006b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	78fa      	ldrb	r2, [r7, #3]
 8006b52:	0151      	lsls	r1, r2, #5
 8006b54:	693a      	ldr	r2, [r7, #16]
 8006b56:	440a      	add	r2, r1
 8006b58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b60:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006b62:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3720      	adds	r7, #32
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b08c      	sub	sp, #48	; 0x30
 8006b70:	af02      	add	r7, sp, #8
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	4613      	mov	r3, r2
 8006b78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	785b      	ldrb	r3, [r3, #1]
 8006b82:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006b84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b88:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d02d      	beq.n	8006bf2 <USB_HC_StartXfer+0x86>
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	791b      	ldrb	r3, [r3, #4]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d129      	bne.n	8006bf2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006b9e:	79fb      	ldrb	r3, [r7, #7]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d117      	bne.n	8006bd4 <USB_HC_StartXfer+0x68>
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	79db      	ldrb	r3, [r3, #7]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d003      	beq.n	8006bb4 <USB_HC_StartXfer+0x48>
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	79db      	ldrb	r3, [r3, #7]
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d10f      	bne.n	8006bd4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	015a      	lsls	r2, r3, #5
 8006bb8:	6a3b      	ldr	r3, [r7, #32]
 8006bba:	4413      	add	r3, r2
 8006bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	69fa      	ldr	r2, [r7, #28]
 8006bc4:	0151      	lsls	r1, r2, #5
 8006bc6:	6a3a      	ldr	r2, [r7, #32]
 8006bc8:	440a      	add	r2, r1
 8006bca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006bd4:	79fb      	ldrb	r3, [r7, #7]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d10b      	bne.n	8006bf2 <USB_HC_StartXfer+0x86>
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	795b      	ldrb	r3, [r3, #5]
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d107      	bne.n	8006bf2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	785b      	ldrb	r3, [r3, #1]
 8006be6:	4619      	mov	r1, r3
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f000 fa0f 	bl	800700c <USB_DoPing>
      return HAL_OK;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	e0f8      	b.n	8006de4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d018      	beq.n	8006c2c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	695b      	ldr	r3, [r3, #20]
 8006bfe:	68ba      	ldr	r2, [r7, #8]
 8006c00:	8912      	ldrh	r2, [r2, #8]
 8006c02:	4413      	add	r3, r2
 8006c04:	3b01      	subs	r3, #1
 8006c06:	68ba      	ldr	r2, [r7, #8]
 8006c08:	8912      	ldrh	r2, [r2, #8]
 8006c0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c0e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006c10:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006c12:	8b7b      	ldrh	r3, [r7, #26]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d90b      	bls.n	8006c30 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006c18:	8b7b      	ldrh	r3, [r7, #26]
 8006c1a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006c1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	8912      	ldrh	r2, [r2, #8]
 8006c22:	fb03 f202 	mul.w	r2, r3, r2
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	611a      	str	r2, [r3, #16]
 8006c2a:	e001      	b.n	8006c30 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	78db      	ldrb	r3, [r3, #3]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d007      	beq.n	8006c48 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006c38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	8912      	ldrh	r2, [r2, #8]
 8006c3e:	fb03 f202 	mul.w	r2, r3, r2
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	611a      	str	r2, [r3, #16]
 8006c46:	e003      	b.n	8006c50 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	695a      	ldr	r2, [r3, #20]
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006c58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c5a:	04d9      	lsls	r1, r3, #19
 8006c5c:	4b63      	ldr	r3, [pc, #396]	; (8006dec <USB_HC_StartXfer+0x280>)
 8006c5e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006c60:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	7a9b      	ldrb	r3, [r3, #10]
 8006c66:	075b      	lsls	r3, r3, #29
 8006c68:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006c6c:	69f9      	ldr	r1, [r7, #28]
 8006c6e:	0148      	lsls	r0, r1, #5
 8006c70:	6a39      	ldr	r1, [r7, #32]
 8006c72:	4401      	add	r1, r0
 8006c74:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006c78:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006c7a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006c7c:	79fb      	ldrb	r3, [r7, #7]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d009      	beq.n	8006c96 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	68d9      	ldr	r1, [r3, #12]
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	015a      	lsls	r2, r3, #5
 8006c8a:	6a3b      	ldr	r3, [r7, #32]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c92:	460a      	mov	r2, r1
 8006c94:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006c96:	6a3b      	ldr	r3, [r7, #32]
 8006c98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	f003 0301 	and.w	r3, r3, #1
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	bf0c      	ite	eq
 8006ca6:	2301      	moveq	r3, #1
 8006ca8:	2300      	movne	r3, #0
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	015a      	lsls	r2, r3, #5
 8006cb2:	6a3b      	ldr	r3, [r7, #32]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	69fa      	ldr	r2, [r7, #28]
 8006cbe:	0151      	lsls	r1, r2, #5
 8006cc0:	6a3a      	ldr	r2, [r7, #32]
 8006cc2:	440a      	add	r2, r1
 8006cc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cc8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006ccc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	015a      	lsls	r2, r3, #5
 8006cd2:	6a3b      	ldr	r3, [r7, #32]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	7e7b      	ldrb	r3, [r7, #25]
 8006cde:	075b      	lsls	r3, r3, #29
 8006ce0:	69f9      	ldr	r1, [r7, #28]
 8006ce2:	0148      	lsls	r0, r1, #5
 8006ce4:	6a39      	ldr	r1, [r7, #32]
 8006ce6:	4401      	add	r1, r0
 8006ce8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006cec:	4313      	orrs	r3, r2
 8006cee:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	015a      	lsls	r2, r3, #5
 8006cf4:	6a3b      	ldr	r3, [r7, #32]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d06:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	78db      	ldrb	r3, [r3, #3]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d004      	beq.n	8006d1a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d16:	613b      	str	r3, [r7, #16]
 8006d18:	e003      	b.n	8006d22 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d20:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d28:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	015a      	lsls	r2, r3, #5
 8006d2e:	6a3b      	ldr	r3, [r7, #32]
 8006d30:	4413      	add	r3, r2
 8006d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d36:	461a      	mov	r2, r3
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006d3c:	79fb      	ldrb	r3, [r7, #7]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d001      	beq.n	8006d46 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006d42:	2300      	movs	r3, #0
 8006d44:	e04e      	b.n	8006de4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	78db      	ldrb	r3, [r3, #3]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d149      	bne.n	8006de2 <USB_HC_StartXfer+0x276>
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	695b      	ldr	r3, [r3, #20]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d045      	beq.n	8006de2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	79db      	ldrb	r3, [r3, #7]
 8006d5a:	2b03      	cmp	r3, #3
 8006d5c:	d830      	bhi.n	8006dc0 <USB_HC_StartXfer+0x254>
 8006d5e:	a201      	add	r2, pc, #4	; (adr r2, 8006d64 <USB_HC_StartXfer+0x1f8>)
 8006d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d64:	08006d75 	.word	0x08006d75
 8006d68:	08006d99 	.word	0x08006d99
 8006d6c:	08006d75 	.word	0x08006d75
 8006d70:	08006d99 	.word	0x08006d99
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	3303      	adds	r3, #3
 8006d7a:	089b      	lsrs	r3, r3, #2
 8006d7c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006d7e:	8afa      	ldrh	r2, [r7, #22]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d91c      	bls.n	8006dc4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	699b      	ldr	r3, [r3, #24]
 8006d8e:	f043 0220 	orr.w	r2, r3, #32
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	619a      	str	r2, [r3, #24]
        }
        break;
 8006d96:	e015      	b.n	8006dc4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	3303      	adds	r3, #3
 8006d9e:	089b      	lsrs	r3, r3, #2
 8006da0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006da2:	8afa      	ldrh	r2, [r7, #22]
 8006da4:	6a3b      	ldr	r3, [r7, #32]
 8006da6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d90a      	bls.n	8006dc8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	619a      	str	r2, [r3, #24]
        }
        break;
 8006dbe:	e003      	b.n	8006dc8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006dc0:	bf00      	nop
 8006dc2:	e002      	b.n	8006dca <USB_HC_StartXfer+0x25e>
        break;
 8006dc4:	bf00      	nop
 8006dc6:	e000      	b.n	8006dca <USB_HC_StartXfer+0x25e>
        break;
 8006dc8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	68d9      	ldr	r1, [r3, #12]
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	785a      	ldrb	r2, [r3, #1]
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	2000      	movs	r0, #0
 8006dda:	9000      	str	r0, [sp, #0]
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f7ff fb31 	bl	8006444 <USB_WritePacket>
  }

  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3728      	adds	r7, #40	; 0x28
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	1ff80000 	.word	0x1ff80000

08006df0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e02:	695b      	ldr	r3, [r3, #20]
 8006e04:	b29b      	uxth	r3, r3
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3714      	adds	r7, #20
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr

08006e12 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006e12:	b480      	push	{r7}
 8006e14:	b089      	sub	sp, #36	; 0x24
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006e22:	78fb      	ldrb	r3, [r7, #3]
 8006e24:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006e26:	2300      	movs	r3, #0
 8006e28:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	015a      	lsls	r2, r3, #5
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	4413      	add	r3, r2
 8006e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	0c9b      	lsrs	r3, r3, #18
 8006e3a:	f003 0303 	and.w	r3, r3, #3
 8006e3e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	015a      	lsls	r2, r3, #5
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	4413      	add	r3, r2
 8006e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	0fdb      	lsrs	r3, r3, #31
 8006e50:	f003 0301 	and.w	r3, r3, #1
 8006e54:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f003 0320 	and.w	r3, r3, #32
 8006e5e:	2b20      	cmp	r3, #32
 8006e60:	d104      	bne.n	8006e6c <USB_HC_Halt+0x5a>
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d101      	bne.n	8006e6c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	e0c8      	b.n	8006ffe <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d002      	beq.n	8006e78 <USB_HC_Halt+0x66>
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	2b02      	cmp	r3, #2
 8006e76:	d163      	bne.n	8006f40 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	015a      	lsls	r2, r3, #5
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	4413      	add	r3, r2
 8006e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	69ba      	ldr	r2, [r7, #24]
 8006e88:	0151      	lsls	r1, r2, #5
 8006e8a:	69fa      	ldr	r2, [r7, #28]
 8006e8c:	440a      	add	r2, r1
 8006e8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e96:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	f003 0320 	and.w	r3, r3, #32
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f040 80ab 	bne.w	8006ffc <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eaa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d133      	bne.n	8006f1a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	015a      	lsls	r2, r3, #5
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	4413      	add	r3, r2
 8006eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	69ba      	ldr	r2, [r7, #24]
 8006ec2:	0151      	lsls	r1, r2, #5
 8006ec4:	69fa      	ldr	r2, [r7, #28]
 8006ec6:	440a      	add	r2, r1
 8006ec8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ecc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ed0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	015a      	lsls	r2, r3, #5
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	4413      	add	r3, r2
 8006eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	69ba      	ldr	r2, [r7, #24]
 8006ee2:	0151      	lsls	r1, r2, #5
 8006ee4:	69fa      	ldr	r2, [r7, #28]
 8006ee6:	440a      	add	r2, r1
 8006ee8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006eec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ef0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006efe:	d81d      	bhi.n	8006f3c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	015a      	lsls	r2, r3, #5
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	4413      	add	r3, r2
 8006f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f16:	d0ec      	beq.n	8006ef2 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f18:	e070      	b.n	8006ffc <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	015a      	lsls	r2, r3, #5
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	4413      	add	r3, r2
 8006f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	69ba      	ldr	r2, [r7, #24]
 8006f2a:	0151      	lsls	r1, r2, #5
 8006f2c:	69fa      	ldr	r2, [r7, #28]
 8006f2e:	440a      	add	r2, r1
 8006f30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f38:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f3a:	e05f      	b.n	8006ffc <USB_HC_Halt+0x1ea>
            break;
 8006f3c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f3e:	e05d      	b.n	8006ffc <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	015a      	lsls	r2, r3, #5
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	4413      	add	r3, r2
 8006f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	69ba      	ldr	r2, [r7, #24]
 8006f50:	0151      	lsls	r1, r2, #5
 8006f52:	69fa      	ldr	r2, [r7, #28]
 8006f54:	440a      	add	r2, r1
 8006f56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f5e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d133      	bne.n	8006fd8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	015a      	lsls	r2, r3, #5
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	4413      	add	r3, r2
 8006f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	69ba      	ldr	r2, [r7, #24]
 8006f80:	0151      	lsls	r1, r2, #5
 8006f82:	69fa      	ldr	r2, [r7, #28]
 8006f84:	440a      	add	r2, r1
 8006f86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f8e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	015a      	lsls	r2, r3, #5
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	4413      	add	r3, r2
 8006f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	69ba      	ldr	r2, [r7, #24]
 8006fa0:	0151      	lsls	r1, r2, #5
 8006fa2:	69fa      	ldr	r2, [r7, #28]
 8006fa4:	440a      	add	r2, r1
 8006fa6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006faa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fae:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fbc:	d81d      	bhi.n	8006ffa <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	015a      	lsls	r2, r3, #5
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fd4:	d0ec      	beq.n	8006fb0 <USB_HC_Halt+0x19e>
 8006fd6:	e011      	b.n	8006ffc <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	015a      	lsls	r2, r3, #5
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	4413      	add	r3, r2
 8006fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	69ba      	ldr	r2, [r7, #24]
 8006fe8:	0151      	lsls	r1, r2, #5
 8006fea:	69fa      	ldr	r2, [r7, #28]
 8006fec:	440a      	add	r2, r1
 8006fee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ff2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ff6:	6013      	str	r3, [r2, #0]
 8006ff8:	e000      	b.n	8006ffc <USB_HC_Halt+0x1ea>
          break;
 8006ffa:	bf00      	nop
    }
  }

  return HAL_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3724      	adds	r7, #36	; 0x24
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
	...

0800700c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800700c:	b480      	push	{r7}
 800700e:	b087      	sub	sp, #28
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	460b      	mov	r3, r1
 8007016:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800701c:	78fb      	ldrb	r3, [r7, #3]
 800701e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007020:	2301      	movs	r3, #1
 8007022:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	04da      	lsls	r2, r3, #19
 8007028:	4b15      	ldr	r3, [pc, #84]	; (8007080 <USB_DoPing+0x74>)
 800702a:	4013      	ands	r3, r2
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	0151      	lsls	r1, r2, #5
 8007030:	697a      	ldr	r2, [r7, #20]
 8007032:	440a      	add	r2, r1
 8007034:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007038:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800703c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	015a      	lsls	r2, r3, #5
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	4413      	add	r3, r2
 8007046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007054:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800705c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	015a      	lsls	r2, r3, #5
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	4413      	add	r3, r2
 8007066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800706a:	461a      	mov	r2, r3
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	371c      	adds	r7, #28
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	1ff80000 	.word	0x1ff80000

08007084 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b088      	sub	sp, #32
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800708c:	2300      	movs	r3, #0
 800708e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007094:	2300      	movs	r3, #0
 8007096:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f7ff f911 	bl	80062c0 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800709e:	2110      	movs	r1, #16
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f7ff f96b 	bl	800637c <USB_FlushTxFifo>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d001      	beq.n	80070b0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f7ff f997 	bl	80063e4 <USB_FlushRxFifo>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d001      	beq.n	80070c0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80070c0:	2300      	movs	r3, #0
 80070c2:	61bb      	str	r3, [r7, #24]
 80070c4:	e01f      	b.n	8007106 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	015a      	lsls	r2, r3, #5
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	4413      	add	r3, r2
 80070ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070dc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070e4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80070ec:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	015a      	lsls	r2, r3, #5
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	4413      	add	r3, r2
 80070f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070fa:	461a      	mov	r2, r3
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	3301      	adds	r3, #1
 8007104:	61bb      	str	r3, [r7, #24]
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	2b0f      	cmp	r3, #15
 800710a:	d9dc      	bls.n	80070c6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800710c:	2300      	movs	r3, #0
 800710e:	61bb      	str	r3, [r7, #24]
 8007110:	e034      	b.n	800717c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	015a      	lsls	r2, r3, #5
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	4413      	add	r3, r2
 800711a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007128:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007130:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007138:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	015a      	lsls	r2, r3, #5
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	4413      	add	r3, r2
 8007142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007146:	461a      	mov	r2, r3
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	3301      	adds	r3, #1
 8007150:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007158:	d80c      	bhi.n	8007174 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	015a      	lsls	r2, r3, #5
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	4413      	add	r3, r2
 8007162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800716c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007170:	d0ec      	beq.n	800714c <USB_StopHost+0xc8>
 8007172:	e000      	b.n	8007176 <USB_StopHost+0xf2>
        break;
 8007174:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	3301      	adds	r3, #1
 800717a:	61bb      	str	r3, [r7, #24]
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	2b0f      	cmp	r3, #15
 8007180:	d9c7      	bls.n	8007112 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007188:	461a      	mov	r2, r3
 800718a:	f04f 33ff 	mov.w	r3, #4294967295
 800718e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f04f 32ff 	mov.w	r2, #4294967295
 8007196:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f7ff f880 	bl	800629e <USB_EnableGlobalInt>

  return ret;
 800719e:	7ffb      	ldrb	r3, [r7, #31]
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3720      	adds	r7, #32
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80071a8:	b590      	push	{r4, r7, lr}
 80071aa:	b089      	sub	sp, #36	; 0x24
 80071ac:	af04      	add	r7, sp, #16
 80071ae:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80071b0:	2301      	movs	r3, #1
 80071b2:	2202      	movs	r2, #2
 80071b4:	2102      	movs	r1, #2
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fc66 	bl	8007a88 <USBH_FindInterface>
 80071bc:	4603      	mov	r3, r0
 80071be:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80071c0:	7bfb      	ldrb	r3, [r7, #15]
 80071c2:	2bff      	cmp	r3, #255	; 0xff
 80071c4:	d002      	beq.n	80071cc <USBH_CDC_InterfaceInit+0x24>
 80071c6:	7bfb      	ldrb	r3, [r7, #15]
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d901      	bls.n	80071d0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80071cc:	2302      	movs	r3, #2
 80071ce:	e13d      	b.n	800744c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80071d0:	7bfb      	ldrb	r3, [r7, #15]
 80071d2:	4619      	mov	r1, r3
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 fc3b 	bl	8007a50 <USBH_SelectInterface>
 80071da:	4603      	mov	r3, r0
 80071dc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80071de:	7bbb      	ldrb	r3, [r7, #14]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d001      	beq.n	80071e8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80071e4:	2302      	movs	r3, #2
 80071e6:	e131      	b.n	800744c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80071ee:	2050      	movs	r0, #80	; 0x50
 80071f0:	f002 fafa 	bl	80097e8 <malloc>
 80071f4:	4603      	mov	r3, r0
 80071f6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071fe:	69db      	ldr	r3, [r3, #28]
 8007200:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d101      	bne.n	800720c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007208:	2302      	movs	r3, #2
 800720a:	e11f      	b.n	800744c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800720c:	2250      	movs	r2, #80	; 0x50
 800720e:	2100      	movs	r1, #0
 8007210:	68b8      	ldr	r0, [r7, #8]
 8007212:	f002 faf9 	bl	8009808 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007216:	7bfb      	ldrb	r3, [r7, #15]
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	211a      	movs	r1, #26
 800721c:	fb01 f303 	mul.w	r3, r1, r3
 8007220:	4413      	add	r3, r2
 8007222:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	b25b      	sxtb	r3, r3
 800722a:	2b00      	cmp	r3, #0
 800722c:	da15      	bge.n	800725a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800722e:	7bfb      	ldrb	r3, [r7, #15]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	211a      	movs	r1, #26
 8007234:	fb01 f303 	mul.w	r3, r1, r3
 8007238:	4413      	add	r3, r2
 800723a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800723e:	781a      	ldrb	r2, [r3, #0]
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007244:	7bfb      	ldrb	r3, [r7, #15]
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	211a      	movs	r1, #26
 800724a:	fb01 f303 	mul.w	r3, r1, r3
 800724e:	4413      	add	r3, r2
 8007250:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007254:	881a      	ldrh	r2, [r3, #0]
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	785b      	ldrb	r3, [r3, #1]
 800725e:	4619      	mov	r1, r3
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f001 ff2c 	bl	80090be <USBH_AllocPipe>
 8007266:	4603      	mov	r3, r0
 8007268:	461a      	mov	r2, r3
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	7819      	ldrb	r1, [r3, #0]
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	7858      	ldrb	r0, [r3, #1]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007282:	68ba      	ldr	r2, [r7, #8]
 8007284:	8952      	ldrh	r2, [r2, #10]
 8007286:	9202      	str	r2, [sp, #8]
 8007288:	2203      	movs	r2, #3
 800728a:	9201      	str	r2, [sp, #4]
 800728c:	9300      	str	r3, [sp, #0]
 800728e:	4623      	mov	r3, r4
 8007290:	4602      	mov	r2, r0
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f001 fee4 	bl	8009060 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	2200      	movs	r2, #0
 800729e:	4619      	mov	r1, r3
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f002 f9f3 	bl	800968c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80072a6:	2300      	movs	r3, #0
 80072a8:	2200      	movs	r2, #0
 80072aa:	210a      	movs	r1, #10
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 fbeb 	bl	8007a88 <USBH_FindInterface>
 80072b2:	4603      	mov	r3, r0
 80072b4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80072b6:	7bfb      	ldrb	r3, [r7, #15]
 80072b8:	2bff      	cmp	r3, #255	; 0xff
 80072ba:	d002      	beq.n	80072c2 <USBH_CDC_InterfaceInit+0x11a>
 80072bc:	7bfb      	ldrb	r3, [r7, #15]
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d901      	bls.n	80072c6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80072c2:	2302      	movs	r3, #2
 80072c4:	e0c2      	b.n	800744c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80072c6:	7bfb      	ldrb	r3, [r7, #15]
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	211a      	movs	r1, #26
 80072cc:	fb01 f303 	mul.w	r3, r1, r3
 80072d0:	4413      	add	r3, r2
 80072d2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	b25b      	sxtb	r3, r3
 80072da:	2b00      	cmp	r3, #0
 80072dc:	da16      	bge.n	800730c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80072de:	7bfb      	ldrb	r3, [r7, #15]
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	211a      	movs	r1, #26
 80072e4:	fb01 f303 	mul.w	r3, r1, r3
 80072e8:	4413      	add	r3, r2
 80072ea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80072ee:	781a      	ldrb	r2, [r3, #0]
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80072f4:	7bfb      	ldrb	r3, [r7, #15]
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	211a      	movs	r1, #26
 80072fa:	fb01 f303 	mul.w	r3, r1, r3
 80072fe:	4413      	add	r3, r2
 8007300:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007304:	881a      	ldrh	r2, [r3, #0]
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	835a      	strh	r2, [r3, #26]
 800730a:	e015      	b.n	8007338 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800730c:	7bfb      	ldrb	r3, [r7, #15]
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	211a      	movs	r1, #26
 8007312:	fb01 f303 	mul.w	r3, r1, r3
 8007316:	4413      	add	r3, r2
 8007318:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800731c:	781a      	ldrb	r2, [r3, #0]
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007322:	7bfb      	ldrb	r3, [r7, #15]
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	211a      	movs	r1, #26
 8007328:	fb01 f303 	mul.w	r3, r1, r3
 800732c:	4413      	add	r3, r2
 800732e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007332:	881a      	ldrh	r2, [r3, #0]
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007338:	7bfb      	ldrb	r3, [r7, #15]
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	211a      	movs	r1, #26
 800733e:	fb01 f303 	mul.w	r3, r1, r3
 8007342:	4413      	add	r3, r2
 8007344:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	b25b      	sxtb	r3, r3
 800734c:	2b00      	cmp	r3, #0
 800734e:	da16      	bge.n	800737e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007350:	7bfb      	ldrb	r3, [r7, #15]
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	211a      	movs	r1, #26
 8007356:	fb01 f303 	mul.w	r3, r1, r3
 800735a:	4413      	add	r3, r2
 800735c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007360:	781a      	ldrb	r2, [r3, #0]
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007366:	7bfb      	ldrb	r3, [r7, #15]
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	211a      	movs	r1, #26
 800736c:	fb01 f303 	mul.w	r3, r1, r3
 8007370:	4413      	add	r3, r2
 8007372:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007376:	881a      	ldrh	r2, [r3, #0]
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	835a      	strh	r2, [r3, #26]
 800737c:	e015      	b.n	80073aa <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800737e:	7bfb      	ldrb	r3, [r7, #15]
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	211a      	movs	r1, #26
 8007384:	fb01 f303 	mul.w	r3, r1, r3
 8007388:	4413      	add	r3, r2
 800738a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800738e:	781a      	ldrb	r2, [r3, #0]
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007394:	7bfb      	ldrb	r3, [r7, #15]
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	211a      	movs	r1, #26
 800739a:	fb01 f303 	mul.w	r3, r1, r3
 800739e:	4413      	add	r3, r2
 80073a0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80073a4:	881a      	ldrh	r2, [r3, #0]
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	7b9b      	ldrb	r3, [r3, #14]
 80073ae:	4619      	mov	r1, r3
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f001 fe84 	bl	80090be <USBH_AllocPipe>
 80073b6:	4603      	mov	r3, r0
 80073b8:	461a      	mov	r2, r3
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	7bdb      	ldrb	r3, [r3, #15]
 80073c2:	4619      	mov	r1, r3
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f001 fe7a 	bl	80090be <USBH_AllocPipe>
 80073ca:	4603      	mov	r3, r0
 80073cc:	461a      	mov	r2, r3
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	7b59      	ldrb	r1, [r3, #13]
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	7b98      	ldrb	r0, [r3, #14]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80073e6:	68ba      	ldr	r2, [r7, #8]
 80073e8:	8b12      	ldrh	r2, [r2, #24]
 80073ea:	9202      	str	r2, [sp, #8]
 80073ec:	2202      	movs	r2, #2
 80073ee:	9201      	str	r2, [sp, #4]
 80073f0:	9300      	str	r3, [sp, #0]
 80073f2:	4623      	mov	r3, r4
 80073f4:	4602      	mov	r2, r0
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f001 fe32 	bl	8009060 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	7b19      	ldrb	r1, [r3, #12]
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	7bd8      	ldrb	r0, [r3, #15]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007410:	68ba      	ldr	r2, [r7, #8]
 8007412:	8b52      	ldrh	r2, [r2, #26]
 8007414:	9202      	str	r2, [sp, #8]
 8007416:	2202      	movs	r2, #2
 8007418:	9201      	str	r2, [sp, #4]
 800741a:	9300      	str	r3, [sp, #0]
 800741c:	4623      	mov	r3, r4
 800741e:	4602      	mov	r2, r0
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f001 fe1d 	bl	8009060 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	2200      	movs	r2, #0
 800742a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	7b5b      	ldrb	r3, [r3, #13]
 8007432:	2200      	movs	r2, #0
 8007434:	4619      	mov	r1, r3
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f002 f928 	bl	800968c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	7b1b      	ldrb	r3, [r3, #12]
 8007440:	2200      	movs	r2, #0
 8007442:	4619      	mov	r1, r3
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f002 f921 	bl	800968c <USBH_LL_SetToggle>

  return USBH_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3714      	adds	r7, #20
 8007450:	46bd      	mov	sp, r7
 8007452:	bd90      	pop	{r4, r7, pc}

08007454 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007462:	69db      	ldr	r3, [r3, #28]
 8007464:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00e      	beq.n	800748c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	4619      	mov	r1, r3
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f001 fe12 	bl	800909e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	4619      	mov	r1, r3
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f001 fe3d 	bl	8009100 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2200      	movs	r2, #0
 800748a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	7b1b      	ldrb	r3, [r3, #12]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00e      	beq.n	80074b2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	7b1b      	ldrb	r3, [r3, #12]
 8007498:	4619      	mov	r1, r3
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f001 fdff 	bl	800909e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	7b1b      	ldrb	r3, [r3, #12]
 80074a4:	4619      	mov	r1, r3
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f001 fe2a 	bl	8009100 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	7b5b      	ldrb	r3, [r3, #13]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00e      	beq.n	80074d8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	7b5b      	ldrb	r3, [r3, #13]
 80074be:	4619      	mov	r1, r3
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f001 fdec 	bl	800909e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	7b5b      	ldrb	r3, [r3, #13]
 80074ca:	4619      	mov	r1, r3
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f001 fe17 	bl	8009100 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2200      	movs	r2, #0
 80074d6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074de:	69db      	ldr	r3, [r3, #28]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00b      	beq.n	80074fc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074ea:	69db      	ldr	r3, [r3, #28]
 80074ec:	4618      	mov	r0, r3
 80074ee:	f002 f983 	bl	80097f8 <free>
    phost->pActiveClass->pData = 0U;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074f8:	2200      	movs	r2, #0
 80074fa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b084      	sub	sp, #16
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007514:	69db      	ldr	r3, [r3, #28]
 8007516:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	3340      	adds	r3, #64	; 0x40
 800751c:	4619      	mov	r1, r3
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 f8b1 	bl	8007686 <GetLineCoding>
 8007524:	4603      	mov	r3, r0
 8007526:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007528:	7afb      	ldrb	r3, [r7, #11]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d105      	bne.n	800753a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007534:	2102      	movs	r1, #2
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800753a:	7afb      	ldrb	r3, [r7, #11]
}
 800753c:	4618      	mov	r0, r3
 800753e:	3710      	adds	r7, #16
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800754c:	2301      	movs	r3, #1
 800754e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007550:	2300      	movs	r3, #0
 8007552:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800755a:	69db      	ldr	r3, [r3, #28]
 800755c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007564:	2b04      	cmp	r3, #4
 8007566:	d877      	bhi.n	8007658 <USBH_CDC_Process+0x114>
 8007568:	a201      	add	r2, pc, #4	; (adr r2, 8007570 <USBH_CDC_Process+0x2c>)
 800756a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756e:	bf00      	nop
 8007570:	08007585 	.word	0x08007585
 8007574:	0800758b 	.word	0x0800758b
 8007578:	080075bb 	.word	0x080075bb
 800757c:	0800762f 	.word	0x0800762f
 8007580:	0800763d 	.word	0x0800763d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007584:	2300      	movs	r3, #0
 8007586:	73fb      	strb	r3, [r7, #15]
      break;
 8007588:	e06d      	b.n	8007666 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800758e:	4619      	mov	r1, r3
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 f897 	bl	80076c4 <SetLineCoding>
 8007596:	4603      	mov	r3, r0
 8007598:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800759a:	7bbb      	ldrb	r3, [r7, #14]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d104      	bne.n	80075aa <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	2202      	movs	r2, #2
 80075a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80075a8:	e058      	b.n	800765c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80075aa:	7bbb      	ldrb	r3, [r7, #14]
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d055      	beq.n	800765c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	2204      	movs	r2, #4
 80075b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80075b8:	e050      	b.n	800765c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	3340      	adds	r3, #64	; 0x40
 80075be:	4619      	mov	r1, r3
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 f860 	bl	8007686 <GetLineCoding>
 80075c6:	4603      	mov	r3, r0
 80075c8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80075ca:	7bbb      	ldrb	r3, [r7, #14]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d126      	bne.n	800761e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075e2:	791b      	ldrb	r3, [r3, #4]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d13b      	bne.n	8007660 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075f2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d133      	bne.n	8007660 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007602:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007604:	429a      	cmp	r2, r3
 8007606:	d12b      	bne.n	8007660 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007610:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007612:	429a      	cmp	r2, r3
 8007614:	d124      	bne.n	8007660 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f958 	bl	80078cc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800761c:	e020      	b.n	8007660 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800761e:	7bbb      	ldrb	r3, [r7, #14]
 8007620:	2b01      	cmp	r3, #1
 8007622:	d01d      	beq.n	8007660 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	2204      	movs	r2, #4
 8007628:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800762c:	e018      	b.n	8007660 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f867 	bl	8007702 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 f8da 	bl	80077ee <CDC_ProcessReception>
      break;
 800763a:	e014      	b.n	8007666 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800763c:	2100      	movs	r1, #0
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 ffef 	bl	8008622 <USBH_ClrFeature>
 8007644:	4603      	mov	r3, r0
 8007646:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007648:	7bbb      	ldrb	r3, [r7, #14]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d10a      	bne.n	8007664 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	2200      	movs	r2, #0
 8007652:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007656:	e005      	b.n	8007664 <USBH_CDC_Process+0x120>

    default:
      break;
 8007658:	bf00      	nop
 800765a:	e004      	b.n	8007666 <USBH_CDC_Process+0x122>
      break;
 800765c:	bf00      	nop
 800765e:	e002      	b.n	8007666 <USBH_CDC_Process+0x122>
      break;
 8007660:	bf00      	nop
 8007662:	e000      	b.n	8007666 <USBH_CDC_Process+0x122>
      break;
 8007664:	bf00      	nop

  }

  return status;
 8007666:	7bfb      	ldrb	r3, [r7, #15]
}
 8007668:	4618      	mov	r0, r3
 800766a:	3710      	adds	r7, #16
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b082      	sub	sp, #8
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	22a1      	movs	r2, #161	; 0xa1
 8007694:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2221      	movs	r2, #33	; 0x21
 800769a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2207      	movs	r2, #7
 80076ac:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	2207      	movs	r2, #7
 80076b2:	4619      	mov	r1, r3
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f001 fa81 	bl	8008bbc <USBH_CtlReq>
 80076ba:	4603      	mov	r3, r0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2221      	movs	r2, #33	; 0x21
 80076d2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2220      	movs	r2, #32
 80076d8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2207      	movs	r2, #7
 80076ea:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	2207      	movs	r2, #7
 80076f0:	4619      	mov	r1, r3
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f001 fa62 	bl	8008bbc <USBH_CtlReq>
 80076f8:	4603      	mov	r3, r0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3708      	adds	r7, #8
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b086      	sub	sp, #24
 8007706:	af02      	add	r7, sp, #8
 8007708:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007710:	69db      	ldr	r3, [r3, #28]
 8007712:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007714:	2300      	movs	r3, #0
 8007716:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800771e:	2b01      	cmp	r3, #1
 8007720:	d002      	beq.n	8007728 <CDC_ProcessTransmission+0x26>
 8007722:	2b02      	cmp	r3, #2
 8007724:	d023      	beq.n	800776e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007726:	e05e      	b.n	80077e6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	8b12      	ldrh	r2, [r2, #24]
 8007730:	4293      	cmp	r3, r2
 8007732:	d90b      	bls.n	800774c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	69d9      	ldr	r1, [r3, #28]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	8b1a      	ldrh	r2, [r3, #24]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	7b5b      	ldrb	r3, [r3, #13]
 8007740:	2001      	movs	r0, #1
 8007742:	9000      	str	r0, [sp, #0]
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f001 fc48 	bl	8008fda <USBH_BulkSendData>
 800774a:	e00b      	b.n	8007764 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007754:	b29a      	uxth	r2, r3
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	7b5b      	ldrb	r3, [r3, #13]
 800775a:	2001      	movs	r0, #1
 800775c:	9000      	str	r0, [sp, #0]
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f001 fc3b 	bl	8008fda <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2202      	movs	r2, #2
 8007768:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800776c:	e03b      	b.n	80077e6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	7b5b      	ldrb	r3, [r3, #13]
 8007772:	4619      	mov	r1, r3
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f001 ff5f 	bl	8009638 <USBH_LL_GetURBState>
 800777a:	4603      	mov	r3, r0
 800777c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800777e:	7afb      	ldrb	r3, [r7, #11]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d128      	bne.n	80077d6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	8b12      	ldrh	r2, [r2, #24]
 800778c:	4293      	cmp	r3, r2
 800778e:	d90e      	bls.n	80077ae <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	8b12      	ldrh	r2, [r2, #24]
 8007798:	1a9a      	subs	r2, r3, r2
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	69db      	ldr	r3, [r3, #28]
 80077a2:	68fa      	ldr	r2, [r7, #12]
 80077a4:	8b12      	ldrh	r2, [r2, #24]
 80077a6:	441a      	add	r2, r3
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	61da      	str	r2, [r3, #28]
 80077ac:	e002      	b.n	80077b4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2200      	movs	r2, #0
 80077b2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d004      	beq.n	80077c6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80077c4:	e00e      	b.n	80077e4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2200      	movs	r2, #0
 80077ca:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 f868 	bl	80078a4 <USBH_CDC_TransmitCallback>
      break;
 80077d4:	e006      	b.n	80077e4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80077d6:	7afb      	ldrb	r3, [r7, #11]
 80077d8:	2b02      	cmp	r3, #2
 80077da:	d103      	bne.n	80077e4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80077e4:	bf00      	nop
  }
}
 80077e6:	bf00      	nop
 80077e8:	3710      	adds	r7, #16
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}

080077ee <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b086      	sub	sp, #24
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077fc:	69db      	ldr	r3, [r3, #28]
 80077fe:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007800:	2300      	movs	r3, #0
 8007802:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800780a:	2b03      	cmp	r3, #3
 800780c:	d002      	beq.n	8007814 <CDC_ProcessReception+0x26>
 800780e:	2b04      	cmp	r3, #4
 8007810:	d00e      	beq.n	8007830 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007812:	e043      	b.n	800789c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	6a19      	ldr	r1, [r3, #32]
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	8b5a      	ldrh	r2, [r3, #26]
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	7b1b      	ldrb	r3, [r3, #12]
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f001 fbff 	bl	8009024 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	2204      	movs	r2, #4
 800782a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800782e:	e035      	b.n	800789c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	7b1b      	ldrb	r3, [r3, #12]
 8007834:	4619      	mov	r1, r3
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f001 fefe 	bl	8009638 <USBH_LL_GetURBState>
 800783c:	4603      	mov	r3, r0
 800783e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007840:	7cfb      	ldrb	r3, [r7, #19]
 8007842:	2b01      	cmp	r3, #1
 8007844:	d129      	bne.n	800789a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	7b1b      	ldrb	r3, [r3, #12]
 800784a:	4619      	mov	r1, r3
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f001 fe61 	bl	8009514 <USBH_LL_GetLastXferSize>
 8007852:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	429a      	cmp	r2, r3
 800785c:	d016      	beq.n	800788c <CDC_ProcessReception+0x9e>
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	8b5b      	ldrh	r3, [r3, #26]
 8007862:	461a      	mov	r2, r3
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	4293      	cmp	r3, r2
 8007868:	d910      	bls.n	800788c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	1ad2      	subs	r2, r2, r3
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	6a1a      	ldr	r2, [r3, #32]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	441a      	add	r2, r3
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	2203      	movs	r2, #3
 8007886:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800788a:	e006      	b.n	800789a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	2200      	movs	r2, #0
 8007890:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 f80f 	bl	80078b8 <USBH_CDC_ReceiveCallback>
      break;
 800789a:	bf00      	nop
  }
}
 800789c:	bf00      	nop
 800789e:	3718      	adds	r7, #24
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80078ac:	bf00      	nop
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80078d4:	bf00      	nop
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	4613      	mov	r3, r2
 80078ec:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d101      	bne.n	80078f8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80078f4:	2302      	movs	r3, #2
 80078f6:	e029      	b.n	800794c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	79fa      	ldrb	r2, [r7, #7]
 80078fc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2200      	movs	r2, #0
 8007904:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f000 f81f 	bl	8007954 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2200      	movs	r2, #0
 800791a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2200      	movs	r2, #0
 800792a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d003      	beq.n	8007944 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	68ba      	ldr	r2, [r7, #8]
 8007940:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007944:	68f8      	ldr	r0, [r7, #12]
 8007946:	f001 fd31 	bl	80093ac <USBH_LL_Init>

  return USBH_OK;
 800794a:	2300      	movs	r3, #0
}
 800794c:	4618      	mov	r0, r3
 800794e:	3710      	adds	r7, #16
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007954:	b480      	push	{r7}
 8007956:	b085      	sub	sp, #20
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800795c:	2300      	movs	r3, #0
 800795e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007960:	2300      	movs	r3, #0
 8007962:	60fb      	str	r3, [r7, #12]
 8007964:	e009      	b.n	800797a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	33e0      	adds	r3, #224	; 0xe0
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	4413      	add	r3, r2
 8007970:	2200      	movs	r2, #0
 8007972:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	3301      	adds	r3, #1
 8007978:	60fb      	str	r3, [r7, #12]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2b0f      	cmp	r3, #15
 800797e:	d9f2      	bls.n	8007966 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007980:	2300      	movs	r3, #0
 8007982:	60fb      	str	r3, [r7, #12]
 8007984:	e009      	b.n	800799a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	4413      	add	r3, r2
 800798c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007990:	2200      	movs	r2, #0
 8007992:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	3301      	adds	r3, #1
 8007998:	60fb      	str	r3, [r7, #12]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079a0:	d3f1      	bcc.n	8007986 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2201      	movs	r2, #1
 80079b2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2240      	movs	r2, #64	; 0x40
 80079c6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2201      	movs	r2, #1
 80079da:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3714      	adds	r7, #20
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b085      	sub	sp, #20
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007a06:	2300      	movs	r3, #0
 8007a08:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d016      	beq.n	8007a3e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d10e      	bne.n	8007a38 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007a20:	1c59      	adds	r1, r3, #1
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	33de      	adds	r3, #222	; 0xde
 8007a2c:	6839      	ldr	r1, [r7, #0]
 8007a2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007a32:	2300      	movs	r3, #0
 8007a34:	73fb      	strb	r3, [r7, #15]
 8007a36:	e004      	b.n	8007a42 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007a38:	2302      	movs	r3, #2
 8007a3a:	73fb      	strb	r3, [r7, #15]
 8007a3c:	e001      	b.n	8007a42 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007a3e:	2302      	movs	r3, #2
 8007a40:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3714      	adds	r7, #20
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b085      	sub	sp, #20
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	460b      	mov	r3, r1
 8007a5a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007a66:	78fa      	ldrb	r2, [r7, #3]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d204      	bcs.n	8007a76 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	78fa      	ldrb	r2, [r7, #3]
 8007a70:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007a74:	e001      	b.n	8007a7a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007a76:	2302      	movs	r3, #2
 8007a78:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3714      	adds	r7, #20
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b087      	sub	sp, #28
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	4608      	mov	r0, r1
 8007a92:	4611      	mov	r1, r2
 8007a94:	461a      	mov	r2, r3
 8007a96:	4603      	mov	r3, r0
 8007a98:	70fb      	strb	r3, [r7, #3]
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	70bb      	strb	r3, [r7, #2]
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007ab0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007ab2:	e025      	b.n	8007b00 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007ab4:	7dfb      	ldrb	r3, [r7, #23]
 8007ab6:	221a      	movs	r2, #26
 8007ab8:	fb02 f303 	mul.w	r3, r2, r3
 8007abc:	3308      	adds	r3, #8
 8007abe:	68fa      	ldr	r2, [r7, #12]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	3302      	adds	r3, #2
 8007ac4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	795b      	ldrb	r3, [r3, #5]
 8007aca:	78fa      	ldrb	r2, [r7, #3]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d002      	beq.n	8007ad6 <USBH_FindInterface+0x4e>
 8007ad0:	78fb      	ldrb	r3, [r7, #3]
 8007ad2:	2bff      	cmp	r3, #255	; 0xff
 8007ad4:	d111      	bne.n	8007afa <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007ada:	78ba      	ldrb	r2, [r7, #2]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d002      	beq.n	8007ae6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007ae0:	78bb      	ldrb	r3, [r7, #2]
 8007ae2:	2bff      	cmp	r3, #255	; 0xff
 8007ae4:	d109      	bne.n	8007afa <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007aea:	787a      	ldrb	r2, [r7, #1]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d002      	beq.n	8007af6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007af0:	787b      	ldrb	r3, [r7, #1]
 8007af2:	2bff      	cmp	r3, #255	; 0xff
 8007af4:	d101      	bne.n	8007afa <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007af6:	7dfb      	ldrb	r3, [r7, #23]
 8007af8:	e006      	b.n	8007b08 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007afa:	7dfb      	ldrb	r3, [r7, #23]
 8007afc:	3301      	adds	r3, #1
 8007afe:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007b00:	7dfb      	ldrb	r3, [r7, #23]
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d9d6      	bls.n	8007ab4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007b06:	23ff      	movs	r3, #255	; 0xff
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	371c      	adds	r7, #28
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f001 fc81 	bl	8009424 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007b22:	2101      	movs	r1, #1
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f001 fd9a 	bl	800965e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3708      	adds	r7, #8
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b088      	sub	sp, #32
 8007b38:	af04      	add	r7, sp, #16
 8007b3a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007b40:	2300      	movs	r3, #0
 8007b42:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d102      	bne.n	8007b56 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2203      	movs	r2, #3
 8007b54:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	2b0b      	cmp	r3, #11
 8007b5e:	f200 81be 	bhi.w	8007ede <USBH_Process+0x3aa>
 8007b62:	a201      	add	r2, pc, #4	; (adr r2, 8007b68 <USBH_Process+0x34>)
 8007b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b68:	08007b99 	.word	0x08007b99
 8007b6c:	08007bcb 	.word	0x08007bcb
 8007b70:	08007c33 	.word	0x08007c33
 8007b74:	08007e79 	.word	0x08007e79
 8007b78:	08007edf 	.word	0x08007edf
 8007b7c:	08007cd7 	.word	0x08007cd7
 8007b80:	08007e1f 	.word	0x08007e1f
 8007b84:	08007d0d 	.word	0x08007d0d
 8007b88:	08007d2d 	.word	0x08007d2d
 8007b8c:	08007d4d 	.word	0x08007d4d
 8007b90:	08007d91 	.word	0x08007d91
 8007b94:	08007e61 	.word	0x08007e61
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	f000 819e 	beq.w	8007ee2 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007bac:	20c8      	movs	r0, #200	; 0xc8
 8007bae:	f001 fd9d 	bl	80096ec <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f001 fc93 	bl	80094de <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007bc8:	e18b      	b.n	8007ee2 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d107      	bne.n	8007be4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2202      	movs	r2, #2
 8007be0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007be2:	e18d      	b.n	8007f00 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007bea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bee:	d914      	bls.n	8007c1a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	b2da      	uxtb	r2, r3
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007c06:	2b03      	cmp	r3, #3
 8007c08:	d903      	bls.n	8007c12 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	220d      	movs	r2, #13
 8007c0e:	701a      	strb	r2, [r3, #0]
      break;
 8007c10:	e176      	b.n	8007f00 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	701a      	strb	r2, [r3, #0]
      break;
 8007c18:	e172      	b.n	8007f00 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007c20:	f103 020a 	add.w	r2, r3, #10
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007c2a:	200a      	movs	r0, #10
 8007c2c:	f001 fd5e 	bl	80096ec <USBH_Delay>
      break;
 8007c30:	e166      	b.n	8007f00 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d005      	beq.n	8007c48 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c42:	2104      	movs	r1, #4
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007c48:	2064      	movs	r0, #100	; 0x64
 8007c4a:	f001 fd4f 	bl	80096ec <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f001 fc1e 	bl	8009490 <USBH_LL_GetSpeed>
 8007c54:	4603      	mov	r3, r0
 8007c56:	461a      	mov	r2, r3
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2205      	movs	r2, #5
 8007c62:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007c64:	2100      	movs	r1, #0
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f001 fa29 	bl	80090be <USBH_AllocPipe>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	461a      	mov	r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007c74:	2180      	movs	r1, #128	; 0x80
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f001 fa21 	bl	80090be <USBH_AllocPipe>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	461a      	mov	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	7919      	ldrb	r1, [r3, #4]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007c98:	b292      	uxth	r2, r2
 8007c9a:	9202      	str	r2, [sp, #8]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	9201      	str	r2, [sp, #4]
 8007ca0:	9300      	str	r3, [sp, #0]
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2280      	movs	r2, #128	; 0x80
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f001 f9da 	bl	8009060 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	7959      	ldrb	r1, [r3, #5]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007cc0:	b292      	uxth	r2, r2
 8007cc2:	9202      	str	r2, [sp, #8]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	9201      	str	r2, [sp, #4]
 8007cc8:	9300      	str	r3, [sp, #0]
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2200      	movs	r2, #0
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f001 f9c6 	bl	8009060 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007cd4:	e114      	b.n	8007f00 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 f918 	bl	8007f0c <USBH_HandleEnum>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007ce0:	7bbb      	ldrb	r3, [r7, #14]
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	f040 80fe 	bne.w	8007ee6 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d103      	bne.n	8007d04 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2208      	movs	r2, #8
 8007d00:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007d02:	e0f0      	b.n	8007ee6 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2207      	movs	r2, #7
 8007d08:	701a      	strb	r2, [r3, #0]
      break;
 8007d0a:	e0ec      	b.n	8007ee6 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	f000 80e9 	beq.w	8007eea <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d1e:	2101      	movs	r1, #1
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2208      	movs	r2, #8
 8007d28:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007d2a:	e0de      	b.n	8007eea <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	4619      	mov	r1, r3
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 fc2c 	bl	8008594 <USBH_SetCfg>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	f040 80d5 	bne.w	8007eee <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2209      	movs	r2, #9
 8007d48:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007d4a:	e0d0      	b.n	8007eee <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007d52:	f003 0320 	and.w	r3, r3, #32
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d016      	beq.n	8007d88 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007d5a:	2101      	movs	r1, #1
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 fc3c 	bl	80085da <USBH_SetFeature>
 8007d62:	4603      	mov	r3, r0
 8007d64:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007d66:	7bbb      	ldrb	r3, [r7, #14]
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d103      	bne.n	8007d76 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	220a      	movs	r2, #10
 8007d72:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007d74:	e0bd      	b.n	8007ef2 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8007d76:	7bbb      	ldrb	r3, [r7, #14]
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	2b03      	cmp	r3, #3
 8007d7c:	f040 80b9 	bne.w	8007ef2 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	220a      	movs	r2, #10
 8007d84:	701a      	strb	r2, [r3, #0]
      break;
 8007d86:	e0b4      	b.n	8007ef2 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	220a      	movs	r2, #10
 8007d8c:	701a      	strb	r2, [r3, #0]
      break;
 8007d8e:	e0b0      	b.n	8007ef2 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f000 80ad 	beq.w	8007ef6 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007da4:	2300      	movs	r3, #0
 8007da6:	73fb      	strb	r3, [r7, #15]
 8007da8:	e016      	b.n	8007dd8 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007daa:	7bfa      	ldrb	r2, [r7, #15]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	32de      	adds	r2, #222	; 0xde
 8007db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007db4:	791a      	ldrb	r2, [r3, #4]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d108      	bne.n	8007dd2 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007dc0:	7bfa      	ldrb	r2, [r7, #15]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	32de      	adds	r2, #222	; 0xde
 8007dc6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007dd0:	e005      	b.n	8007dde <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007dd2:	7bfb      	ldrb	r3, [r7, #15]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	73fb      	strb	r3, [r7, #15]
 8007dd8:	7bfb      	ldrb	r3, [r7, #15]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d0e5      	beq.n	8007daa <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d016      	beq.n	8007e16 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	4798      	blx	r3
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d109      	bne.n	8007e0e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2206      	movs	r2, #6
 8007dfe:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e06:	2103      	movs	r1, #3
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e0c:	e073      	b.n	8007ef6 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	220d      	movs	r2, #13
 8007e12:	701a      	strb	r2, [r3, #0]
      break;
 8007e14:	e06f      	b.n	8007ef6 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	220d      	movs	r2, #13
 8007e1a:	701a      	strb	r2, [r3, #0]
      break;
 8007e1c:	e06b      	b.n	8007ef6 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d017      	beq.n	8007e58 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e2e:	691b      	ldr	r3, [r3, #16]
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	4798      	blx	r3
 8007e34:	4603      	mov	r3, r0
 8007e36:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007e38:	7bbb      	ldrb	r3, [r7, #14]
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d103      	bne.n	8007e48 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	220b      	movs	r2, #11
 8007e44:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e46:	e058      	b.n	8007efa <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007e48:	7bbb      	ldrb	r3, [r7, #14]
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	2b02      	cmp	r3, #2
 8007e4e:	d154      	bne.n	8007efa <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	220d      	movs	r2, #13
 8007e54:	701a      	strb	r2, [r3, #0]
      break;
 8007e56:	e050      	b.n	8007efa <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	220d      	movs	r2, #13
 8007e5c:	701a      	strb	r2, [r3, #0]
      break;
 8007e5e:	e04c      	b.n	8007efa <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d049      	beq.n	8007efe <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e70:	695b      	ldr	r3, [r3, #20]
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	4798      	blx	r3
      }
      break;
 8007e76:	e042      	b.n	8007efe <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f7ff fd67 	bl	8007954 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d009      	beq.n	8007ea4 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d005      	beq.n	8007eba <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007eb4:	2105      	movs	r1, #5
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d107      	bne.n	8007ed6 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f7ff fe20 	bl	8007b14 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007ed4:	e014      	b.n	8007f00 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f001 faa4 	bl	8009424 <USBH_LL_Start>
      break;
 8007edc:	e010      	b.n	8007f00 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007ede:	bf00      	nop
 8007ee0:	e00e      	b.n	8007f00 <USBH_Process+0x3cc>
      break;
 8007ee2:	bf00      	nop
 8007ee4:	e00c      	b.n	8007f00 <USBH_Process+0x3cc>
      break;
 8007ee6:	bf00      	nop
 8007ee8:	e00a      	b.n	8007f00 <USBH_Process+0x3cc>
    break;
 8007eea:	bf00      	nop
 8007eec:	e008      	b.n	8007f00 <USBH_Process+0x3cc>
      break;
 8007eee:	bf00      	nop
 8007ef0:	e006      	b.n	8007f00 <USBH_Process+0x3cc>
      break;
 8007ef2:	bf00      	nop
 8007ef4:	e004      	b.n	8007f00 <USBH_Process+0x3cc>
      break;
 8007ef6:	bf00      	nop
 8007ef8:	e002      	b.n	8007f00 <USBH_Process+0x3cc>
      break;
 8007efa:	bf00      	nop
 8007efc:	e000      	b.n	8007f00 <USBH_Process+0x3cc>
      break;
 8007efe:	bf00      	nop
  }
  return USBH_OK;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop

08007f0c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b088      	sub	sp, #32
 8007f10:	af04      	add	r7, sp, #16
 8007f12:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007f14:	2301      	movs	r3, #1
 8007f16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	785b      	ldrb	r3, [r3, #1]
 8007f20:	2b07      	cmp	r3, #7
 8007f22:	f200 81c1 	bhi.w	80082a8 <USBH_HandleEnum+0x39c>
 8007f26:	a201      	add	r2, pc, #4	; (adr r2, 8007f2c <USBH_HandleEnum+0x20>)
 8007f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f2c:	08007f4d 	.word	0x08007f4d
 8007f30:	0800800b 	.word	0x0800800b
 8007f34:	08008075 	.word	0x08008075
 8007f38:	08008103 	.word	0x08008103
 8007f3c:	0800816d 	.word	0x0800816d
 8007f40:	080081dd 	.word	0x080081dd
 8007f44:	08008223 	.word	0x08008223
 8007f48:	08008269 	.word	0x08008269
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007f4c:	2108      	movs	r1, #8
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fa50 	bl	80083f4 <USBH_Get_DevDesc>
 8007f54:	4603      	mov	r3, r0
 8007f56:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007f58:	7bbb      	ldrb	r3, [r7, #14]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d130      	bne.n	8007fc0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	7919      	ldrb	r1, [r3, #4]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007f82:	b292      	uxth	r2, r2
 8007f84:	9202      	str	r2, [sp, #8]
 8007f86:	2200      	movs	r2, #0
 8007f88:	9201      	str	r2, [sp, #4]
 8007f8a:	9300      	str	r3, [sp, #0]
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2280      	movs	r2, #128	; 0x80
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f001 f865 	bl	8009060 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	7959      	ldrb	r1, [r3, #5]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007faa:	b292      	uxth	r2, r2
 8007fac:	9202      	str	r2, [sp, #8]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	9201      	str	r2, [sp, #4]
 8007fb2:	9300      	str	r3, [sp, #0]
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f001 f851 	bl	8009060 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007fbe:	e175      	b.n	80082ac <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007fc0:	7bbb      	ldrb	r3, [r7, #14]
 8007fc2:	2b03      	cmp	r3, #3
 8007fc4:	f040 8172 	bne.w	80082ac <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007fce:	3301      	adds	r3, #1
 8007fd0:	b2da      	uxtb	r2, r3
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007fde:	2b03      	cmp	r3, #3
 8007fe0:	d903      	bls.n	8007fea <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	220d      	movs	r2, #13
 8007fe6:	701a      	strb	r2, [r3, #0]
      break;
 8007fe8:	e160      	b.n	80082ac <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	795b      	ldrb	r3, [r3, #5]
 8007fee:	4619      	mov	r1, r3
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f001 f885 	bl	8009100 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	791b      	ldrb	r3, [r3, #4]
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f001 f87f 	bl	8009100 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	701a      	strb	r2, [r3, #0]
      break;
 8008008:	e150      	b.n	80082ac <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800800a:	2112      	movs	r1, #18
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 f9f1 	bl	80083f4 <USBH_Get_DevDesc>
 8008012:	4603      	mov	r3, r0
 8008014:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008016:	7bbb      	ldrb	r3, [r7, #14]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d103      	bne.n	8008024 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2202      	movs	r2, #2
 8008020:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008022:	e145      	b.n	80082b0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008024:	7bbb      	ldrb	r3, [r7, #14]
 8008026:	2b03      	cmp	r3, #3
 8008028:	f040 8142 	bne.w	80082b0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008032:	3301      	adds	r3, #1
 8008034:	b2da      	uxtb	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008042:	2b03      	cmp	r3, #3
 8008044:	d903      	bls.n	800804e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	220d      	movs	r2, #13
 800804a:	701a      	strb	r2, [r3, #0]
      break;
 800804c:	e130      	b.n	80082b0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	795b      	ldrb	r3, [r3, #5]
 8008052:	4619      	mov	r1, r3
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f001 f853 	bl	8009100 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	791b      	ldrb	r3, [r3, #4]
 800805e:	4619      	mov	r1, r3
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f001 f84d 	bl	8009100 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	701a      	strb	r2, [r3, #0]
      break;
 8008072:	e11d      	b.n	80082b0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008074:	2101      	movs	r1, #1
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 fa68 	bl	800854c <USBH_SetAddress>
 800807c:	4603      	mov	r3, r0
 800807e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008080:	7bbb      	ldrb	r3, [r7, #14]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d132      	bne.n	80080ec <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008086:	2002      	movs	r0, #2
 8008088:	f001 fb30 	bl	80096ec <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2203      	movs	r2, #3
 8008098:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	7919      	ldrb	r1, [r3, #4]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80080ae:	b292      	uxth	r2, r2
 80080b0:	9202      	str	r2, [sp, #8]
 80080b2:	2200      	movs	r2, #0
 80080b4:	9201      	str	r2, [sp, #4]
 80080b6:	9300      	str	r3, [sp, #0]
 80080b8:	4603      	mov	r3, r0
 80080ba:	2280      	movs	r2, #128	; 0x80
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 ffcf 	bl	8009060 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	7959      	ldrb	r1, [r3, #5]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80080d6:	b292      	uxth	r2, r2
 80080d8:	9202      	str	r2, [sp, #8]
 80080da:	2200      	movs	r2, #0
 80080dc:	9201      	str	r2, [sp, #4]
 80080de:	9300      	str	r3, [sp, #0]
 80080e0:	4603      	mov	r3, r0
 80080e2:	2200      	movs	r2, #0
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 ffbb 	bl	8009060 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80080ea:	e0e3      	b.n	80082b4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80080ec:	7bbb      	ldrb	r3, [r7, #14]
 80080ee:	2b03      	cmp	r3, #3
 80080f0:	f040 80e0 	bne.w	80082b4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	220d      	movs	r2, #13
 80080f8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	705a      	strb	r2, [r3, #1]
      break;
 8008100:	e0d8      	b.n	80082b4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008102:	2109      	movs	r1, #9
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 f99d 	bl	8008444 <USBH_Get_CfgDesc>
 800810a:	4603      	mov	r3, r0
 800810c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800810e:	7bbb      	ldrb	r3, [r7, #14]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d103      	bne.n	800811c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2204      	movs	r2, #4
 8008118:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800811a:	e0cd      	b.n	80082b8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800811c:	7bbb      	ldrb	r3, [r7, #14]
 800811e:	2b03      	cmp	r3, #3
 8008120:	f040 80ca 	bne.w	80082b8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800812a:	3301      	adds	r3, #1
 800812c:	b2da      	uxtb	r2, r3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800813a:	2b03      	cmp	r3, #3
 800813c:	d903      	bls.n	8008146 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	220d      	movs	r2, #13
 8008142:	701a      	strb	r2, [r3, #0]
      break;
 8008144:	e0b8      	b.n	80082b8 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	795b      	ldrb	r3, [r3, #5]
 800814a:	4619      	mov	r1, r3
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 ffd7 	bl	8009100 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	791b      	ldrb	r3, [r3, #4]
 8008156:	4619      	mov	r1, r3
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 ffd1 	bl	8009100 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	701a      	strb	r2, [r3, #0]
      break;
 800816a:	e0a5      	b.n	80082b8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008172:	4619      	mov	r1, r3
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 f965 	bl	8008444 <USBH_Get_CfgDesc>
 800817a:	4603      	mov	r3, r0
 800817c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800817e:	7bbb      	ldrb	r3, [r7, #14]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d103      	bne.n	800818c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2205      	movs	r2, #5
 8008188:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800818a:	e097      	b.n	80082bc <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800818c:	7bbb      	ldrb	r3, [r7, #14]
 800818e:	2b03      	cmp	r3, #3
 8008190:	f040 8094 	bne.w	80082bc <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800819a:	3301      	adds	r3, #1
 800819c:	b2da      	uxtb	r2, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80081aa:	2b03      	cmp	r3, #3
 80081ac:	d903      	bls.n	80081b6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	220d      	movs	r2, #13
 80081b2:	701a      	strb	r2, [r3, #0]
      break;
 80081b4:	e082      	b.n	80082bc <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	795b      	ldrb	r3, [r3, #5]
 80081ba:	4619      	mov	r1, r3
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 ff9f 	bl	8009100 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	791b      	ldrb	r3, [r3, #4]
 80081c6:	4619      	mov	r1, r3
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 ff99 	bl	8009100 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	701a      	strb	r2, [r3, #0]
      break;
 80081da:	e06f      	b.n	80082bc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d019      	beq.n	800821a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80081f2:	23ff      	movs	r3, #255	; 0xff
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 f949 	bl	800848c <USBH_Get_StringDesc>
 80081fa:	4603      	mov	r3, r0
 80081fc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80081fe:	7bbb      	ldrb	r3, [r7, #14]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d103      	bne.n	800820c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2206      	movs	r2, #6
 8008208:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800820a:	e059      	b.n	80082c0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800820c:	7bbb      	ldrb	r3, [r7, #14]
 800820e:	2b03      	cmp	r3, #3
 8008210:	d156      	bne.n	80082c0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2206      	movs	r2, #6
 8008216:	705a      	strb	r2, [r3, #1]
      break;
 8008218:	e052      	b.n	80082c0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2206      	movs	r2, #6
 800821e:	705a      	strb	r2, [r3, #1]
      break;
 8008220:	e04e      	b.n	80082c0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008228:	2b00      	cmp	r3, #0
 800822a:	d019      	beq.n	8008260 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008238:	23ff      	movs	r3, #255	; 0xff
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f926 	bl	800848c <USBH_Get_StringDesc>
 8008240:	4603      	mov	r3, r0
 8008242:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008244:	7bbb      	ldrb	r3, [r7, #14]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d103      	bne.n	8008252 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2207      	movs	r2, #7
 800824e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008250:	e038      	b.n	80082c4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008252:	7bbb      	ldrb	r3, [r7, #14]
 8008254:	2b03      	cmp	r3, #3
 8008256:	d135      	bne.n	80082c4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2207      	movs	r2, #7
 800825c:	705a      	strb	r2, [r3, #1]
      break;
 800825e:	e031      	b.n	80082c4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2207      	movs	r2, #7
 8008264:	705a      	strb	r2, [r3, #1]
      break;
 8008266:	e02d      	b.n	80082c4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800826e:	2b00      	cmp	r3, #0
 8008270:	d017      	beq.n	80082a2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800827e:	23ff      	movs	r3, #255	; 0xff
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 f903 	bl	800848c <USBH_Get_StringDesc>
 8008286:	4603      	mov	r3, r0
 8008288:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800828a:	7bbb      	ldrb	r3, [r7, #14]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d102      	bne.n	8008296 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008290:	2300      	movs	r3, #0
 8008292:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008294:	e018      	b.n	80082c8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008296:	7bbb      	ldrb	r3, [r7, #14]
 8008298:	2b03      	cmp	r3, #3
 800829a:	d115      	bne.n	80082c8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800829c:	2300      	movs	r3, #0
 800829e:	73fb      	strb	r3, [r7, #15]
      break;
 80082a0:	e012      	b.n	80082c8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80082a2:	2300      	movs	r3, #0
 80082a4:	73fb      	strb	r3, [r7, #15]
      break;
 80082a6:	e00f      	b.n	80082c8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80082a8:	bf00      	nop
 80082aa:	e00e      	b.n	80082ca <USBH_HandleEnum+0x3be>
      break;
 80082ac:	bf00      	nop
 80082ae:	e00c      	b.n	80082ca <USBH_HandleEnum+0x3be>
      break;
 80082b0:	bf00      	nop
 80082b2:	e00a      	b.n	80082ca <USBH_HandleEnum+0x3be>
      break;
 80082b4:	bf00      	nop
 80082b6:	e008      	b.n	80082ca <USBH_HandleEnum+0x3be>
      break;
 80082b8:	bf00      	nop
 80082ba:	e006      	b.n	80082ca <USBH_HandleEnum+0x3be>
      break;
 80082bc:	bf00      	nop
 80082be:	e004      	b.n	80082ca <USBH_HandleEnum+0x3be>
      break;
 80082c0:	bf00      	nop
 80082c2:	e002      	b.n	80082ca <USBH_HandleEnum+0x3be>
      break;
 80082c4:	bf00      	nop
 80082c6:	e000      	b.n	80082ca <USBH_HandleEnum+0x3be>
      break;
 80082c8:	bf00      	nop
  }
  return Status;
 80082ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3710      	adds	r7, #16
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	683a      	ldr	r2, [r7, #0]
 80082e2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80082e6:	bf00      	nop
 80082e8:	370c      	adds	r7, #12
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr

080082f2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80082f2:	b580      	push	{r7, lr}
 80082f4:	b082      	sub	sp, #8
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008300:	1c5a      	adds	r2, r3, #1
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 f804 	bl	8008316 <USBH_HandleSof>
}
 800830e:	bf00      	nop
 8008310:	3708      	adds	r7, #8
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008316:	b580      	push	{r7, lr}
 8008318:	b082      	sub	sp, #8
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	b2db      	uxtb	r3, r3
 8008324:	2b0b      	cmp	r3, #11
 8008326:	d10a      	bne.n	800833e <USBH_HandleSof+0x28>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800832e:	2b00      	cmp	r3, #0
 8008330:	d005      	beq.n	800833e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008338:	699b      	ldr	r3, [r3, #24]
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	4798      	blx	r3
  }
}
 800833e:	bf00      	nop
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008346:	b480      	push	{r7}
 8008348:	b083      	sub	sp, #12
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2201      	movs	r2, #1
 8008352:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008356:	bf00      	nop
}
 8008358:	370c      	adds	r7, #12
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr

08008362 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008362:	b480      	push	{r7}
 8008364:	b083      	sub	sp, #12
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008372:	bf00      	nop
}
 8008374:	370c      	adds	r7, #12
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr

0800837e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800837e:	b480      	push	{r7}
 8008380:	b083      	sub	sp, #12
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2201      	movs	r2, #1
 800838a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800839e:	2300      	movs	r3, #0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f001 f844 	bl	800945a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	791b      	ldrb	r3, [r3, #4]
 80083d6:	4619      	mov	r1, r3
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 fe91 	bl	8009100 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	795b      	ldrb	r3, [r3, #5]
 80083e2:	4619      	mov	r1, r3
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 fe8b 	bl	8009100 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3708      	adds	r7, #8
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b086      	sub	sp, #24
 80083f8:	af02      	add	r7, sp, #8
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	460b      	mov	r3, r1
 80083fe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008406:	78fb      	ldrb	r3, [r7, #3]
 8008408:	b29b      	uxth	r3, r3
 800840a:	9300      	str	r3, [sp, #0]
 800840c:	4613      	mov	r3, r2
 800840e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008412:	2100      	movs	r1, #0
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 f864 	bl	80084e2 <USBH_GetDescriptor>
 800841a:	4603      	mov	r3, r0
 800841c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800841e:	7bfb      	ldrb	r3, [r7, #15]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10a      	bne.n	800843a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f203 3026 	addw	r0, r3, #806	; 0x326
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008430:	78fa      	ldrb	r2, [r7, #3]
 8008432:	b292      	uxth	r2, r2
 8008434:	4619      	mov	r1, r3
 8008436:	f000 f918 	bl	800866a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800843a:	7bfb      	ldrb	r3, [r7, #15]
}
 800843c:	4618      	mov	r0, r3
 800843e:	3710      	adds	r7, #16
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008444:	b580      	push	{r7, lr}
 8008446:	b086      	sub	sp, #24
 8008448:	af02      	add	r7, sp, #8
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	460b      	mov	r3, r1
 800844e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	331c      	adds	r3, #28
 8008454:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008456:	887b      	ldrh	r3, [r7, #2]
 8008458:	9300      	str	r3, [sp, #0]
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008460:	2100      	movs	r1, #0
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 f83d 	bl	80084e2 <USBH_GetDescriptor>
 8008468:	4603      	mov	r3, r0
 800846a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800846c:	7bfb      	ldrb	r3, [r7, #15]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d107      	bne.n	8008482 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008472:	887b      	ldrh	r3, [r7, #2]
 8008474:	461a      	mov	r2, r3
 8008476:	68b9      	ldr	r1, [r7, #8]
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 f987 	bl	800878c <USBH_ParseCfgDesc>
 800847e:	4603      	mov	r3, r0
 8008480:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008482:	7bfb      	ldrb	r3, [r7, #15]
}
 8008484:	4618      	mov	r0, r3
 8008486:	3710      	adds	r7, #16
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b088      	sub	sp, #32
 8008490:	af02      	add	r7, sp, #8
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	607a      	str	r2, [r7, #4]
 8008496:	461a      	mov	r2, r3
 8008498:	460b      	mov	r3, r1
 800849a:	72fb      	strb	r3, [r7, #11]
 800849c:	4613      	mov	r3, r2
 800849e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80084a0:	7afb      	ldrb	r3, [r7, #11]
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80084a8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80084b0:	893b      	ldrh	r3, [r7, #8]
 80084b2:	9300      	str	r3, [sp, #0]
 80084b4:	460b      	mov	r3, r1
 80084b6:	2100      	movs	r1, #0
 80084b8:	68f8      	ldr	r0, [r7, #12]
 80084ba:	f000 f812 	bl	80084e2 <USBH_GetDescriptor>
 80084be:	4603      	mov	r3, r0
 80084c0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80084c2:	7dfb      	ldrb	r3, [r7, #23]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d107      	bne.n	80084d8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80084ce:	893a      	ldrh	r2, [r7, #8]
 80084d0:	6879      	ldr	r1, [r7, #4]
 80084d2:	4618      	mov	r0, r3
 80084d4:	f000 fb24 	bl	8008b20 <USBH_ParseStringDesc>
  }

  return status;
 80084d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3718      	adds	r7, #24
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b084      	sub	sp, #16
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	60f8      	str	r0, [r7, #12]
 80084ea:	607b      	str	r3, [r7, #4]
 80084ec:	460b      	mov	r3, r1
 80084ee:	72fb      	strb	r3, [r7, #11]
 80084f0:	4613      	mov	r3, r2
 80084f2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	789b      	ldrb	r3, [r3, #2]
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d11c      	bne.n	8008536 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80084fc:	7afb      	ldrb	r3, [r7, #11]
 80084fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008502:	b2da      	uxtb	r2, r3
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2206      	movs	r2, #6
 800850c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	893a      	ldrh	r2, [r7, #8]
 8008512:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008514:	893b      	ldrh	r3, [r7, #8]
 8008516:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800851a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800851e:	d104      	bne.n	800852a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f240 4209 	movw	r2, #1033	; 0x409
 8008526:	829a      	strh	r2, [r3, #20]
 8008528:	e002      	b.n	8008530 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2200      	movs	r2, #0
 800852e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	8b3a      	ldrh	r2, [r7, #24]
 8008534:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008536:	8b3b      	ldrh	r3, [r7, #24]
 8008538:	461a      	mov	r2, r3
 800853a:	6879      	ldr	r1, [r7, #4]
 800853c:	68f8      	ldr	r0, [r7, #12]
 800853e:	f000 fb3d 	bl	8008bbc <USBH_CtlReq>
 8008542:	4603      	mov	r3, r0
}
 8008544:	4618      	mov	r0, r3
 8008546:	3710      	adds	r7, #16
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	460b      	mov	r3, r1
 8008556:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	789b      	ldrb	r3, [r3, #2]
 800855c:	2b01      	cmp	r3, #1
 800855e:	d10f      	bne.n	8008580 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2205      	movs	r2, #5
 800856a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800856c:	78fb      	ldrb	r3, [r7, #3]
 800856e:	b29a      	uxth	r2, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2200      	movs	r2, #0
 800857e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008580:	2200      	movs	r2, #0
 8008582:	2100      	movs	r1, #0
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 fb19 	bl	8008bbc <USBH_CtlReq>
 800858a:	4603      	mov	r3, r0
}
 800858c:	4618      	mov	r0, r3
 800858e:	3708      	adds	r7, #8
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	460b      	mov	r3, r1
 800859e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	789b      	ldrb	r3, [r3, #2]
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d10e      	bne.n	80085c6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2209      	movs	r2, #9
 80085b2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	887a      	ldrh	r2, [r7, #2]
 80085b8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80085c6:	2200      	movs	r2, #0
 80085c8:	2100      	movs	r1, #0
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 faf6 	bl	8008bbc <USBH_CtlReq>
 80085d0:	4603      	mov	r3, r0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3708      	adds	r7, #8
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}

080085da <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80085da:	b580      	push	{r7, lr}
 80085dc:	b082      	sub	sp, #8
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
 80085e2:	460b      	mov	r3, r1
 80085e4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	789b      	ldrb	r3, [r3, #2]
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d10f      	bne.n	800860e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2203      	movs	r2, #3
 80085f8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80085fa:	78fb      	ldrb	r3, [r7, #3]
 80085fc:	b29a      	uxth	r2, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800860e:	2200      	movs	r2, #0
 8008610:	2100      	movs	r1, #0
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 fad2 	bl	8008bbc <USBH_CtlReq>
 8008618:	4603      	mov	r3, r0
}
 800861a:	4618      	mov	r0, r3
 800861c:	3708      	adds	r7, #8
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008622:	b580      	push	{r7, lr}
 8008624:	b082      	sub	sp, #8
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
 800862a:	460b      	mov	r3, r1
 800862c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	789b      	ldrb	r3, [r3, #2]
 8008632:	2b01      	cmp	r3, #1
 8008634:	d10f      	bne.n	8008656 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2202      	movs	r2, #2
 800863a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2201      	movs	r2, #1
 8008640:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008648:	78fb      	ldrb	r3, [r7, #3]
 800864a:	b29a      	uxth	r2, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2200      	movs	r2, #0
 8008654:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008656:	2200      	movs	r2, #0
 8008658:	2100      	movs	r1, #0
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 faae 	bl	8008bbc <USBH_CtlReq>
 8008660:	4603      	mov	r3, r0
}
 8008662:	4618      	mov	r0, r3
 8008664:	3708      	adds	r7, #8
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}

0800866a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800866a:	b480      	push	{r7}
 800866c:	b085      	sub	sp, #20
 800866e:	af00      	add	r7, sp, #0
 8008670:	60f8      	str	r0, [r7, #12]
 8008672:	60b9      	str	r1, [r7, #8]
 8008674:	4613      	mov	r3, r2
 8008676:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	781a      	ldrb	r2, [r3, #0]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	785a      	ldrb	r2, [r3, #1]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	3302      	adds	r3, #2
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	b29a      	uxth	r2, r3
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	3303      	adds	r3, #3
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	b29b      	uxth	r3, r3
 8008698:	021b      	lsls	r3, r3, #8
 800869a:	b29b      	uxth	r3, r3
 800869c:	4313      	orrs	r3, r2
 800869e:	b29a      	uxth	r2, r3
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	791a      	ldrb	r2, [r3, #4]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	795a      	ldrb	r2, [r3, #5]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	799a      	ldrb	r2, [r3, #6]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	79da      	ldrb	r2, [r3, #7]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	79db      	ldrb	r3, [r3, #7]
 80086c8:	2b20      	cmp	r3, #32
 80086ca:	dc11      	bgt.n	80086f0 <USBH_ParseDevDesc+0x86>
 80086cc:	2b08      	cmp	r3, #8
 80086ce:	db16      	blt.n	80086fe <USBH_ParseDevDesc+0x94>
 80086d0:	3b08      	subs	r3, #8
 80086d2:	2201      	movs	r2, #1
 80086d4:	fa02 f303 	lsl.w	r3, r2, r3
 80086d8:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80086dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	bf14      	ite	ne
 80086e4:	2301      	movne	r3, #1
 80086e6:	2300      	moveq	r3, #0
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d102      	bne.n	80086f4 <USBH_ParseDevDesc+0x8a>
 80086ee:	e006      	b.n	80086fe <USBH_ParseDevDesc+0x94>
 80086f0:	2b40      	cmp	r3, #64	; 0x40
 80086f2:	d104      	bne.n	80086fe <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	79da      	ldrb	r2, [r3, #7]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	71da      	strb	r2, [r3, #7]
      break;
 80086fc:	e003      	b.n	8008706 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2240      	movs	r2, #64	; 0x40
 8008702:	71da      	strb	r2, [r3, #7]
      break;
 8008704:	bf00      	nop
  }

  if (length > 8U)
 8008706:	88fb      	ldrh	r3, [r7, #6]
 8008708:	2b08      	cmp	r3, #8
 800870a:	d939      	bls.n	8008780 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	3308      	adds	r3, #8
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	b29a      	uxth	r2, r3
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	3309      	adds	r3, #9
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	b29b      	uxth	r3, r3
 800871c:	021b      	lsls	r3, r3, #8
 800871e:	b29b      	uxth	r3, r3
 8008720:	4313      	orrs	r3, r2
 8008722:	b29a      	uxth	r2, r3
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	330a      	adds	r3, #10
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	b29a      	uxth	r2, r3
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	330b      	adds	r3, #11
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	b29b      	uxth	r3, r3
 8008738:	021b      	lsls	r3, r3, #8
 800873a:	b29b      	uxth	r3, r3
 800873c:	4313      	orrs	r3, r2
 800873e:	b29a      	uxth	r2, r3
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	330c      	adds	r3, #12
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	b29a      	uxth	r2, r3
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	330d      	adds	r3, #13
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	b29b      	uxth	r3, r3
 8008754:	021b      	lsls	r3, r3, #8
 8008756:	b29b      	uxth	r3, r3
 8008758:	4313      	orrs	r3, r2
 800875a:	b29a      	uxth	r2, r3
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	7b9a      	ldrb	r2, [r3, #14]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	7bda      	ldrb	r2, [r3, #15]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	7c1a      	ldrb	r2, [r3, #16]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	7c5a      	ldrb	r2, [r3, #17]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	745a      	strb	r2, [r3, #17]
  }
}
 8008780:	bf00      	nop
 8008782:	3714      	adds	r7, #20
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b08c      	sub	sp, #48	; 0x30
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	4613      	mov	r3, r2
 8008798:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80087a0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80087a2:	2300      	movs	r3, #0
 80087a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80087ac:	2300      	movs	r3, #0
 80087ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80087b2:	2300      	movs	r3, #0
 80087b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	781a      	ldrb	r2, [r3, #0]
 80087c0:	6a3b      	ldr	r3, [r7, #32]
 80087c2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	785a      	ldrb	r2, [r3, #1]
 80087c8:	6a3b      	ldr	r3, [r7, #32]
 80087ca:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	3302      	adds	r3, #2
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	b29a      	uxth	r2, r3
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	3303      	adds	r3, #3
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	b29b      	uxth	r3, r3
 80087dc:	021b      	lsls	r3, r3, #8
 80087de:	b29b      	uxth	r3, r3
 80087e0:	4313      	orrs	r3, r2
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087e8:	bf28      	it	cs
 80087ea:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80087ee:	b29a      	uxth	r2, r3
 80087f0:	6a3b      	ldr	r3, [r7, #32]
 80087f2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	791a      	ldrb	r2, [r3, #4]
 80087f8:	6a3b      	ldr	r3, [r7, #32]
 80087fa:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	795a      	ldrb	r2, [r3, #5]
 8008800:	6a3b      	ldr	r3, [r7, #32]
 8008802:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	799a      	ldrb	r2, [r3, #6]
 8008808:	6a3b      	ldr	r3, [r7, #32]
 800880a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	79da      	ldrb	r2, [r3, #7]
 8008810:	6a3b      	ldr	r3, [r7, #32]
 8008812:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	7a1a      	ldrb	r2, [r3, #8]
 8008818:	6a3b      	ldr	r3, [r7, #32]
 800881a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800881c:	6a3b      	ldr	r3, [r7, #32]
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	2b09      	cmp	r3, #9
 8008822:	d002      	beq.n	800882a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008824:	6a3b      	ldr	r3, [r7, #32]
 8008826:	2209      	movs	r2, #9
 8008828:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800882a:	88fb      	ldrh	r3, [r7, #6]
 800882c:	2b09      	cmp	r3, #9
 800882e:	f240 809d 	bls.w	800896c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8008832:	2309      	movs	r3, #9
 8008834:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008836:	2300      	movs	r3, #0
 8008838:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800883a:	e081      	b.n	8008940 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800883c:	f107 0316 	add.w	r3, r7, #22
 8008840:	4619      	mov	r1, r3
 8008842:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008844:	f000 f99f 	bl	8008b86 <USBH_GetNextDesc>
 8008848:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800884a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884c:	785b      	ldrb	r3, [r3, #1]
 800884e:	2b04      	cmp	r3, #4
 8008850:	d176      	bne.n	8008940 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	2b09      	cmp	r3, #9
 8008858:	d002      	beq.n	8008860 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800885a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800885c:	2209      	movs	r2, #9
 800885e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008864:	221a      	movs	r2, #26
 8008866:	fb02 f303 	mul.w	r3, r2, r3
 800886a:	3308      	adds	r3, #8
 800886c:	6a3a      	ldr	r2, [r7, #32]
 800886e:	4413      	add	r3, r2
 8008870:	3302      	adds	r3, #2
 8008872:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008874:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008876:	69f8      	ldr	r0, [r7, #28]
 8008878:	f000 f87e 	bl	8008978 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800887c:	2300      	movs	r3, #0
 800887e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008882:	2300      	movs	r3, #0
 8008884:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008886:	e043      	b.n	8008910 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008888:	f107 0316 	add.w	r3, r7, #22
 800888c:	4619      	mov	r1, r3
 800888e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008890:	f000 f979 	bl	8008b86 <USBH_GetNextDesc>
 8008894:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008898:	785b      	ldrb	r3, [r3, #1]
 800889a:	2b05      	cmp	r3, #5
 800889c:	d138      	bne.n	8008910 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800889e:	69fb      	ldr	r3, [r7, #28]
 80088a0:	795b      	ldrb	r3, [r3, #5]
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d10f      	bne.n	80088c6 <USBH_ParseCfgDesc+0x13a>
 80088a6:	69fb      	ldr	r3, [r7, #28]
 80088a8:	799b      	ldrb	r3, [r3, #6]
 80088aa:	2b02      	cmp	r3, #2
 80088ac:	d10b      	bne.n	80088c6 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80088ae:	69fb      	ldr	r3, [r7, #28]
 80088b0:	79db      	ldrb	r3, [r3, #7]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d10f      	bne.n	80088d6 <USBH_ParseCfgDesc+0x14a>
 80088b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	2b09      	cmp	r3, #9
 80088bc:	d00b      	beq.n	80088d6 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80088be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c0:	2209      	movs	r2, #9
 80088c2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80088c4:	e007      	b.n	80088d6 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80088c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	2b07      	cmp	r3, #7
 80088cc:	d004      	beq.n	80088d8 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80088ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d0:	2207      	movs	r2, #7
 80088d2:	701a      	strb	r2, [r3, #0]
 80088d4:	e000      	b.n	80088d8 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80088d6:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80088d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088dc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80088e0:	3201      	adds	r2, #1
 80088e2:	00d2      	lsls	r2, r2, #3
 80088e4:	211a      	movs	r1, #26
 80088e6:	fb01 f303 	mul.w	r3, r1, r3
 80088ea:	4413      	add	r3, r2
 80088ec:	3308      	adds	r3, #8
 80088ee:	6a3a      	ldr	r2, [r7, #32]
 80088f0:	4413      	add	r3, r2
 80088f2:	3304      	adds	r3, #4
 80088f4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80088f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088f8:	69b9      	ldr	r1, [r7, #24]
 80088fa:	68f8      	ldr	r0, [r7, #12]
 80088fc:	f000 f86b 	bl	80089d6 <USBH_ParseEPDesc>
 8008900:	4603      	mov	r3, r0
 8008902:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008906:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800890a:	3301      	adds	r3, #1
 800890c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	791b      	ldrb	r3, [r3, #4]
 8008914:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008918:	429a      	cmp	r2, r3
 800891a:	d204      	bcs.n	8008926 <USBH_ParseCfgDesc+0x19a>
 800891c:	6a3b      	ldr	r3, [r7, #32]
 800891e:	885a      	ldrh	r2, [r3, #2]
 8008920:	8afb      	ldrh	r3, [r7, #22]
 8008922:	429a      	cmp	r2, r3
 8008924:	d8b0      	bhi.n	8008888 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008926:	69fb      	ldr	r3, [r7, #28]
 8008928:	791b      	ldrb	r3, [r3, #4]
 800892a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800892e:	429a      	cmp	r2, r3
 8008930:	d201      	bcs.n	8008936 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8008932:	2303      	movs	r3, #3
 8008934:	e01c      	b.n	8008970 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8008936:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800893a:	3301      	adds	r3, #1
 800893c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008940:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008944:	2b01      	cmp	r3, #1
 8008946:	d805      	bhi.n	8008954 <USBH_ParseCfgDesc+0x1c8>
 8008948:	6a3b      	ldr	r3, [r7, #32]
 800894a:	885a      	ldrh	r2, [r3, #2]
 800894c:	8afb      	ldrh	r3, [r7, #22]
 800894e:	429a      	cmp	r2, r3
 8008950:	f63f af74 	bhi.w	800883c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008954:	6a3b      	ldr	r3, [r7, #32]
 8008956:	791b      	ldrb	r3, [r3, #4]
 8008958:	2b02      	cmp	r3, #2
 800895a:	bf28      	it	cs
 800895c:	2302      	movcs	r3, #2
 800895e:	b2db      	uxtb	r3, r3
 8008960:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008964:	429a      	cmp	r2, r3
 8008966:	d201      	bcs.n	800896c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008968:	2303      	movs	r3, #3
 800896a:	e001      	b.n	8008970 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800896c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008970:	4618      	mov	r0, r3
 8008972:	3730      	adds	r7, #48	; 0x30
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	781a      	ldrb	r2, [r3, #0]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	785a      	ldrb	r2, [r3, #1]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	789a      	ldrb	r2, [r3, #2]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	78da      	ldrb	r2, [r3, #3]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	791a      	ldrb	r2, [r3, #4]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	795a      	ldrb	r2, [r3, #5]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	799a      	ldrb	r2, [r3, #6]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	79da      	ldrb	r2, [r3, #7]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	7a1a      	ldrb	r2, [r3, #8]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	721a      	strb	r2, [r3, #8]
}
 80089ca:	bf00      	nop
 80089cc:	370c      	adds	r7, #12
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr

080089d6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 80089d6:	b480      	push	{r7}
 80089d8:	b087      	sub	sp, #28
 80089da:	af00      	add	r7, sp, #0
 80089dc:	60f8      	str	r0, [r7, #12]
 80089de:	60b9      	str	r1, [r7, #8]
 80089e0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80089e2:	2300      	movs	r3, #0
 80089e4:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	781a      	ldrb	r2, [r3, #0]
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	785a      	ldrb	r2, [r3, #1]
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	789a      	ldrb	r2, [r3, #2]
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	78da      	ldrb	r2, [r3, #3]
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	3304      	adds	r3, #4
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	b29a      	uxth	r2, r3
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	3305      	adds	r3, #5
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	021b      	lsls	r3, r3, #8
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	b29a      	uxth	r2, r3
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	799a      	ldrb	r2, [r3, #6]
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	889b      	ldrh	r3, [r3, #4]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d102      	bne.n	8008a38 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008a32:	2303      	movs	r3, #3
 8008a34:	75fb      	strb	r3, [r7, #23]
 8008a36:	e033      	b.n	8008aa0 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	889b      	ldrh	r3, [r3, #4]
 8008a3c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008a40:	f023 0307 	bic.w	r3, r3, #7
 8008a44:	b29a      	uxth	r2, r3
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	889b      	ldrh	r3, [r3, #4]
 8008a4e:	b21a      	sxth	r2, r3
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	3304      	adds	r3, #4
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	b299      	uxth	r1, r3
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	3305      	adds	r3, #5
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	021b      	lsls	r3, r3, #8
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	430b      	orrs	r3, r1
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d110      	bne.n	8008a92 <USBH_ParseEPDesc+0xbc>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	3304      	adds	r3, #4
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	b299      	uxth	r1, r3
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	3305      	adds	r3, #5
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	021b      	lsls	r3, r3, #8
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	430b      	orrs	r3, r1
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	b21b      	sxth	r3, r3
 8008a8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a8e:	b21b      	sxth	r3, r3
 8008a90:	e001      	b.n	8008a96 <USBH_ParseEPDesc+0xc0>
 8008a92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a96:	4313      	orrs	r3, r2
 8008a98:	b21b      	sxth	r3, r3
 8008a9a:	b29a      	uxth	r2, r3
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d116      	bne.n	8008ad8 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	78db      	ldrb	r3, [r3, #3]
 8008aae:	f003 0303 	and.w	r3, r3, #3
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d005      	beq.n	8008ac2 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	78db      	ldrb	r3, [r3, #3]
 8008aba:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008abe:	2b03      	cmp	r3, #3
 8008ac0:	d127      	bne.n	8008b12 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	799b      	ldrb	r3, [r3, #6]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d003      	beq.n	8008ad2 <USBH_ParseEPDesc+0xfc>
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	799b      	ldrb	r3, [r3, #6]
 8008ace:	2b10      	cmp	r3, #16
 8008ad0:	d91f      	bls.n	8008b12 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008ad2:	2303      	movs	r3, #3
 8008ad4:	75fb      	strb	r3, [r7, #23]
 8008ad6:	e01c      	b.n	8008b12 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	78db      	ldrb	r3, [r3, #3]
 8008adc:	f003 0303 	and.w	r3, r3, #3
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d10a      	bne.n	8008afa <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	799b      	ldrb	r3, [r3, #6]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d003      	beq.n	8008af4 <USBH_ParseEPDesc+0x11e>
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	799b      	ldrb	r3, [r3, #6]
 8008af0:	2b10      	cmp	r3, #16
 8008af2:	d90e      	bls.n	8008b12 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008af4:	2303      	movs	r3, #3
 8008af6:	75fb      	strb	r3, [r7, #23]
 8008af8:	e00b      	b.n	8008b12 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	78db      	ldrb	r3, [r3, #3]
 8008afe:	f003 0303 	and.w	r3, r3, #3
 8008b02:	2b03      	cmp	r3, #3
 8008b04:	d105      	bne.n	8008b12 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	799b      	ldrb	r3, [r3, #6]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d101      	bne.n	8008b12 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008b0e:	2303      	movs	r3, #3
 8008b10:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	371c      	adds	r7, #28
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr

08008b20 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b087      	sub	sp, #28
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	60b9      	str	r1, [r7, #8]
 8008b2a:	4613      	mov	r3, r2
 8008b2c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	3301      	adds	r3, #1
 8008b32:	781b      	ldrb	r3, [r3, #0]
 8008b34:	2b03      	cmp	r3, #3
 8008b36:	d120      	bne.n	8008b7a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	1e9a      	subs	r2, r3, #2
 8008b3e:	88fb      	ldrh	r3, [r7, #6]
 8008b40:	4293      	cmp	r3, r2
 8008b42:	bf28      	it	cs
 8008b44:	4613      	movcs	r3, r2
 8008b46:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	3302      	adds	r3, #2
 8008b4c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008b4e:	2300      	movs	r3, #0
 8008b50:	82fb      	strh	r3, [r7, #22]
 8008b52:	e00b      	b.n	8008b6c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008b54:	8afb      	ldrh	r3, [r7, #22]
 8008b56:	68fa      	ldr	r2, [r7, #12]
 8008b58:	4413      	add	r3, r2
 8008b5a:	781a      	ldrb	r2, [r3, #0]
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	3301      	adds	r3, #1
 8008b64:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008b66:	8afb      	ldrh	r3, [r7, #22]
 8008b68:	3302      	adds	r3, #2
 8008b6a:	82fb      	strh	r3, [r7, #22]
 8008b6c:	8afa      	ldrh	r2, [r7, #22]
 8008b6e:	8abb      	ldrh	r3, [r7, #20]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d3ef      	bcc.n	8008b54 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	2200      	movs	r2, #0
 8008b78:	701a      	strb	r2, [r3, #0]
  }
}
 8008b7a:	bf00      	nop
 8008b7c:	371c      	adds	r7, #28
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr

08008b86 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008b86:	b480      	push	{r7}
 8008b88:	b085      	sub	sp, #20
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
 8008b8e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	881a      	ldrh	r2, [r3, #0]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	4413      	add	r3, r2
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	4413      	add	r3, r2
 8008bac:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008bae:	68fb      	ldr	r3, [r7, #12]
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3714      	adds	r7, #20
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b086      	sub	sp, #24
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	789b      	ldrb	r3, [r3, #2]
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d002      	beq.n	8008bdc <USBH_CtlReq+0x20>
 8008bd6:	2b02      	cmp	r3, #2
 8008bd8:	d00f      	beq.n	8008bfa <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008bda:	e027      	b.n	8008c2c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	88fa      	ldrh	r2, [r7, #6]
 8008be6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2201      	movs	r2, #1
 8008bec:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2202      	movs	r2, #2
 8008bf2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	75fb      	strb	r3, [r7, #23]
      break;
 8008bf8:	e018      	b.n	8008c2c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f000 f81c 	bl	8008c38 <USBH_HandleControl>
 8008c00:	4603      	mov	r3, r0
 8008c02:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008c04:	7dfb      	ldrb	r3, [r7, #23]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d002      	beq.n	8008c10 <USBH_CtlReq+0x54>
 8008c0a:	7dfb      	ldrb	r3, [r7, #23]
 8008c0c:	2b03      	cmp	r3, #3
 8008c0e:	d106      	bne.n	8008c1e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2201      	movs	r2, #1
 8008c14:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	761a      	strb	r2, [r3, #24]
      break;
 8008c1c:	e005      	b.n	8008c2a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008c1e:	7dfb      	ldrb	r3, [r7, #23]
 8008c20:	2b02      	cmp	r3, #2
 8008c22:	d102      	bne.n	8008c2a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2201      	movs	r2, #1
 8008c28:	709a      	strb	r2, [r3, #2]
      break;
 8008c2a:	bf00      	nop
  }
  return status;
 8008c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3718      	adds	r7, #24
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
	...

08008c38 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b086      	sub	sp, #24
 8008c3c:	af02      	add	r7, sp, #8
 8008c3e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008c40:	2301      	movs	r3, #1
 8008c42:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008c44:	2300      	movs	r3, #0
 8008c46:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	7e1b      	ldrb	r3, [r3, #24]
 8008c4c:	3b01      	subs	r3, #1
 8008c4e:	2b0a      	cmp	r3, #10
 8008c50:	f200 8156 	bhi.w	8008f00 <USBH_HandleControl+0x2c8>
 8008c54:	a201      	add	r2, pc, #4	; (adr r2, 8008c5c <USBH_HandleControl+0x24>)
 8008c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c5a:	bf00      	nop
 8008c5c:	08008c89 	.word	0x08008c89
 8008c60:	08008ca3 	.word	0x08008ca3
 8008c64:	08008d0d 	.word	0x08008d0d
 8008c68:	08008d33 	.word	0x08008d33
 8008c6c:	08008d6b 	.word	0x08008d6b
 8008c70:	08008d95 	.word	0x08008d95
 8008c74:	08008de7 	.word	0x08008de7
 8008c78:	08008e09 	.word	0x08008e09
 8008c7c:	08008e45 	.word	0x08008e45
 8008c80:	08008e6b 	.word	0x08008e6b
 8008c84:	08008ea9 	.word	0x08008ea9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f103 0110 	add.w	r1, r3, #16
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	795b      	ldrb	r3, [r3, #5]
 8008c92:	461a      	mov	r2, r3
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 f943 	bl	8008f20 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2202      	movs	r2, #2
 8008c9e:	761a      	strb	r2, [r3, #24]
      break;
 8008ca0:	e139      	b.n	8008f16 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	795b      	ldrb	r3, [r3, #5]
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 fcc5 	bl	8009638 <USBH_LL_GetURBState>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008cb2:	7bbb      	ldrb	r3, [r7, #14]
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d11e      	bne.n	8008cf6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	7c1b      	ldrb	r3, [r3, #16]
 8008cbc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008cc0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	8adb      	ldrh	r3, [r3, #22]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00a      	beq.n	8008ce0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008cca:	7b7b      	ldrb	r3, [r7, #13]
 8008ccc:	2b80      	cmp	r3, #128	; 0x80
 8008cce:	d103      	bne.n	8008cd8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2203      	movs	r2, #3
 8008cd4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008cd6:	e115      	b.n	8008f04 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2205      	movs	r2, #5
 8008cdc:	761a      	strb	r2, [r3, #24]
      break;
 8008cde:	e111      	b.n	8008f04 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008ce0:	7b7b      	ldrb	r3, [r7, #13]
 8008ce2:	2b80      	cmp	r3, #128	; 0x80
 8008ce4:	d103      	bne.n	8008cee <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2209      	movs	r2, #9
 8008cea:	761a      	strb	r2, [r3, #24]
      break;
 8008cec:	e10a      	b.n	8008f04 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2207      	movs	r2, #7
 8008cf2:	761a      	strb	r2, [r3, #24]
      break;
 8008cf4:	e106      	b.n	8008f04 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008cf6:	7bbb      	ldrb	r3, [r7, #14]
 8008cf8:	2b04      	cmp	r3, #4
 8008cfa:	d003      	beq.n	8008d04 <USBH_HandleControl+0xcc>
 8008cfc:	7bbb      	ldrb	r3, [r7, #14]
 8008cfe:	2b02      	cmp	r3, #2
 8008d00:	f040 8100 	bne.w	8008f04 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	220b      	movs	r2, #11
 8008d08:	761a      	strb	r2, [r3, #24]
      break;
 8008d0a:	e0fb      	b.n	8008f04 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008d12:	b29a      	uxth	r2, r3
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6899      	ldr	r1, [r3, #8]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	899a      	ldrh	r2, [r3, #12]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	791b      	ldrb	r3, [r3, #4]
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f000 f93a 	bl	8008f9e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2204      	movs	r2, #4
 8008d2e:	761a      	strb	r2, [r3, #24]
      break;
 8008d30:	e0f1      	b.n	8008f16 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	791b      	ldrb	r3, [r3, #4]
 8008d36:	4619      	mov	r1, r3
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 fc7d 	bl	8009638 <USBH_LL_GetURBState>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008d42:	7bbb      	ldrb	r3, [r7, #14]
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d102      	bne.n	8008d4e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2209      	movs	r2, #9
 8008d4c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008d4e:	7bbb      	ldrb	r3, [r7, #14]
 8008d50:	2b05      	cmp	r3, #5
 8008d52:	d102      	bne.n	8008d5a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008d54:	2303      	movs	r3, #3
 8008d56:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008d58:	e0d6      	b.n	8008f08 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008d5a:	7bbb      	ldrb	r3, [r7, #14]
 8008d5c:	2b04      	cmp	r3, #4
 8008d5e:	f040 80d3 	bne.w	8008f08 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	220b      	movs	r2, #11
 8008d66:	761a      	strb	r2, [r3, #24]
      break;
 8008d68:	e0ce      	b.n	8008f08 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6899      	ldr	r1, [r3, #8]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	899a      	ldrh	r2, [r3, #12]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	795b      	ldrb	r3, [r3, #5]
 8008d76:	2001      	movs	r0, #1
 8008d78:	9000      	str	r0, [sp, #0]
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 f8ea 	bl	8008f54 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008d86:	b29a      	uxth	r2, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2206      	movs	r2, #6
 8008d90:	761a      	strb	r2, [r3, #24]
      break;
 8008d92:	e0c0      	b.n	8008f16 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	795b      	ldrb	r3, [r3, #5]
 8008d98:	4619      	mov	r1, r3
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 fc4c 	bl	8009638 <USBH_LL_GetURBState>
 8008da0:	4603      	mov	r3, r0
 8008da2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008da4:	7bbb      	ldrb	r3, [r7, #14]
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d103      	bne.n	8008db2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2207      	movs	r2, #7
 8008dae:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008db0:	e0ac      	b.n	8008f0c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008db2:	7bbb      	ldrb	r3, [r7, #14]
 8008db4:	2b05      	cmp	r3, #5
 8008db6:	d105      	bne.n	8008dc4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	220c      	movs	r2, #12
 8008dbc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008dbe:	2303      	movs	r3, #3
 8008dc0:	73fb      	strb	r3, [r7, #15]
      break;
 8008dc2:	e0a3      	b.n	8008f0c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008dc4:	7bbb      	ldrb	r3, [r7, #14]
 8008dc6:	2b02      	cmp	r3, #2
 8008dc8:	d103      	bne.n	8008dd2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2205      	movs	r2, #5
 8008dce:	761a      	strb	r2, [r3, #24]
      break;
 8008dd0:	e09c      	b.n	8008f0c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008dd2:	7bbb      	ldrb	r3, [r7, #14]
 8008dd4:	2b04      	cmp	r3, #4
 8008dd6:	f040 8099 	bne.w	8008f0c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	220b      	movs	r2, #11
 8008dde:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008de0:	2302      	movs	r3, #2
 8008de2:	73fb      	strb	r3, [r7, #15]
      break;
 8008de4:	e092      	b.n	8008f0c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	791b      	ldrb	r3, [r3, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	2100      	movs	r1, #0
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 f8d5 	bl	8008f9e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008dfa:	b29a      	uxth	r2, r3
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2208      	movs	r2, #8
 8008e04:	761a      	strb	r2, [r3, #24]

      break;
 8008e06:	e086      	b.n	8008f16 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	791b      	ldrb	r3, [r3, #4]
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 fc12 	bl	8009638 <USBH_LL_GetURBState>
 8008e14:	4603      	mov	r3, r0
 8008e16:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008e18:	7bbb      	ldrb	r3, [r7, #14]
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d105      	bne.n	8008e2a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	220d      	movs	r2, #13
 8008e22:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008e24:	2300      	movs	r3, #0
 8008e26:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008e28:	e072      	b.n	8008f10 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008e2a:	7bbb      	ldrb	r3, [r7, #14]
 8008e2c:	2b04      	cmp	r3, #4
 8008e2e:	d103      	bne.n	8008e38 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	220b      	movs	r2, #11
 8008e34:	761a      	strb	r2, [r3, #24]
      break;
 8008e36:	e06b      	b.n	8008f10 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008e38:	7bbb      	ldrb	r3, [r7, #14]
 8008e3a:	2b05      	cmp	r3, #5
 8008e3c:	d168      	bne.n	8008f10 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008e3e:	2303      	movs	r3, #3
 8008e40:	73fb      	strb	r3, [r7, #15]
      break;
 8008e42:	e065      	b.n	8008f10 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	795b      	ldrb	r3, [r3, #5]
 8008e48:	2201      	movs	r2, #1
 8008e4a:	9200      	str	r2, [sp, #0]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	2100      	movs	r1, #0
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 f87f 	bl	8008f54 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	220a      	movs	r2, #10
 8008e66:	761a      	strb	r2, [r3, #24]
      break;
 8008e68:	e055      	b.n	8008f16 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	795b      	ldrb	r3, [r3, #5]
 8008e6e:	4619      	mov	r1, r3
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 fbe1 	bl	8009638 <USBH_LL_GetURBState>
 8008e76:	4603      	mov	r3, r0
 8008e78:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008e7a:	7bbb      	ldrb	r3, [r7, #14]
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d105      	bne.n	8008e8c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008e80:	2300      	movs	r3, #0
 8008e82:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	220d      	movs	r2, #13
 8008e88:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008e8a:	e043      	b.n	8008f14 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008e8c:	7bbb      	ldrb	r3, [r7, #14]
 8008e8e:	2b02      	cmp	r3, #2
 8008e90:	d103      	bne.n	8008e9a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2209      	movs	r2, #9
 8008e96:	761a      	strb	r2, [r3, #24]
      break;
 8008e98:	e03c      	b.n	8008f14 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008e9a:	7bbb      	ldrb	r3, [r7, #14]
 8008e9c:	2b04      	cmp	r3, #4
 8008e9e:	d139      	bne.n	8008f14 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	220b      	movs	r2, #11
 8008ea4:	761a      	strb	r2, [r3, #24]
      break;
 8008ea6:	e035      	b.n	8008f14 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	7e5b      	ldrb	r3, [r3, #25]
 8008eac:	3301      	adds	r3, #1
 8008eae:	b2da      	uxtb	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	765a      	strb	r2, [r3, #25]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	7e5b      	ldrb	r3, [r3, #25]
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	d806      	bhi.n	8008eca <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008ec8:	e025      	b.n	8008f16 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008ed0:	2106      	movs	r1, #6
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	795b      	ldrb	r3, [r3, #5]
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 f90c 	bl	8009100 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	791b      	ldrb	r3, [r3, #4]
 8008eec:	4619      	mov	r1, r3
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 f906 	bl	8009100 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008efa:	2302      	movs	r3, #2
 8008efc:	73fb      	strb	r3, [r7, #15]
      break;
 8008efe:	e00a      	b.n	8008f16 <USBH_HandleControl+0x2de>

    default:
      break;
 8008f00:	bf00      	nop
 8008f02:	e008      	b.n	8008f16 <USBH_HandleControl+0x2de>
      break;
 8008f04:	bf00      	nop
 8008f06:	e006      	b.n	8008f16 <USBH_HandleControl+0x2de>
      break;
 8008f08:	bf00      	nop
 8008f0a:	e004      	b.n	8008f16 <USBH_HandleControl+0x2de>
      break;
 8008f0c:	bf00      	nop
 8008f0e:	e002      	b.n	8008f16 <USBH_HandleControl+0x2de>
      break;
 8008f10:	bf00      	nop
 8008f12:	e000      	b.n	8008f16 <USBH_HandleControl+0x2de>
      break;
 8008f14:	bf00      	nop
  }

  return status;
 8008f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3710      	adds	r7, #16
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b088      	sub	sp, #32
 8008f24:	af04      	add	r7, sp, #16
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	4613      	mov	r3, r2
 8008f2c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008f2e:	79f9      	ldrb	r1, [r7, #7]
 8008f30:	2300      	movs	r3, #0
 8008f32:	9303      	str	r3, [sp, #12]
 8008f34:	2308      	movs	r3, #8
 8008f36:	9302      	str	r3, [sp, #8]
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	9301      	str	r3, [sp, #4]
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	9300      	str	r3, [sp, #0]
 8008f40:	2300      	movs	r3, #0
 8008f42:	2200      	movs	r2, #0
 8008f44:	68f8      	ldr	r0, [r7, #12]
 8008f46:	f000 fb46 	bl	80095d6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008f4a:	2300      	movs	r3, #0
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3710      	adds	r7, #16
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b088      	sub	sp, #32
 8008f58:	af04      	add	r7, sp, #16
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	4611      	mov	r1, r2
 8008f60:	461a      	mov	r2, r3
 8008f62:	460b      	mov	r3, r1
 8008f64:	80fb      	strh	r3, [r7, #6]
 8008f66:	4613      	mov	r3, r2
 8008f68:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d001      	beq.n	8008f78 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008f74:	2300      	movs	r3, #0
 8008f76:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008f78:	7979      	ldrb	r1, [r7, #5]
 8008f7a:	7e3b      	ldrb	r3, [r7, #24]
 8008f7c:	9303      	str	r3, [sp, #12]
 8008f7e:	88fb      	ldrh	r3, [r7, #6]
 8008f80:	9302      	str	r3, [sp, #8]
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	9301      	str	r3, [sp, #4]
 8008f86:	2301      	movs	r3, #1
 8008f88:	9300      	str	r3, [sp, #0]
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	68f8      	ldr	r0, [r7, #12]
 8008f90:	f000 fb21 	bl	80095d6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008f94:	2300      	movs	r3, #0
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3710      	adds	r7, #16
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}

08008f9e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b088      	sub	sp, #32
 8008fa2:	af04      	add	r7, sp, #16
 8008fa4:	60f8      	str	r0, [r7, #12]
 8008fa6:	60b9      	str	r1, [r7, #8]
 8008fa8:	4611      	mov	r1, r2
 8008faa:	461a      	mov	r2, r3
 8008fac:	460b      	mov	r3, r1
 8008fae:	80fb      	strh	r3, [r7, #6]
 8008fb0:	4613      	mov	r3, r2
 8008fb2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008fb4:	7979      	ldrb	r1, [r7, #5]
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	9303      	str	r3, [sp, #12]
 8008fba:	88fb      	ldrh	r3, [r7, #6]
 8008fbc:	9302      	str	r3, [sp, #8]
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	9301      	str	r3, [sp, #4]
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	9300      	str	r3, [sp, #0]
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	2201      	movs	r2, #1
 8008fca:	68f8      	ldr	r0, [r7, #12]
 8008fcc:	f000 fb03 	bl	80095d6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008fd0:	2300      	movs	r3, #0

}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b088      	sub	sp, #32
 8008fde:	af04      	add	r7, sp, #16
 8008fe0:	60f8      	str	r0, [r7, #12]
 8008fe2:	60b9      	str	r1, [r7, #8]
 8008fe4:	4611      	mov	r1, r2
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	460b      	mov	r3, r1
 8008fea:	80fb      	strh	r3, [r7, #6]
 8008fec:	4613      	mov	r3, r2
 8008fee:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d001      	beq.n	8008ffe <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008ffe:	7979      	ldrb	r1, [r7, #5]
 8009000:	7e3b      	ldrb	r3, [r7, #24]
 8009002:	9303      	str	r3, [sp, #12]
 8009004:	88fb      	ldrh	r3, [r7, #6]
 8009006:	9302      	str	r3, [sp, #8]
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	9301      	str	r3, [sp, #4]
 800900c:	2301      	movs	r3, #1
 800900e:	9300      	str	r3, [sp, #0]
 8009010:	2302      	movs	r3, #2
 8009012:	2200      	movs	r2, #0
 8009014:	68f8      	ldr	r0, [r7, #12]
 8009016:	f000 fade 	bl	80095d6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800901a:	2300      	movs	r3, #0
}
 800901c:	4618      	mov	r0, r3
 800901e:	3710      	adds	r7, #16
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b088      	sub	sp, #32
 8009028:	af04      	add	r7, sp, #16
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	4611      	mov	r1, r2
 8009030:	461a      	mov	r2, r3
 8009032:	460b      	mov	r3, r1
 8009034:	80fb      	strh	r3, [r7, #6]
 8009036:	4613      	mov	r3, r2
 8009038:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800903a:	7979      	ldrb	r1, [r7, #5]
 800903c:	2300      	movs	r3, #0
 800903e:	9303      	str	r3, [sp, #12]
 8009040:	88fb      	ldrh	r3, [r7, #6]
 8009042:	9302      	str	r3, [sp, #8]
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	9301      	str	r3, [sp, #4]
 8009048:	2301      	movs	r3, #1
 800904a:	9300      	str	r3, [sp, #0]
 800904c:	2302      	movs	r3, #2
 800904e:	2201      	movs	r2, #1
 8009050:	68f8      	ldr	r0, [r7, #12]
 8009052:	f000 fac0 	bl	80095d6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3710      	adds	r7, #16
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b086      	sub	sp, #24
 8009064:	af04      	add	r7, sp, #16
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	4608      	mov	r0, r1
 800906a:	4611      	mov	r1, r2
 800906c:	461a      	mov	r2, r3
 800906e:	4603      	mov	r3, r0
 8009070:	70fb      	strb	r3, [r7, #3]
 8009072:	460b      	mov	r3, r1
 8009074:	70bb      	strb	r3, [r7, #2]
 8009076:	4613      	mov	r3, r2
 8009078:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800907a:	7878      	ldrb	r0, [r7, #1]
 800907c:	78ba      	ldrb	r2, [r7, #2]
 800907e:	78f9      	ldrb	r1, [r7, #3]
 8009080:	8b3b      	ldrh	r3, [r7, #24]
 8009082:	9302      	str	r3, [sp, #8]
 8009084:	7d3b      	ldrb	r3, [r7, #20]
 8009086:	9301      	str	r3, [sp, #4]
 8009088:	7c3b      	ldrb	r3, [r7, #16]
 800908a:	9300      	str	r3, [sp, #0]
 800908c:	4603      	mov	r3, r0
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 fa53 	bl	800953a <USBH_LL_OpenPipe>

  return USBH_OK;
 8009094:	2300      	movs	r3, #0
}
 8009096:	4618      	mov	r0, r3
 8009098:	3708      	adds	r7, #8
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800909e:	b580      	push	{r7, lr}
 80090a0:	b082      	sub	sp, #8
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
 80090a6:	460b      	mov	r3, r1
 80090a8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80090aa:	78fb      	ldrb	r3, [r7, #3]
 80090ac:	4619      	mov	r1, r3
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 fa72 	bl	8009598 <USBH_LL_ClosePipe>

  return USBH_OK;
 80090b4:	2300      	movs	r3, #0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3708      	adds	r7, #8
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}

080090be <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80090be:	b580      	push	{r7, lr}
 80090c0:	b084      	sub	sp, #16
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
 80090c6:	460b      	mov	r3, r1
 80090c8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 f836 	bl	800913c <USBH_GetFreePipe>
 80090d0:	4603      	mov	r3, r0
 80090d2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80090d4:	89fb      	ldrh	r3, [r7, #14]
 80090d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80090da:	4293      	cmp	r3, r2
 80090dc:	d00a      	beq.n	80090f4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80090de:	78fa      	ldrb	r2, [r7, #3]
 80090e0:	89fb      	ldrh	r3, [r7, #14]
 80090e2:	f003 030f 	and.w	r3, r3, #15
 80090e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80090ea:	6879      	ldr	r1, [r7, #4]
 80090ec:	33e0      	adds	r3, #224	; 0xe0
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	440b      	add	r3, r1
 80090f2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80090f4:	89fb      	ldrh	r3, [r7, #14]
 80090f6:	b2db      	uxtb	r3, r3
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3710      	adds	r7, #16
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	460b      	mov	r3, r1
 800910a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800910c:	78fb      	ldrb	r3, [r7, #3]
 800910e:	2b0f      	cmp	r3, #15
 8009110:	d80d      	bhi.n	800912e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009112:	78fb      	ldrb	r3, [r7, #3]
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	33e0      	adds	r3, #224	; 0xe0
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	4413      	add	r3, r2
 800911c:	685a      	ldr	r2, [r3, #4]
 800911e:	78fb      	ldrb	r3, [r7, #3]
 8009120:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009124:	6879      	ldr	r1, [r7, #4]
 8009126:	33e0      	adds	r3, #224	; 0xe0
 8009128:	009b      	lsls	r3, r3, #2
 800912a:	440b      	add	r3, r1
 800912c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800912e:	2300      	movs	r3, #0
}
 8009130:	4618      	mov	r0, r3
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr

0800913c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800913c:	b480      	push	{r7}
 800913e:	b085      	sub	sp, #20
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009144:	2300      	movs	r3, #0
 8009146:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009148:	2300      	movs	r3, #0
 800914a:	73fb      	strb	r3, [r7, #15]
 800914c:	e00f      	b.n	800916e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800914e:	7bfb      	ldrb	r3, [r7, #15]
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	33e0      	adds	r3, #224	; 0xe0
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	4413      	add	r3, r2
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800915e:	2b00      	cmp	r3, #0
 8009160:	d102      	bne.n	8009168 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009162:	7bfb      	ldrb	r3, [r7, #15]
 8009164:	b29b      	uxth	r3, r3
 8009166:	e007      	b.n	8009178 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009168:	7bfb      	ldrb	r3, [r7, #15]
 800916a:	3301      	adds	r3, #1
 800916c:	73fb      	strb	r3, [r7, #15]
 800916e:	7bfb      	ldrb	r3, [r7, #15]
 8009170:	2b0f      	cmp	r3, #15
 8009172:	d9ec      	bls.n	800914e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009174:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009178:	4618      	mov	r0, r3
 800917a:	3714      	adds	r7, #20
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr

08009184 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009188:	2201      	movs	r2, #1
 800918a:	490e      	ldr	r1, [pc, #56]	; (80091c4 <MX_USB_HOST_Init+0x40>)
 800918c:	480e      	ldr	r0, [pc, #56]	; (80091c8 <MX_USB_HOST_Init+0x44>)
 800918e:	f7fe fba7 	bl	80078e0 <USBH_Init>
 8009192:	4603      	mov	r3, r0
 8009194:	2b00      	cmp	r3, #0
 8009196:	d001      	beq.n	800919c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009198:	f7f7 fd74 	bl	8000c84 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800919c:	490b      	ldr	r1, [pc, #44]	; (80091cc <MX_USB_HOST_Init+0x48>)
 800919e:	480a      	ldr	r0, [pc, #40]	; (80091c8 <MX_USB_HOST_Init+0x44>)
 80091a0:	f7fe fc2c 	bl	80079fc <USBH_RegisterClass>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d001      	beq.n	80091ae <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80091aa:	f7f7 fd6b 	bl	8000c84 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80091ae:	4806      	ldr	r0, [pc, #24]	; (80091c8 <MX_USB_HOST_Init+0x44>)
 80091b0:	f7fe fcb0 	bl	8007b14 <USBH_Start>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d001      	beq.n	80091be <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80091ba:	f7f7 fd63 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80091be:	bf00      	nop
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	080091e5 	.word	0x080091e5
 80091c8:	20000248 	.word	0x20000248
 80091cc:	2000000c 	.word	0x2000000c

080091d0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80091d4:	4802      	ldr	r0, [pc, #8]	; (80091e0 <MX_USB_HOST_Process+0x10>)
 80091d6:	f7fe fcad 	bl	8007b34 <USBH_Process>
}
 80091da:	bf00      	nop
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop
 80091e0:	20000248 	.word	0x20000248

080091e4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	460b      	mov	r3, r1
 80091ee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80091f0:	78fb      	ldrb	r3, [r7, #3]
 80091f2:	3b01      	subs	r3, #1
 80091f4:	2b04      	cmp	r3, #4
 80091f6:	d819      	bhi.n	800922c <USBH_UserProcess+0x48>
 80091f8:	a201      	add	r2, pc, #4	; (adr r2, 8009200 <USBH_UserProcess+0x1c>)
 80091fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091fe:	bf00      	nop
 8009200:	0800922d 	.word	0x0800922d
 8009204:	0800921d 	.word	0x0800921d
 8009208:	0800922d 	.word	0x0800922d
 800920c:	08009225 	.word	0x08009225
 8009210:	08009215 	.word	0x08009215
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009214:	4b09      	ldr	r3, [pc, #36]	; (800923c <USBH_UserProcess+0x58>)
 8009216:	2203      	movs	r2, #3
 8009218:	701a      	strb	r2, [r3, #0]
  break;
 800921a:	e008      	b.n	800922e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800921c:	4b07      	ldr	r3, [pc, #28]	; (800923c <USBH_UserProcess+0x58>)
 800921e:	2202      	movs	r2, #2
 8009220:	701a      	strb	r2, [r3, #0]
  break;
 8009222:	e004      	b.n	800922e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009224:	4b05      	ldr	r3, [pc, #20]	; (800923c <USBH_UserProcess+0x58>)
 8009226:	2201      	movs	r2, #1
 8009228:	701a      	strb	r2, [r3, #0]
  break;
 800922a:	e000      	b.n	800922e <USBH_UserProcess+0x4a>

  default:
  break;
 800922c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800922e:	bf00      	nop
 8009230:	370c      	adds	r7, #12
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop
 800923c:	20000620 	.word	0x20000620

08009240 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b08a      	sub	sp, #40	; 0x28
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009248:	f107 0314 	add.w	r3, r7, #20
 800924c:	2200      	movs	r2, #0
 800924e:	601a      	str	r2, [r3, #0]
 8009250:	605a      	str	r2, [r3, #4]
 8009252:	609a      	str	r2, [r3, #8]
 8009254:	60da      	str	r2, [r3, #12]
 8009256:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009260:	d147      	bne.n	80092f2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009262:	2300      	movs	r3, #0
 8009264:	613b      	str	r3, [r7, #16]
 8009266:	4b25      	ldr	r3, [pc, #148]	; (80092fc <HAL_HCD_MspInit+0xbc>)
 8009268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800926a:	4a24      	ldr	r2, [pc, #144]	; (80092fc <HAL_HCD_MspInit+0xbc>)
 800926c:	f043 0301 	orr.w	r3, r3, #1
 8009270:	6313      	str	r3, [r2, #48]	; 0x30
 8009272:	4b22      	ldr	r3, [pc, #136]	; (80092fc <HAL_HCD_MspInit+0xbc>)
 8009274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009276:	f003 0301 	and.w	r3, r3, #1
 800927a:	613b      	str	r3, [r7, #16]
 800927c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800927e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009284:	2300      	movs	r3, #0
 8009286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009288:	2300      	movs	r3, #0
 800928a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800928c:	f107 0314 	add.w	r3, r7, #20
 8009290:	4619      	mov	r1, r3
 8009292:	481b      	ldr	r0, [pc, #108]	; (8009300 <HAL_HCD_MspInit+0xc0>)
 8009294:	f7f8 f934 	bl	8001500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009298:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800929c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800929e:	2302      	movs	r3, #2
 80092a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092a2:	2300      	movs	r3, #0
 80092a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092a6:	2300      	movs	r3, #0
 80092a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80092aa:	230a      	movs	r3, #10
 80092ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80092ae:	f107 0314 	add.w	r3, r7, #20
 80092b2:	4619      	mov	r1, r3
 80092b4:	4812      	ldr	r0, [pc, #72]	; (8009300 <HAL_HCD_MspInit+0xc0>)
 80092b6:	f7f8 f923 	bl	8001500 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80092ba:	4b10      	ldr	r3, [pc, #64]	; (80092fc <HAL_HCD_MspInit+0xbc>)
 80092bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092be:	4a0f      	ldr	r2, [pc, #60]	; (80092fc <HAL_HCD_MspInit+0xbc>)
 80092c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092c4:	6353      	str	r3, [r2, #52]	; 0x34
 80092c6:	2300      	movs	r3, #0
 80092c8:	60fb      	str	r3, [r7, #12]
 80092ca:	4b0c      	ldr	r3, [pc, #48]	; (80092fc <HAL_HCD_MspInit+0xbc>)
 80092cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092ce:	4a0b      	ldr	r2, [pc, #44]	; (80092fc <HAL_HCD_MspInit+0xbc>)
 80092d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80092d4:	6453      	str	r3, [r2, #68]	; 0x44
 80092d6:	4b09      	ldr	r3, [pc, #36]	; (80092fc <HAL_HCD_MspInit+0xbc>)
 80092d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092de:	60fb      	str	r3, [r7, #12]
 80092e0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80092e2:	2200      	movs	r2, #0
 80092e4:	2100      	movs	r1, #0
 80092e6:	2043      	movs	r0, #67	; 0x43
 80092e8:	f7f8 f8d3 	bl	8001492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80092ec:	2043      	movs	r0, #67	; 0x43
 80092ee:	f7f8 f8ec 	bl	80014ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80092f2:	bf00      	nop
 80092f4:	3728      	adds	r7, #40	; 0x28
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop
 80092fc:	40023800 	.word	0x40023800
 8009300:	40020000 	.word	0x40020000

08009304 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009312:	4618      	mov	r0, r3
 8009314:	f7fe ffed 	bl	80082f2 <USBH_LL_IncTimer>
}
 8009318:	bf00      	nop
 800931a:	3708      	adds	r7, #8
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800932e:	4618      	mov	r0, r3
 8009330:	f7ff f825 	bl	800837e <USBH_LL_Connect>
}
 8009334:	bf00      	nop
 8009336:	3708      	adds	r7, #8
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800934a:	4618      	mov	r0, r3
 800934c:	f7ff f82e 	bl	80083ac <USBH_LL_Disconnect>
}
 8009350:	bf00      	nop
 8009352:	3708      	adds	r7, #8
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	460b      	mov	r3, r1
 8009362:	70fb      	strb	r3, [r7, #3]
 8009364:	4613      	mov	r3, r2
 8009366:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009368:	bf00      	nop
 800936a:	370c      	adds	r7, #12
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr

08009374 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009382:	4618      	mov	r0, r3
 8009384:	f7fe ffdf 	bl	8008346 <USBH_LL_PortEnabled>
}
 8009388:	bf00      	nop
 800938a:	3708      	adds	r7, #8
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800939e:	4618      	mov	r0, r3
 80093a0:	f7fe ffdf 	bl	8008362 <USBH_LL_PortDisabled>
}
 80093a4:	bf00      	nop
 80093a6:	3708      	adds	r7, #8
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d12a      	bne.n	8009414 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80093be:	4a18      	ldr	r2, [pc, #96]	; (8009420 <USBH_LL_Init+0x74>)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4a15      	ldr	r2, [pc, #84]	; (8009420 <USBH_LL_Init+0x74>)
 80093ca:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80093ce:	4b14      	ldr	r3, [pc, #80]	; (8009420 <USBH_LL_Init+0x74>)
 80093d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80093d4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80093d6:	4b12      	ldr	r3, [pc, #72]	; (8009420 <USBH_LL_Init+0x74>)
 80093d8:	2208      	movs	r2, #8
 80093da:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80093dc:	4b10      	ldr	r3, [pc, #64]	; (8009420 <USBH_LL_Init+0x74>)
 80093de:	2201      	movs	r2, #1
 80093e0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80093e2:	4b0f      	ldr	r3, [pc, #60]	; (8009420 <USBH_LL_Init+0x74>)
 80093e4:	2200      	movs	r2, #0
 80093e6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80093e8:	4b0d      	ldr	r3, [pc, #52]	; (8009420 <USBH_LL_Init+0x74>)
 80093ea:	2202      	movs	r2, #2
 80093ec:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80093ee:	4b0c      	ldr	r3, [pc, #48]	; (8009420 <USBH_LL_Init+0x74>)
 80093f0:	2200      	movs	r2, #0
 80093f2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80093f4:	480a      	ldr	r0, [pc, #40]	; (8009420 <USBH_LL_Init+0x74>)
 80093f6:	f7f8 fa38 	bl	800186a <HAL_HCD_Init>
 80093fa:	4603      	mov	r3, r0
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d001      	beq.n	8009404 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009400:	f7f7 fc40 	bl	8000c84 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009404:	4806      	ldr	r0, [pc, #24]	; (8009420 <USBH_LL_Init+0x74>)
 8009406:	f7f8 fe1c 	bl	8002042 <HAL_HCD_GetCurrentFrame>
 800940a:	4603      	mov	r3, r0
 800940c:	4619      	mov	r1, r3
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f7fe ff60 	bl	80082d4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009414:	2300      	movs	r3, #0
}
 8009416:	4618      	mov	r0, r3
 8009418:	3708      	adds	r7, #8
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	20000624 	.word	0x20000624

08009424 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800942c:	2300      	movs	r3, #0
 800942e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009430:	2300      	movs	r3, #0
 8009432:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800943a:	4618      	mov	r0, r3
 800943c:	f7f8 fd8b 	bl	8001f56 <HAL_HCD_Start>
 8009440:	4603      	mov	r3, r0
 8009442:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009444:	7bfb      	ldrb	r3, [r7, #15]
 8009446:	4618      	mov	r0, r3
 8009448:	f000 f95c 	bl	8009704 <USBH_Get_USB_Status>
 800944c:	4603      	mov	r3, r0
 800944e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009450:	7bbb      	ldrb	r3, [r7, #14]
}
 8009452:	4618      	mov	r0, r3
 8009454:	3710      	adds	r7, #16
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}

0800945a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800945a:	b580      	push	{r7, lr}
 800945c:	b084      	sub	sp, #16
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009462:	2300      	movs	r3, #0
 8009464:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009466:	2300      	movs	r3, #0
 8009468:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009470:	4618      	mov	r0, r3
 8009472:	f7f8 fd93 	bl	8001f9c <HAL_HCD_Stop>
 8009476:	4603      	mov	r3, r0
 8009478:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800947a:	7bfb      	ldrb	r3, [r7, #15]
 800947c:	4618      	mov	r0, r3
 800947e:	f000 f941 	bl	8009704 <USBH_Get_USB_Status>
 8009482:	4603      	mov	r3, r0
 8009484:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009486:	7bbb      	ldrb	r3, [r7, #14]
}
 8009488:	4618      	mov	r0, r3
 800948a:	3710      	adds	r7, #16
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009498:	2301      	movs	r3, #1
 800949a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7f8 fddb 	bl	800205e <HAL_HCD_GetCurrentSpeed>
 80094a8:	4603      	mov	r3, r0
 80094aa:	2b02      	cmp	r3, #2
 80094ac:	d00c      	beq.n	80094c8 <USBH_LL_GetSpeed+0x38>
 80094ae:	2b02      	cmp	r3, #2
 80094b0:	d80d      	bhi.n	80094ce <USBH_LL_GetSpeed+0x3e>
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d002      	beq.n	80094bc <USBH_LL_GetSpeed+0x2c>
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d003      	beq.n	80094c2 <USBH_LL_GetSpeed+0x32>
 80094ba:	e008      	b.n	80094ce <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80094bc:	2300      	movs	r3, #0
 80094be:	73fb      	strb	r3, [r7, #15]
    break;
 80094c0:	e008      	b.n	80094d4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80094c2:	2301      	movs	r3, #1
 80094c4:	73fb      	strb	r3, [r7, #15]
    break;
 80094c6:	e005      	b.n	80094d4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80094c8:	2302      	movs	r3, #2
 80094ca:	73fb      	strb	r3, [r7, #15]
    break;
 80094cc:	e002      	b.n	80094d4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80094ce:	2301      	movs	r3, #1
 80094d0:	73fb      	strb	r3, [r7, #15]
    break;
 80094d2:	bf00      	nop
  }
  return  speed;
 80094d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3710      	adds	r7, #16
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80094de:	b580      	push	{r7, lr}
 80094e0:	b084      	sub	sp, #16
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094e6:	2300      	movs	r3, #0
 80094e8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80094ea:	2300      	movs	r3, #0
 80094ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80094f4:	4618      	mov	r0, r3
 80094f6:	f7f8 fd6e 	bl	8001fd6 <HAL_HCD_ResetPort>
 80094fa:	4603      	mov	r3, r0
 80094fc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80094fe:	7bfb      	ldrb	r3, [r7, #15]
 8009500:	4618      	mov	r0, r3
 8009502:	f000 f8ff 	bl	8009704 <USBH_Get_USB_Status>
 8009506:	4603      	mov	r3, r0
 8009508:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800950a:	7bbb      	ldrb	r3, [r7, #14]
}
 800950c:	4618      	mov	r0, r3
 800950e:	3710      	adds	r7, #16
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	460b      	mov	r3, r1
 800951e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009526:	78fa      	ldrb	r2, [r7, #3]
 8009528:	4611      	mov	r1, r2
 800952a:	4618      	mov	r0, r3
 800952c:	f7f8 fd75 	bl	800201a <HAL_HCD_HC_GetXferCount>
 8009530:	4603      	mov	r3, r0
}
 8009532:	4618      	mov	r0, r3
 8009534:	3708      	adds	r7, #8
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800953a:	b590      	push	{r4, r7, lr}
 800953c:	b089      	sub	sp, #36	; 0x24
 800953e:	af04      	add	r7, sp, #16
 8009540:	6078      	str	r0, [r7, #4]
 8009542:	4608      	mov	r0, r1
 8009544:	4611      	mov	r1, r2
 8009546:	461a      	mov	r2, r3
 8009548:	4603      	mov	r3, r0
 800954a:	70fb      	strb	r3, [r7, #3]
 800954c:	460b      	mov	r3, r1
 800954e:	70bb      	strb	r3, [r7, #2]
 8009550:	4613      	mov	r3, r2
 8009552:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009554:	2300      	movs	r3, #0
 8009556:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009558:	2300      	movs	r3, #0
 800955a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009562:	787c      	ldrb	r4, [r7, #1]
 8009564:	78ba      	ldrb	r2, [r7, #2]
 8009566:	78f9      	ldrb	r1, [r7, #3]
 8009568:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800956a:	9302      	str	r3, [sp, #8]
 800956c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009570:	9301      	str	r3, [sp, #4]
 8009572:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009576:	9300      	str	r3, [sp, #0]
 8009578:	4623      	mov	r3, r4
 800957a:	f7f8 f9d8 	bl	800192e <HAL_HCD_HC_Init>
 800957e:	4603      	mov	r3, r0
 8009580:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009582:	7bfb      	ldrb	r3, [r7, #15]
 8009584:	4618      	mov	r0, r3
 8009586:	f000 f8bd 	bl	8009704 <USBH_Get_USB_Status>
 800958a:	4603      	mov	r3, r0
 800958c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800958e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009590:	4618      	mov	r0, r3
 8009592:	3714      	adds	r7, #20
 8009594:	46bd      	mov	sp, r7
 8009596:	bd90      	pop	{r4, r7, pc}

08009598 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	460b      	mov	r3, r1
 80095a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095a4:	2300      	movs	r3, #0
 80095a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80095a8:	2300      	movs	r3, #0
 80095aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80095b2:	78fa      	ldrb	r2, [r7, #3]
 80095b4:	4611      	mov	r1, r2
 80095b6:	4618      	mov	r0, r3
 80095b8:	f7f8 fa48 	bl	8001a4c <HAL_HCD_HC_Halt>
 80095bc:	4603      	mov	r3, r0
 80095be:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80095c0:	7bfb      	ldrb	r3, [r7, #15]
 80095c2:	4618      	mov	r0, r3
 80095c4:	f000 f89e 	bl	8009704 <USBH_Get_USB_Status>
 80095c8:	4603      	mov	r3, r0
 80095ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3710      	adds	r7, #16
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80095d6:	b590      	push	{r4, r7, lr}
 80095d8:	b089      	sub	sp, #36	; 0x24
 80095da:	af04      	add	r7, sp, #16
 80095dc:	6078      	str	r0, [r7, #4]
 80095de:	4608      	mov	r0, r1
 80095e0:	4611      	mov	r1, r2
 80095e2:	461a      	mov	r2, r3
 80095e4:	4603      	mov	r3, r0
 80095e6:	70fb      	strb	r3, [r7, #3]
 80095e8:	460b      	mov	r3, r1
 80095ea:	70bb      	strb	r3, [r7, #2]
 80095ec:	4613      	mov	r3, r2
 80095ee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095f0:	2300      	movs	r3, #0
 80095f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80095f4:	2300      	movs	r3, #0
 80095f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80095fe:	787c      	ldrb	r4, [r7, #1]
 8009600:	78ba      	ldrb	r2, [r7, #2]
 8009602:	78f9      	ldrb	r1, [r7, #3]
 8009604:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009608:	9303      	str	r3, [sp, #12]
 800960a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800960c:	9302      	str	r3, [sp, #8]
 800960e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009610:	9301      	str	r3, [sp, #4]
 8009612:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009616:	9300      	str	r3, [sp, #0]
 8009618:	4623      	mov	r3, r4
 800961a:	f7f8 fa3b 	bl	8001a94 <HAL_HCD_HC_SubmitRequest>
 800961e:	4603      	mov	r3, r0
 8009620:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009622:	7bfb      	ldrb	r3, [r7, #15]
 8009624:	4618      	mov	r0, r3
 8009626:	f000 f86d 	bl	8009704 <USBH_Get_USB_Status>
 800962a:	4603      	mov	r3, r0
 800962c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800962e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009630:	4618      	mov	r0, r3
 8009632:	3714      	adds	r7, #20
 8009634:	46bd      	mov	sp, r7
 8009636:	bd90      	pop	{r4, r7, pc}

08009638 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	460b      	mov	r3, r1
 8009642:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800964a:	78fa      	ldrb	r2, [r7, #3]
 800964c:	4611      	mov	r1, r2
 800964e:	4618      	mov	r0, r3
 8009650:	f7f8 fccf 	bl	8001ff2 <HAL_HCD_HC_GetURBState>
 8009654:	4603      	mov	r3, r0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3708      	adds	r7, #8
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}

0800965e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800965e:	b580      	push	{r7, lr}
 8009660:	b082      	sub	sp, #8
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
 8009666:	460b      	mov	r3, r1
 8009668:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009670:	2b01      	cmp	r3, #1
 8009672:	d103      	bne.n	800967c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009674:	78fb      	ldrb	r3, [r7, #3]
 8009676:	4618      	mov	r0, r3
 8009678:	f000 f870 	bl	800975c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800967c:	20c8      	movs	r0, #200	; 0xc8
 800967e:	f7f7 fe09 	bl	8001294 <HAL_Delay>
  return USBH_OK;
 8009682:	2300      	movs	r3, #0
}
 8009684:	4618      	mov	r0, r3
 8009686:	3708      	adds	r7, #8
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800968c:	b480      	push	{r7}
 800968e:	b085      	sub	sp, #20
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	460b      	mov	r3, r1
 8009696:	70fb      	strb	r3, [r7, #3]
 8009698:	4613      	mov	r3, r2
 800969a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80096a2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80096a4:	78fb      	ldrb	r3, [r7, #3]
 80096a6:	68fa      	ldr	r2, [r7, #12]
 80096a8:	212c      	movs	r1, #44	; 0x2c
 80096aa:	fb01 f303 	mul.w	r3, r1, r3
 80096ae:	4413      	add	r3, r2
 80096b0:	333b      	adds	r3, #59	; 0x3b
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d009      	beq.n	80096cc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80096b8:	78fb      	ldrb	r3, [r7, #3]
 80096ba:	68fa      	ldr	r2, [r7, #12]
 80096bc:	212c      	movs	r1, #44	; 0x2c
 80096be:	fb01 f303 	mul.w	r3, r1, r3
 80096c2:	4413      	add	r3, r2
 80096c4:	3354      	adds	r3, #84	; 0x54
 80096c6:	78ba      	ldrb	r2, [r7, #2]
 80096c8:	701a      	strb	r2, [r3, #0]
 80096ca:	e008      	b.n	80096de <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80096cc:	78fb      	ldrb	r3, [r7, #3]
 80096ce:	68fa      	ldr	r2, [r7, #12]
 80096d0:	212c      	movs	r1, #44	; 0x2c
 80096d2:	fb01 f303 	mul.w	r3, r1, r3
 80096d6:	4413      	add	r3, r2
 80096d8:	3355      	adds	r3, #85	; 0x55
 80096da:	78ba      	ldrb	r2, [r7, #2]
 80096dc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80096de:	2300      	movs	r3, #0
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3714      	adds	r7, #20
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr

080096ec <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f7f7 fdcd 	bl	8001294 <HAL_Delay>
}
 80096fa:	bf00      	nop
 80096fc:	3708      	adds	r7, #8
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
	...

08009704 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009704:	b480      	push	{r7}
 8009706:	b085      	sub	sp, #20
 8009708:	af00      	add	r7, sp, #0
 800970a:	4603      	mov	r3, r0
 800970c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800970e:	2300      	movs	r3, #0
 8009710:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009712:	79fb      	ldrb	r3, [r7, #7]
 8009714:	2b03      	cmp	r3, #3
 8009716:	d817      	bhi.n	8009748 <USBH_Get_USB_Status+0x44>
 8009718:	a201      	add	r2, pc, #4	; (adr r2, 8009720 <USBH_Get_USB_Status+0x1c>)
 800971a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800971e:	bf00      	nop
 8009720:	08009731 	.word	0x08009731
 8009724:	08009737 	.word	0x08009737
 8009728:	0800973d 	.word	0x0800973d
 800972c:	08009743 	.word	0x08009743
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009730:	2300      	movs	r3, #0
 8009732:	73fb      	strb	r3, [r7, #15]
    break;
 8009734:	e00b      	b.n	800974e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009736:	2302      	movs	r3, #2
 8009738:	73fb      	strb	r3, [r7, #15]
    break;
 800973a:	e008      	b.n	800974e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800973c:	2301      	movs	r3, #1
 800973e:	73fb      	strb	r3, [r7, #15]
    break;
 8009740:	e005      	b.n	800974e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009742:	2302      	movs	r3, #2
 8009744:	73fb      	strb	r3, [r7, #15]
    break;
 8009746:	e002      	b.n	800974e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009748:	2302      	movs	r3, #2
 800974a:	73fb      	strb	r3, [r7, #15]
    break;
 800974c:	bf00      	nop
  }
  return usb_status;
 800974e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009750:	4618      	mov	r0, r3
 8009752:	3714      	adds	r7, #20
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr

0800975c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	4603      	mov	r3, r0
 8009764:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009766:	79fb      	ldrb	r3, [r7, #7]
 8009768:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800976a:	79fb      	ldrb	r3, [r7, #7]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d102      	bne.n	8009776 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009770:	2300      	movs	r3, #0
 8009772:	73fb      	strb	r3, [r7, #15]
 8009774:	e001      	b.n	800977a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009776:	2301      	movs	r3, #1
 8009778:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800977a:	7bfb      	ldrb	r3, [r7, #15]
 800977c:	461a      	mov	r2, r3
 800977e:	2101      	movs	r1, #1
 8009780:	4803      	ldr	r0, [pc, #12]	; (8009790 <MX_DriverVbusFS+0x34>)
 8009782:	f7f8 f859 	bl	8001838 <HAL_GPIO_WritePin>
}
 8009786:	bf00      	nop
 8009788:	3710      	adds	r7, #16
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	40020800 	.word	0x40020800

08009794 <__errno>:
 8009794:	4b01      	ldr	r3, [pc, #4]	; (800979c <__errno+0x8>)
 8009796:	6818      	ldr	r0, [r3, #0]
 8009798:	4770      	bx	lr
 800979a:	bf00      	nop
 800979c:	2000002c 	.word	0x2000002c

080097a0 <__libc_init_array>:
 80097a0:	b570      	push	{r4, r5, r6, lr}
 80097a2:	4d0d      	ldr	r5, [pc, #52]	; (80097d8 <__libc_init_array+0x38>)
 80097a4:	4c0d      	ldr	r4, [pc, #52]	; (80097dc <__libc_init_array+0x3c>)
 80097a6:	1b64      	subs	r4, r4, r5
 80097a8:	10a4      	asrs	r4, r4, #2
 80097aa:	2600      	movs	r6, #0
 80097ac:	42a6      	cmp	r6, r4
 80097ae:	d109      	bne.n	80097c4 <__libc_init_array+0x24>
 80097b0:	4d0b      	ldr	r5, [pc, #44]	; (80097e0 <__libc_init_array+0x40>)
 80097b2:	4c0c      	ldr	r4, [pc, #48]	; (80097e4 <__libc_init_array+0x44>)
 80097b4:	f000 f92e 	bl	8009a14 <_init>
 80097b8:	1b64      	subs	r4, r4, r5
 80097ba:	10a4      	asrs	r4, r4, #2
 80097bc:	2600      	movs	r6, #0
 80097be:	42a6      	cmp	r6, r4
 80097c0:	d105      	bne.n	80097ce <__libc_init_array+0x2e>
 80097c2:	bd70      	pop	{r4, r5, r6, pc}
 80097c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80097c8:	4798      	blx	r3
 80097ca:	3601      	adds	r6, #1
 80097cc:	e7ee      	b.n	80097ac <__libc_init_array+0xc>
 80097ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80097d2:	4798      	blx	r3
 80097d4:	3601      	adds	r6, #1
 80097d6:	e7f2      	b.n	80097be <__libc_init_array+0x1e>
 80097d8:	08009a50 	.word	0x08009a50
 80097dc:	08009a50 	.word	0x08009a50
 80097e0:	08009a50 	.word	0x08009a50
 80097e4:	08009a54 	.word	0x08009a54

080097e8 <malloc>:
 80097e8:	4b02      	ldr	r3, [pc, #8]	; (80097f4 <malloc+0xc>)
 80097ea:	4601      	mov	r1, r0
 80097ec:	6818      	ldr	r0, [r3, #0]
 80097ee:	f000 b87f 	b.w	80098f0 <_malloc_r>
 80097f2:	bf00      	nop
 80097f4:	2000002c 	.word	0x2000002c

080097f8 <free>:
 80097f8:	4b02      	ldr	r3, [pc, #8]	; (8009804 <free+0xc>)
 80097fa:	4601      	mov	r1, r0
 80097fc:	6818      	ldr	r0, [r3, #0]
 80097fe:	f000 b80b 	b.w	8009818 <_free_r>
 8009802:	bf00      	nop
 8009804:	2000002c 	.word	0x2000002c

08009808 <memset>:
 8009808:	4402      	add	r2, r0
 800980a:	4603      	mov	r3, r0
 800980c:	4293      	cmp	r3, r2
 800980e:	d100      	bne.n	8009812 <memset+0xa>
 8009810:	4770      	bx	lr
 8009812:	f803 1b01 	strb.w	r1, [r3], #1
 8009816:	e7f9      	b.n	800980c <memset+0x4>

08009818 <_free_r>:
 8009818:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800981a:	2900      	cmp	r1, #0
 800981c:	d044      	beq.n	80098a8 <_free_r+0x90>
 800981e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009822:	9001      	str	r0, [sp, #4]
 8009824:	2b00      	cmp	r3, #0
 8009826:	f1a1 0404 	sub.w	r4, r1, #4
 800982a:	bfb8      	it	lt
 800982c:	18e4      	addlt	r4, r4, r3
 800982e:	f000 f8e3 	bl	80099f8 <__malloc_lock>
 8009832:	4a1e      	ldr	r2, [pc, #120]	; (80098ac <_free_r+0x94>)
 8009834:	9801      	ldr	r0, [sp, #4]
 8009836:	6813      	ldr	r3, [r2, #0]
 8009838:	b933      	cbnz	r3, 8009848 <_free_r+0x30>
 800983a:	6063      	str	r3, [r4, #4]
 800983c:	6014      	str	r4, [r2, #0]
 800983e:	b003      	add	sp, #12
 8009840:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009844:	f000 b8de 	b.w	8009a04 <__malloc_unlock>
 8009848:	42a3      	cmp	r3, r4
 800984a:	d908      	bls.n	800985e <_free_r+0x46>
 800984c:	6825      	ldr	r5, [r4, #0]
 800984e:	1961      	adds	r1, r4, r5
 8009850:	428b      	cmp	r3, r1
 8009852:	bf01      	itttt	eq
 8009854:	6819      	ldreq	r1, [r3, #0]
 8009856:	685b      	ldreq	r3, [r3, #4]
 8009858:	1949      	addeq	r1, r1, r5
 800985a:	6021      	streq	r1, [r4, #0]
 800985c:	e7ed      	b.n	800983a <_free_r+0x22>
 800985e:	461a      	mov	r2, r3
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	b10b      	cbz	r3, 8009868 <_free_r+0x50>
 8009864:	42a3      	cmp	r3, r4
 8009866:	d9fa      	bls.n	800985e <_free_r+0x46>
 8009868:	6811      	ldr	r1, [r2, #0]
 800986a:	1855      	adds	r5, r2, r1
 800986c:	42a5      	cmp	r5, r4
 800986e:	d10b      	bne.n	8009888 <_free_r+0x70>
 8009870:	6824      	ldr	r4, [r4, #0]
 8009872:	4421      	add	r1, r4
 8009874:	1854      	adds	r4, r2, r1
 8009876:	42a3      	cmp	r3, r4
 8009878:	6011      	str	r1, [r2, #0]
 800987a:	d1e0      	bne.n	800983e <_free_r+0x26>
 800987c:	681c      	ldr	r4, [r3, #0]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	6053      	str	r3, [r2, #4]
 8009882:	4421      	add	r1, r4
 8009884:	6011      	str	r1, [r2, #0]
 8009886:	e7da      	b.n	800983e <_free_r+0x26>
 8009888:	d902      	bls.n	8009890 <_free_r+0x78>
 800988a:	230c      	movs	r3, #12
 800988c:	6003      	str	r3, [r0, #0]
 800988e:	e7d6      	b.n	800983e <_free_r+0x26>
 8009890:	6825      	ldr	r5, [r4, #0]
 8009892:	1961      	adds	r1, r4, r5
 8009894:	428b      	cmp	r3, r1
 8009896:	bf04      	itt	eq
 8009898:	6819      	ldreq	r1, [r3, #0]
 800989a:	685b      	ldreq	r3, [r3, #4]
 800989c:	6063      	str	r3, [r4, #4]
 800989e:	bf04      	itt	eq
 80098a0:	1949      	addeq	r1, r1, r5
 80098a2:	6021      	streq	r1, [r4, #0]
 80098a4:	6054      	str	r4, [r2, #4]
 80098a6:	e7ca      	b.n	800983e <_free_r+0x26>
 80098a8:	b003      	add	sp, #12
 80098aa:	bd30      	pop	{r4, r5, pc}
 80098ac:	20000928 	.word	0x20000928

080098b0 <sbrk_aligned>:
 80098b0:	b570      	push	{r4, r5, r6, lr}
 80098b2:	4e0e      	ldr	r6, [pc, #56]	; (80098ec <sbrk_aligned+0x3c>)
 80098b4:	460c      	mov	r4, r1
 80098b6:	6831      	ldr	r1, [r6, #0]
 80098b8:	4605      	mov	r5, r0
 80098ba:	b911      	cbnz	r1, 80098c2 <sbrk_aligned+0x12>
 80098bc:	f000 f88c 	bl	80099d8 <_sbrk_r>
 80098c0:	6030      	str	r0, [r6, #0]
 80098c2:	4621      	mov	r1, r4
 80098c4:	4628      	mov	r0, r5
 80098c6:	f000 f887 	bl	80099d8 <_sbrk_r>
 80098ca:	1c43      	adds	r3, r0, #1
 80098cc:	d00a      	beq.n	80098e4 <sbrk_aligned+0x34>
 80098ce:	1cc4      	adds	r4, r0, #3
 80098d0:	f024 0403 	bic.w	r4, r4, #3
 80098d4:	42a0      	cmp	r0, r4
 80098d6:	d007      	beq.n	80098e8 <sbrk_aligned+0x38>
 80098d8:	1a21      	subs	r1, r4, r0
 80098da:	4628      	mov	r0, r5
 80098dc:	f000 f87c 	bl	80099d8 <_sbrk_r>
 80098e0:	3001      	adds	r0, #1
 80098e2:	d101      	bne.n	80098e8 <sbrk_aligned+0x38>
 80098e4:	f04f 34ff 	mov.w	r4, #4294967295
 80098e8:	4620      	mov	r0, r4
 80098ea:	bd70      	pop	{r4, r5, r6, pc}
 80098ec:	2000092c 	.word	0x2000092c

080098f0 <_malloc_r>:
 80098f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098f4:	1ccd      	adds	r5, r1, #3
 80098f6:	f025 0503 	bic.w	r5, r5, #3
 80098fa:	3508      	adds	r5, #8
 80098fc:	2d0c      	cmp	r5, #12
 80098fe:	bf38      	it	cc
 8009900:	250c      	movcc	r5, #12
 8009902:	2d00      	cmp	r5, #0
 8009904:	4607      	mov	r7, r0
 8009906:	db01      	blt.n	800990c <_malloc_r+0x1c>
 8009908:	42a9      	cmp	r1, r5
 800990a:	d905      	bls.n	8009918 <_malloc_r+0x28>
 800990c:	230c      	movs	r3, #12
 800990e:	603b      	str	r3, [r7, #0]
 8009910:	2600      	movs	r6, #0
 8009912:	4630      	mov	r0, r6
 8009914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009918:	4e2e      	ldr	r6, [pc, #184]	; (80099d4 <_malloc_r+0xe4>)
 800991a:	f000 f86d 	bl	80099f8 <__malloc_lock>
 800991e:	6833      	ldr	r3, [r6, #0]
 8009920:	461c      	mov	r4, r3
 8009922:	bb34      	cbnz	r4, 8009972 <_malloc_r+0x82>
 8009924:	4629      	mov	r1, r5
 8009926:	4638      	mov	r0, r7
 8009928:	f7ff ffc2 	bl	80098b0 <sbrk_aligned>
 800992c:	1c43      	adds	r3, r0, #1
 800992e:	4604      	mov	r4, r0
 8009930:	d14d      	bne.n	80099ce <_malloc_r+0xde>
 8009932:	6834      	ldr	r4, [r6, #0]
 8009934:	4626      	mov	r6, r4
 8009936:	2e00      	cmp	r6, #0
 8009938:	d140      	bne.n	80099bc <_malloc_r+0xcc>
 800993a:	6823      	ldr	r3, [r4, #0]
 800993c:	4631      	mov	r1, r6
 800993e:	4638      	mov	r0, r7
 8009940:	eb04 0803 	add.w	r8, r4, r3
 8009944:	f000 f848 	bl	80099d8 <_sbrk_r>
 8009948:	4580      	cmp	r8, r0
 800994a:	d13a      	bne.n	80099c2 <_malloc_r+0xd2>
 800994c:	6821      	ldr	r1, [r4, #0]
 800994e:	3503      	adds	r5, #3
 8009950:	1a6d      	subs	r5, r5, r1
 8009952:	f025 0503 	bic.w	r5, r5, #3
 8009956:	3508      	adds	r5, #8
 8009958:	2d0c      	cmp	r5, #12
 800995a:	bf38      	it	cc
 800995c:	250c      	movcc	r5, #12
 800995e:	4629      	mov	r1, r5
 8009960:	4638      	mov	r0, r7
 8009962:	f7ff ffa5 	bl	80098b0 <sbrk_aligned>
 8009966:	3001      	adds	r0, #1
 8009968:	d02b      	beq.n	80099c2 <_malloc_r+0xd2>
 800996a:	6823      	ldr	r3, [r4, #0]
 800996c:	442b      	add	r3, r5
 800996e:	6023      	str	r3, [r4, #0]
 8009970:	e00e      	b.n	8009990 <_malloc_r+0xa0>
 8009972:	6822      	ldr	r2, [r4, #0]
 8009974:	1b52      	subs	r2, r2, r5
 8009976:	d41e      	bmi.n	80099b6 <_malloc_r+0xc6>
 8009978:	2a0b      	cmp	r2, #11
 800997a:	d916      	bls.n	80099aa <_malloc_r+0xba>
 800997c:	1961      	adds	r1, r4, r5
 800997e:	42a3      	cmp	r3, r4
 8009980:	6025      	str	r5, [r4, #0]
 8009982:	bf18      	it	ne
 8009984:	6059      	strne	r1, [r3, #4]
 8009986:	6863      	ldr	r3, [r4, #4]
 8009988:	bf08      	it	eq
 800998a:	6031      	streq	r1, [r6, #0]
 800998c:	5162      	str	r2, [r4, r5]
 800998e:	604b      	str	r3, [r1, #4]
 8009990:	4638      	mov	r0, r7
 8009992:	f104 060b 	add.w	r6, r4, #11
 8009996:	f000 f835 	bl	8009a04 <__malloc_unlock>
 800999a:	f026 0607 	bic.w	r6, r6, #7
 800999e:	1d23      	adds	r3, r4, #4
 80099a0:	1af2      	subs	r2, r6, r3
 80099a2:	d0b6      	beq.n	8009912 <_malloc_r+0x22>
 80099a4:	1b9b      	subs	r3, r3, r6
 80099a6:	50a3      	str	r3, [r4, r2]
 80099a8:	e7b3      	b.n	8009912 <_malloc_r+0x22>
 80099aa:	6862      	ldr	r2, [r4, #4]
 80099ac:	42a3      	cmp	r3, r4
 80099ae:	bf0c      	ite	eq
 80099b0:	6032      	streq	r2, [r6, #0]
 80099b2:	605a      	strne	r2, [r3, #4]
 80099b4:	e7ec      	b.n	8009990 <_malloc_r+0xa0>
 80099b6:	4623      	mov	r3, r4
 80099b8:	6864      	ldr	r4, [r4, #4]
 80099ba:	e7b2      	b.n	8009922 <_malloc_r+0x32>
 80099bc:	4634      	mov	r4, r6
 80099be:	6876      	ldr	r6, [r6, #4]
 80099c0:	e7b9      	b.n	8009936 <_malloc_r+0x46>
 80099c2:	230c      	movs	r3, #12
 80099c4:	603b      	str	r3, [r7, #0]
 80099c6:	4638      	mov	r0, r7
 80099c8:	f000 f81c 	bl	8009a04 <__malloc_unlock>
 80099cc:	e7a1      	b.n	8009912 <_malloc_r+0x22>
 80099ce:	6025      	str	r5, [r4, #0]
 80099d0:	e7de      	b.n	8009990 <_malloc_r+0xa0>
 80099d2:	bf00      	nop
 80099d4:	20000928 	.word	0x20000928

080099d8 <_sbrk_r>:
 80099d8:	b538      	push	{r3, r4, r5, lr}
 80099da:	4d06      	ldr	r5, [pc, #24]	; (80099f4 <_sbrk_r+0x1c>)
 80099dc:	2300      	movs	r3, #0
 80099de:	4604      	mov	r4, r0
 80099e0:	4608      	mov	r0, r1
 80099e2:	602b      	str	r3, [r5, #0]
 80099e4:	f7f7 fb72 	bl	80010cc <_sbrk>
 80099e8:	1c43      	adds	r3, r0, #1
 80099ea:	d102      	bne.n	80099f2 <_sbrk_r+0x1a>
 80099ec:	682b      	ldr	r3, [r5, #0]
 80099ee:	b103      	cbz	r3, 80099f2 <_sbrk_r+0x1a>
 80099f0:	6023      	str	r3, [r4, #0]
 80099f2:	bd38      	pop	{r3, r4, r5, pc}
 80099f4:	20000930 	.word	0x20000930

080099f8 <__malloc_lock>:
 80099f8:	4801      	ldr	r0, [pc, #4]	; (8009a00 <__malloc_lock+0x8>)
 80099fa:	f000 b809 	b.w	8009a10 <__retarget_lock_acquire_recursive>
 80099fe:	bf00      	nop
 8009a00:	20000934 	.word	0x20000934

08009a04 <__malloc_unlock>:
 8009a04:	4801      	ldr	r0, [pc, #4]	; (8009a0c <__malloc_unlock+0x8>)
 8009a06:	f000 b804 	b.w	8009a12 <__retarget_lock_release_recursive>
 8009a0a:	bf00      	nop
 8009a0c:	20000934 	.word	0x20000934

08009a10 <__retarget_lock_acquire_recursive>:
 8009a10:	4770      	bx	lr

08009a12 <__retarget_lock_release_recursive>:
 8009a12:	4770      	bx	lr

08009a14 <_init>:
 8009a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a16:	bf00      	nop
 8009a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a1a:	bc08      	pop	{r3}
 8009a1c:	469e      	mov	lr, r3
 8009a1e:	4770      	bx	lr

08009a20 <_fini>:
 8009a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a22:	bf00      	nop
 8009a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a26:	bc08      	pop	{r3}
 8009a28:	469e      	mov	lr, r3
 8009a2a:	4770      	bx	lr
